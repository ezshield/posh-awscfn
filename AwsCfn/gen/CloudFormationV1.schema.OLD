{
  "intrinsic-functions": {
    "Fn::Base64": {
      "parameter": "Object",
      "return-type": "String",
      "description": "The intrinsic function Fn::Base64 returns the Base64 representation of the input string. This function is typically used to pass encoded data to Amazon EC2 instances by way of the UserData property.",
      "skeleton": "{\"Fn::Base64\" : {}}"
    },
    "Fn::FindInMap": {
      "parameter": "Array",
      "return-type": "String",
      "description": "The intrinsic function Fn::FindInMap returns the value of a key from a mapping declared in the Mappings section.",
      "skeleton": "{\"Fn::FindInMap\" : [ \"\" , \"\", \"\"] }"
    },
    "Fn::GetAtt": {
      "parameter": "Array",
      "return-type": "String",
      "description": "The intrinsic function Fn::GetAtt returns the value of an attribute from a resource in the template.",
      "skeleton": "{\"Fn::GetAtt\" : [ \"\", \"\"]}"
    },
    "Fn::GetAZs": {
      "parameter": "String",
      "return-type": "Array",
      "description": "The intrinsic function Fn::GetAZs returns an array that lists all Availability Zones for the specified region.",
      "skeleton": "{ \"Fn::GetAZs\" : \"\" }"
    },
    "Fn::ImportValue": {
      "parameter": "Object",
      "return-type": "String",
      "description": "The intrinsic function Fn::ImportValue returns the value of an output exported by another stack.",
      "skeleton": "{ \"Fn::ImportValue\" : {} }"
    },
    "Fn::Join": {
      "parameter": "Array",
      "return-type": "String",
      "description": "The intrinsic function Fn::Join appends a set of values into a single value, separated by the specified delimiter. If a delimiter is the empty string, the set of values are concatenated with no delimiter.",
      "skeleton": "{\"Fn::Join\" : [ \"\", [ ] ]}"
    },
    "Fn::Select": {
      "parameter": "Array",
      "return-type": "String",
      "description": "The intrinsic function Fn::Select returns a single object from a list of objects by index.",
      "skeleton": "{ \"Fn::Select\" : [ 0, [] ] }"
    },
    "Fn::If": {
      "parameter": "Array",
      "return-type": "String",
      "description": "Returns one value if the specified condition evaluates to true and another value if the specified condition evaluates to false. You can use the AWS::NoValue pseudo parameter as a return value to remove the corresponding property.",
      "skeleton": "{ \"Fn::If\" : [ ] }"
    },
    "Fn::Sub": {
      "parameter": "Json",
      "return-type": "String",
      "description": "The intrinsic function Fn::Sub substitutes variables in an input string with values that you specify. ",
      "skeleton": "{ \"Fn::If\" : \"\" }"
    },
    "Ref": {
      "parameter": "String",
      "return-type": "String",
      "description": "The intrinsic function Ref returns the value of the specified parameter or resource."
    }
  }
,
  "pseudo-parameters": {
    "AWS::NotificationARNs": {
      "type": "Array",
      "array-type": "String",
      "description": "Returns the list of notification Amazon Resource Names (ARNs) for the current stack."
    },
    "AWS::Region": {
      "type": "String",
      "description": "Returns a string representing the AWS Region in which the encompassing resource is being created."
    },
    "AWS::StackId": {
      "type": "String",
      "description": "Returns the ID of the stack."
    },
    "AWS::StackName": {
      "type": "String",
      "description": "Returns the name of the stack."
    },
    "AWS::AccountId": {
      "type": "String",
      "description": "Returns the AWS account ID of the account in which the stack is being created."
    },
    "AWS::NoValue": {
      "type": "String",
      "description": "Used to unset a property for conditional properties."
    }
  }
,"root-schema-object" :{"type": "Object","required": true,"properties": {
  "AWSTemplateFormatVersion": {
    "type": "String",
    "required": false,
    "allowed-values": [
      "2010-09-09"
    ],
    "disable-refs": true,
    "description": "The template format version is an optional declaration that identifies the capabilities of the template format. Because the AWS CloudFormation template format has not changed, there is currently only one value supported."
  }
,
  "Transform": {
    "type": "String",
    "required": false,
    "disable-refs": true,
    "disable-functions": true,
    "allowed-values": [
      "*",
      "AWS::Serverless-2016-10-31"
    ],
    "description": "The optional Transform section specifies a transform that AWS CloudFormation uses to process your template. A transform is a specific version of the AWS Serverless Application Model (AWS SAM). This model defines the AWS SAM syntax that you can use and how AWS CloudFormation processes it."
  }
,
  "Description": {
    "type": "String",
    "required": false,
    "disable-refs": true,
    "disable-functions": true,
    "description": "The template Description section is optional. When it is present, it must follow the AWSTemplateFormatVersion section."
  }
,
  "Parameters": {
    "type": "Named-Array",
    "required": false,
    "description": "The optional Parameters section enables you to pass values into your template at stack creation time. Parameters allow you to create templates that can be customized for each stack deployment. When a user creates a stack from a template containing parameters, the user can specify values for those parameters. Within the template, you can use the \"Ref\" intrinsic function to specify those parameter values in properties values for resources.",
    "default-child-schema": {
      "type": "Object",
      "required": false,
      "properties": {
        "Type": {
          "type": "String",
          "required": true,
          "description": "The type of parameter to create.",
          "allowed-values": [
            "String",
            "Number",
            "CommaDelimitedList",
            "AWS::EC2::AvailabilityZone::Name",
            "List<AWS::EC2::AvailabilityZone::Name>",
            "AWS::EC2::Instance::Id",
            "List<AWS::EC2::Instance::Id>",
            "AWS::EC2::Image::Id",
            "List<AWS::EC2::Image::Id>",
            "AWS::EC2::KeyPair::KeyName",
            "AWS::EC2::SecurityGroup::Id",
            "List<AWS::EC2::SecurityGroup::Id>",
            "AWS::EC2::SecurityGroup::GroupName",
            "List<AWS::EC2::SecurityGroup::GroupName>",
            "AWS::EC2::Subnet::Id",
            "List<AWS::EC2::Subnet::Id>",
            "AWS::EC2::Volume::Id",
            "List<AWS::EC2::Volume::Id>",
            "AWS::EC2::VPC::Id",
            "List<AWS::EC2::VPC::Id>",
            "AWS::Route53::HostedZone::Id",
            "List<AWS::Route53::HostedZone::Id>"
          ]
        },
        "Default": {
          "type": "String",
          "required": false,
          "description": "A value of the appropriate type for the template to use if no value is specified at stack creation."
        },
        "NoEcho": {
          "type": "String",
          "required": false,
          "description": "If TRUE, the value of the parameter is masked with asterisks (*****) with cfn-describe-stacks."
        },
        "AllowedValues": {
          "type": "Array",
          "array-type": "String",
          "required": false,
          "description": "An array containing the list of values allowed for the parameter."
        },
        "AllowedPattern": {
          "type": "String",
          "required": false,
          "description": " A regular expression that represents the patterns allowed in the parameter's string value."
        },
        "MaxLength": {
          "type": "String",
          "required": false,
          "description": "A integer value that determines the maximum number of characters in the parameter's string value."
        },
        "MinLength": {
          "type": "String",
          "required": false,
          "description": "A integer value that determines the minimum number of characters in the parameter's string value."
        },
        "MaxValue": {
          "type": "Number",
          "required": false,
          "description": "A numeric value that determines the largest numeric value allowed for the parameter."
        },
        "MinValue": {
          "type": "Number",
          "required": false,
          "description": "A numeric value that determines the smallest numeric value allowed for the parameter."
        },
        "Description": {
          "type": "String",
          "required": false,
          "description": "A String type up to 4000 characters describing the parameter."
        },
        "ConstraintDescription": {
          "type": "String",
          "required": false,
          "description": "A String type that describes the constraint requirements when the user specifies a parameter value that does not match the constraints defined for the parameter."
        }
      }
    }
  }
,
  "Mappings": {
    "type": "Named-Array",
    "required": false,
    "description": "Mappings match a key to a corresponding set of named values. For example, if you want to set values based on a region, you can create a mapping that uses the region name as a key and contains the values you want to specify for each specific region.",
    "default-child-schema": {
      "type": "Json",
      "required": true
    }
  }
,
  "Metadata": {
    "type": "Json",
    "required": false,
    "disable-refs": true,
    "description": "You can use the optional Metadata section to include arbitrary JSON objects that provide details about the template."
  }
,
  "Conditions": {
    "type": "Named-Array",
    "required": false,
    "description": "You define all conditions in the Conditions section of a template by using intrinsic functions. With these intrinsic functions, you can, for example, compare whether a value is equal to another value. Based on the result of a condition, you can conditionally create resources.",
    "default-child-schema": {
      "type": "ConditionDefinitions",
      "required": true,
      "properties": {
        "Fn::And": {
          "type": "Array",
          "array-type": "Json",
          "required": false,
          "description": "Returns true if all the specified conditions evaluate to true, or returns false if any one of the conditions evaluates to false. Fn::And acts as an AND operator."
        },
        "Fn::Equals": {
          "type": "Array",
          "array-type": "Json",
          "required": false,
          "description": "Compares if two values are equal. Returns true if the two values are equal or false if they aren't."
        },
        "Fn::Not": {
          "type": "Array",
          "array-type": "Json",
          "required": false,
          "description": "Returns true for a condition that evaluates to false or returns false for a condition that evaluates to true. Fn::Not acts as a NOT operator."
        },
        "Fn::Or": {
          "type": "Array",
          "array-type": "Json",
          "required": false,
          "description": "Returns true if any one of the specified conditions evaluate to true, or returns false if all of the conditions evaluates to false. Fn::Or acts as an OR operator."
        }
      }
    }
  }
,"Resources": {"type": "Named-Array","schema-lookup-property": "Type","required": true,"description": "The required Resources section describes the member resources in your AWS CloudFormation template.","child-schemas": {
  "AWS::ApiGateway::Account": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Account resource specifies the AWS Identity and Access Management (IAM) role that Amazon API Gateway (API Gateway) uses to write API logs to Amazon CloudWatch Logs (CloudWatch Logs).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Account resource specifies the AWS Identity and Access Management (IAM) role that Amazon API Gateway (API Gateway) uses to write API logs to Amazon CloudWatch Logs (CloudWatch Logs)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CloudWatchRoleArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an IAM role that has write access to CloudWatch Logs in your account."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::ApiKey": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::ApiKey resource creates a unique key that you can distribute to clients who are executing Amazon API Gateway (API Gateway) Method resources that require an API key.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::ApiKey resource creates a unique key that you can distribute to clients who are executing Amazon API Gateway (API Gateway) Method resources that require an API key."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the purpose of the API key."
          },
          "Enabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the API key can be used by clients."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the API key. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the API key name."
          },
          "StageKeys": {
            "type": "Object",
            "required": false,
            "description": "A list of stages to associated with this API key.",
            "properties": {
              "RestApiId": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ApiGateway::RestApi",
                "description": "The ID of a RestApi resource that includes the stage with which you want to associate the API key."
              },
              "StageName": {
                "type": "String",
                "required": false,
                "description": "The name of the stage with which to associate the API key. The stage must be included in the RestApi resource that you specified in the RestApiId property."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Authorizer": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Authorizer resource creates an authorization layer that Amazon API Gateway (API Gateway) activates for methods that have authorization enabled. API Gateway activates the authorizer when a client calls those methods.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Authorizer resource creates an authorization layer that Amazon API Gateway (API Gateway) activates for methods that have authorization enabled. API Gateway activates the authorizer when a client calls those methods."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AuthorizerCredentials": {
            "type": "String",
            "required": false,
            "description": "The credentials required for the authorizer. To specify an AWS Identity and Access Management (IAM) role that API Gateway assumes, specify the role's Amazon Resource Name (ARN). To use resource-based permissions on the AWS Lambda (Lambda) function, specify null."
          },
          "AuthorizerResultTtlInSeconds": {
            "type": "Number",
            "required": false,
            "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches authorizer results."
          },
          "AuthorizerUri": {
            "type": "String",
            "required": true,
            "description": "The authorizer's Uniform Resource Identifier (URI)."
          },
          "IdentitySource": {
            "type": "String",
            "required": true,
            "description": "The source of the identity in an incoming request."
          },
          "IdentityValidationExpression": {
            "type": "String",
            "required": false,
            "description": "A validation expression for the incoming identity."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the authorizer."
          },
          "ProviderARNs": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of the Amazon Cognito user pool Amazon Resource Names (ARNs) to associate with this authorizer."
          },
          "RestApiId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource in which API Gateway creates the authorizer."
          },
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of the authorizer, such as TOKEN."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::BasePathMapping": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::BasePathMapping resource creates a base path that clients who call your Amazon API Gateway API must use in the invocation URL.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::BasePathMapping resource creates a base path that clients who call your Amazon API Gateway API must use in the invocation URL."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BasePath": {
            "type": "String",
            "required": false,
            "description": "The base path name that callers of the API must provide in the URL after the domain name."
          },
          "DomainName": {
            "type": "String",
            "required": true,
            "description": "The name of a DomainName resource."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The name of the API."
          },
          "Stage": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ApiGateway::Stage",
            "description": "The name of the API's stage."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::ClientCertificate": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::ClientCertificate resource creates a client certificate that Amazon API Gateway (API Gateway) uses to configure client-side SSL authentication for sending requests to the integration endpoint.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::ClientCertificate resource creates a client certificate that Amazon API Gateway (API Gateway) uses to configure client-side SSL authentication for sending requests to the integration endpoint."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the client certificate."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Deployment": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Deployment resource deploys an Amazon API Gateway (API Gateway) RestApi resource to a stage so that clients can call the API over the Internet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Deployment resource deploys an Amazon API Gateway (API Gateway) RestApi resource to a stage so that clients can call the API over the Internet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the purpose of the API Gateway deployment."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource to deploy."
          },
          "StageDescription": {
            "type": "Object",
            "required": false,
            "description": "Configures the stage that API Gateway creates with this deployment.",
            "properties": {
              "CacheClusterEnabled": {
                "type": "String",
                "required": false,
                "description": "Indicates whether cache clustering is enabled for the stage."
              },
              "CacheClusterSize": {
                "type": "String",
                "required": false,
                "description": "The size of the stage's cache cluster."
              },
              "CacheDataEncrypted": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the cached responses are encrypted."
              },
              "CacheTtlInSeconds": {
                "type": "Number",
                "required": false,
                "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses."
              },
              "CachingEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether responses are cached and returned for requests."
              },
              "ClientCertificateId": {
                "type": "String",
                "required": false,
                "description": "The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage."
              },
              "DataTraceEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "A description of the purpose of the stage."
              },
              "LoggingLevel": {
                "type": "String",
                "required": false,
                "description": "The logging level for this method."
              },
              "MethodSettings": {
                "type": "Object",
                "required": false,
                "description": "Configures settings for all of the stage's methods.",
                "properties": {
                  "CacheDataEncrypted": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the cached responses are encrypted."
                  },
                  "CacheTtlInSeconds": {
                    "type": "Number",
                    "required": false,
                    "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses."
                  },
                  "CachingEnabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether responses are cached and returned for requests."
                  },
                  "DataTraceEnabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether data trace logging is enabled for methods in the stage."
                  },
                  "HttpMethod": {
                    "type": "String",
                    "required": false,
                    "description": "The HTTP method."
                  },
                  "LoggingLevel": {
                    "type": "String",
                    "required": false,
                    "description": "The logging level for this method."
                  },
                  "MetricsEnabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage."
                  },
                  "ResourcePath": {
                    "type": "String",
                    "required": false,
                    "description": "The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/)."
                  },
                  "ThrottlingBurstLimit": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
                  },
                  "ThrottlingRateLimit": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
                  }
                }
              },
              "MetricsEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage."
              },
              "StageName": {
                "type": "String",
                "required": false,
                "description": "The name of the stage, which API Gateway uses as the first path segment in the invoke Uniform Resource Identifier (URI)."
              },
              "ThrottlingBurstLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              },
              "ThrottlingRateLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              },
              "Variables": {
                "type": "Json",
                "required": false,
                "description": "A map that defines the stage variables."
              }
            }
          },
          "StageName": {
            "type": "String",
            "resource-ref-type": "AWS::ApiGateway::Stage",
            "description": "A name for the stage that API Gateway creates with this deployment. Use only alphanumeric characters."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Method": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Method resource creates Amazon API Gateway (API Gateway) methods that define the parameters and body that clients must send in their requests.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Method resource creates Amazon API Gateway (API Gateway) methods that define the parameters and body that clients must send in their requests."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApiKeyRequired": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the method requires clients to submit a valid API key."
          },
          "AuthorizationType": {
            "type": "Boolean",
            "required": false,
            "description": "The method's authorization type."
          },
          "AuthorizerId": {
            "type": "String",
            "required": false,
            "description": "The identifier of the authorizer to use on this method. If you specify this property, specify CUSTOM for the AuthorizationType property."
          },
          "HttpMethod": {
            "type": "String",
            "required": true,
            "description": "The HTTP method that clients will use to call this method."
          },
          "Integration": {
            "type": "Object",
            "required": false,
            "description": "The back-end system that the method calls when it receives a request.",
            "properties": {
              "CacheKeyParameters": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of request parameters whose values API Gateway will cache."
              },
              "CacheNamespace": {
                "type": "String",
                "required": false,
                "description": "An API-specific tag group of related cached parameters."
              },
              "Credentials": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The credentials required for the integration."
              },
              "IntegrationHttpMethod": {
                "type": "String",
                "required": false,
                "description": "The integration's HTTP method type."
              },
              "IntegrationResponses": {
                "type": "Object",
                "required": false,
                "description": "The response that API Gateway provides after a method's back end completes processing a request.",
                "properties": {
                  "ResponseParameters": {
                    "type": "Json",
                    "required": false,
                    "description": "The response parameters from the back-end response that API Gateway sends to the method response."
                  },
                  "ResponseTemplates": {
                    "type": "Json",
                    "required": false,
                    "description": "The templates used to transform the integration response body."
                  },
                  "SelectionPattern": {
                    "type": "String",
                    "required": false,
                    "description": "A regular expression that specifies which error strings or status codes from the back end map to the integration response."
                  },
                  "StatusCode": {
                    "type": "String",
                    "required": false,
                    "description": "The status code that API Gateway uses to map the integration response to a MethodResponse status code."
                  }
                }
              },
              "PassthroughBehavior": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "WHEN_NO_MATCH",
                  "NEVER",
                  "WHEN_NO_TEMPLATES"
                ],
                "description": "Indicates when API Gateway passes requests to the targeted back end. This behavior depends on the request's Content-Type header and whether you defined a mapping template for it."
              },
              "RequestParameters": {
                "type": "Json",
                "required": false,
                "description": "The request parameters that API Gateway sends with the back-end request."
              },
              "RequestTemplates": {
                "type": "Json",
                "required": false,
                "description": "A map of Apache Velocity templates that are applied on the request payload."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "AWS",
                  "MOCK",
                  "HTTP_PROXY",
                  "AWS_PROXY"
                ],
                "description": "The type of back end your method is running, such as HTTP, AWS, or MOCK."
              },
              "Uri": {
                "type": "String",
                "required": true,
                "description": "The integration's Uniform Resource Identifier (URI)."
              }
            }
          },
          "MethodResponses": {
            "type": "Object",
            "required": false,
            "description": "The responses that can be sent to the client who calls the method.",
            "properties": {
              "ResponseModels": {
                "type": "Json",
                "required": false,
                "description": "The resources used for the response's content type."
              },
              "ResponseParameters": {
                "type": "Json",
                "required": false,
                "description": "Response parameters that API Gateway sends to the client that called a method."
              },
              "StatusCode": {
                "type": "String",
                "required": true,
                "description": "The method response's status code, which you map to an IntegrationResponse."
              }
            }
          },
          "RequestModels": {
            "type": "Json",
            "required": false,
            "description": "The resources used for the response's content type. Specify response models as key-value pairs (string-to-string map), with a content type as the key and a Model resource name as the value."
          },
          "RequestParameters": {
            "type": "Json",
            "required": false,
            "description": "Request parameters that API Gateway accepts. "
          },
          "ResourceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::Resource",
            "description": "The ID of an API Gateway resource."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource in which API Gateway creates the method."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Model": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Model resource defines the structure of a request or response payload for an Amazon API Gateway (API Gateway) method.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Model resource defines the structure of a request or response payload for an Amazon API Gateway (API Gateway) method."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ContentType": {
            "type": "String",
            "required": false,
            "description": "The content type for the model."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description that identifies this model."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the mode. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the model name."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of a REST API with which to associate this model."
          },
          "Schema": {
            "type": "Json",
            "required": false,
            "description": "The schema to use to transform data to one or more output formats."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Resource": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Resource resource creates a resource in an Amazon API Gateway (API Gateway) API.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Resource resource creates a resource in an Amazon API Gateway (API Gateway) API."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ParentId": {
            "type": "String",
            "required": true,
            "description": "If you want to create a child resource, the ID of the parent resource."
          },
          "PathPart": {
            "type": "String",
            "required": true,
            "description": "A path name for the resource."
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource in which you want to create this resource."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::RestApi": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::RestApi resource contains a collection of Amazon API Gateway (API Gateway) resources and methods that can be invoked through HTTPS endpoints.",
    "return-values": [
      {
        "name": "RootResourceId",
        "description": "The root resource ID for a RestApi resource, such as a0bc123d4e."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::RestApi resource contains a collection of Amazon API Gateway (API Gateway) resources and methods that can be invoked through HTTPS endpoints."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Body": {
            "type": "Json",
            "required": false,
            "description": "A Swagger specification that defines a set of RESTful APIs in the JSON format."
          },
          "BodyS3Location": {
            "type": "Object",
            "required": false,
            "description": "The Amazon Simple Storage Service (Amazon S3) location that points to a Swagger file, which defines a set of RESTful APIs in JSON or YAML format.",
            "properties": {
              "Bucket": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The name of the S3 bucket where the Swagger file is stored."
              },
              "ETag": {
                "type": "String",
                "required": false,
                "description": "The Amazon S3 ETag (a file checksum) of the Swagger file."
              },
              "Key": {
                "type": "String",
                "required": false,
                "description": "The file name of the Swagger file (Amazon S3 object name)."
              },
              "Version": {
                "type": "String",
                "required": false,
                "description": "For versioning-enabled buckets, a specific version of the Swagger file."
              }
            }
          },
          "CloneFrom": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the API Gateway RestApi resource that you want to clone."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the purpose of this API Gateway RestApi resource."
          },
          "FailOnWarnings": {
            "type": "Boolean",
            "required": false,
            "description": "If a warning occurs while API Gateway is creating the RestApi resource, indicates whether to roll back the resource."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the API Gateway RestApi resource."
          },
          "Parameters": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "Custom header parameters for the request."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::Stage": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::Stage resource creates a stage for an Amazon API Gateway (API Gateway) deployment.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::Stage resource creates a stage for an Amazon API Gateway (API Gateway) deployment."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CacheClusterEnabled": {
            "type": "String",
            "required": false,
            "description": "Indicates whether cache clustering is enabled for the stage."
          },
          "CacheClusterSize": {
            "type": "String",
            "required": false,
            "description": "The stage's cache cluster size."
          },
          "ClientCertificateId": {
            "type": "String",
            "required": false,
            "description": "The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage."
          },
          "DeploymentId": {
            "type": "String",
            "required": true,
            "description": "The ID of the deployment that the stage points to."
          },
          "Description": {
            "type": "String",
            "required": true,
            "description": "The ID of the deployment that the stage points to."
          },
          "MethodSettings": {
            "type": "Object",
            "required": false,
            "description": "Configures settings for all of the stage's methods.",
            "properties": {
              "CacheDataEncrypted": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the cached responses are encrypted."
              },
              "CacheTtlInSeconds": {
                "type": "Number",
                "required": false,
                "description": "The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses."
              },
              "CachingEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether responses are cached and returned for requests."
              },
              "DataTraceEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether data trace logging is enabled for methods in the stage."
              },
              "HttpMethod": {
                "type": "String",
                "required": false,
                "description": "The HTTP method."
              },
              "LoggingLevel": {
                "type": "String",
                "required": false,
                "description": "The logging level for this method."
              },
              "MetricsEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage."
              },
              "ResourcePath": {
                "type": "String",
                "required": false,
                "description": "The resource path for this method. Forward slashes (/) are encoded as ~1 and the initial slash must include a forward slash. For example, the path value /resource/subresource must be encoded as /~1resource~1subresource. To specify the root path, use only a slash (/)."
              },
              "ThrottlingBurstLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of burst requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              },
              "ThrottlingRateLimit": {
                "type": "Number",
                "required": false,
                "description": "The number of steady-state requests per second that API Gateway permits across all APIs, stages, and methods in your AWS account."
              }
            }
          },
          "RestApiId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ApiGateway::RestApi",
            "description": "The ID of the RestApi resource that you're deploying with this stage."
          },
          "StageName": {
            "type": "String",
            "required": true,
            "description": "The name of the stage, which API Gateway uses as the first path segment in the invoke Uniform Resource Identifier (URI)."
          },
          "Variables": {
            "type": "Json",
            "required": false,
            "description": "A map (string to string map) that defines the stage variables, where the variable name is the key and the variable value is the value."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApiGateway::UsagePlan": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApiGateway::UsagePlan resource specifies a usage plan for deployed Amazon API Gateway (API Gateway) APIs.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApiGateway::UsagePlan resource specifies a usage plan for deployed Amazon API Gateway (API Gateway) APIs."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApiStages": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The APIs and API stages to associate with this usage plan.",
            "properties": {
              "ApiId": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ApiGateway::RestApi",
                "description": "The ID of an API that is in the specified Stage property that you want to associate with the usage plan."
              },
              "Stage": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ApiGateway::Stage",
                "description": "The name of an API Gateway stage to associate with the usage plan."
              }
            }
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "The purpose of this usage plan."
          },
          "Quota": {
            "type": "Object",
            "required": false,
            "description": "Configures the number of requests that users can make within a given interval.",
            "properties": {
              "Limit": {
                "type": "Number",
                "required": false,
                "description": "The maximum number of requests that users can make within the specified time period."
              },
              "Offset": {
                "type": "Number",
                "required": false,
                "description": "For the initial time period, the number of requests to subtract from the specified limit."
              },
              "Period": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "DAY",
                  "WEEK",
                  "MONTH"
                ],
                "description": "The time period for which the maximum limit of requests applies, such as DAY or WEEK."
              }
            }
          },
          "Throttle": {
            "type": "Object",
            "required": false,
            "description": "Configures the overall request rate (average requests per second) and burst capacity.",
            "properties": {
              "BurstLimit": {
                "type": "Number",
                "required": false,
                "description": "The maximum API request rate limit over a time ranging from one to a few seconds."
              },
              "RateLimit": {
                "type": "Number",
                "required": false,
                "description": "The API request steady-state rate limit (average requests per second over an extended period of time)."
              }
            }
          },
          "UsagePlanName": {
            "type": "String",
            "required": false,
            "description": "A name for this usage plan."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApplicationAutoScaling::ScalableTarget": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApplicationAutoScaling::ScalableTarget resource specifies a resource that Application Auto Scaling can scale up or down.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApplicationAutoScaling::ScalableTarget resource specifies a resource that Application Auto Scaling can scale up or down."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "MaxCapacity": {
            "type": "Number",
            "required": true,
            "description": "The maximum value that Application Auto Scaling can use to scale a target during a scaling activity."
          },
          "MinCapacity": {
            "type": "Number",
            "required": true,
            "description": "The minimum value that Application Auto Scaling can use to scale a target during a scaling activity."
          },
          "ResourceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "*",
            "description": "The unique resource identifier to associate with this scalable target."
          },
          "RoleARN": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
          },
          "ScalableDimension": {
            "type": "String",
            "required": true,
            "description": "The scalable dimension associated with the scalable target."
          },
          "ServiceNamespace": {
            "type": "String",
            "required": true,
            "description": "The AWS service namespace of the scalable target."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ApplicationAutoScaling::ScalingPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ApplicationAutoScaling::ScalingPolicy resource defines an Application Auto Scaling scaling policy that Application Auto Scaling uses to adjust your application resources.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ApplicationAutoScaling::ScalingPolicy resource defines an Application Auto Scaling scaling policy that Application Auto Scaling uses to adjust your application resources."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::ScalingPolicy",
            "description": "A name for the scaling policy."
          },
          "PolicyType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "StepScaling"
            ],
            "description": "A name for the scaling policy."
          },
          "ResourceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "*",
            "description": "The unique resource identifier for the scalable target that this scaling policy applies to."
          },
          "ScalableDimension": {
            "type": "String",
            "required": false,
            "description": "The scalable dimension of the scalable target that this scaling policy applies to."
          },
          "ServiceNamespace": {
            "type": "String",
            "required": false,
            "description": "The AWS service namespace of the scalable target that this scaling policy applies to."
          },
          "ScalingTargetId": {
            "type": "String",
            "required": false,
            "description": "The AWS CloudFormation-generated ID of an Application Auto Scaling scalable target."
          },
          "StepScalingPolicyConfiguration": {
            "type": "Object",
            "required": false,
            "description": "A step policy that configures when Application Auto Scaling scales resources up or down, and by how much.",
            "properties": {
              "AdjustmentType": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "ChangeInCapacity",
                  "PercentChangeInCapacity",
                  "ExactCapacity"
                ],
                "description": "Specifies whether the ScalingAdjustment value in the StepAdjustment property is an absolute number or a percentage of the current capacity."
              },
              "Cooldown": {
                "type": "Number",
                "required": false,
                "description": "The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start."
              },
              "MetricAggregationType": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "Minimum",
                  "Maximum",
                  "Average"
                ],
                "description": "The aggregation type for the CloudWatch metrics."
              },
              "MinAdjustmentMagnitude": {
                "type": "Number",
                "required": false,
                "description": "The minimum number of resources to adjust when a scaling activity is triggered."
              },
              "StepAdjustments": {
                "type": "Object",
                "required": false,
                "description": "A set of adjustments that enable you to scale based on the size of the alarm breach.",
                "properties": {
                  "MetricIntervalLowerBound": {
                    "type": "Number",
                    "required": false,
                    "description": "The lower bound of the breach size. The lower bound is the difference between the breach threshold and the aggregated CloudWatch metric value."
                  },
                  "MetricIntervalUpperBound": {
                    "type": "Number",
                    "required": false,
                    "description": "The upper bound of the breach size. The upper bound is the difference between the breach threshold and the CloudWatch metric value."
                  },
                  "ScalingAdjustment": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount by which to scale."
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::AutoScalingGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AutoScaling::AutoScalingGroup type creates an Auto Scaling group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AutoScaling::AutoScalingGroup type creates an Auto Scaling group."
      },
      "CreationPolicy": {
        "type": "Object",
        "required": false,
        "description": "The CreationPolicy prevents the resource's status from reaching create complete until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded.",
        "properties": {
          "ResourceSignal": {
            "type": "Object",
            "required": true,
            "description": "Signal configuration.",
            "properties": {
              "Count": {
                "type": "Number",
                "required": false,
                "description": "The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE."
              },
              "Timeout": {
                "type": "String",
                "required": false,
                "description": "The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property. The value must be in ISO8601 duration format, in the form: PT#H#M#S, where each # is the number of hours, minutes, and seconds, respectively. Default: PT5M (5 minutes)"
              }
            }
          }
        }
      },
      "UpdatePolicy": {
        "type": "Json",
        "required": false,
        "description": "You can use the UpdatePolicy attribute to specify how AWS CloudFormation handles updates to the AWS::AutoScaling::AutoScalingGroup resource."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AvailabilityZones": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "Contains a list of Availability Zones for the group.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "Cooldown": {
            "type": "String",
            "required": false,
            "description": "The number of seconds after a scaling activity completes before any further scaling activities can start."
          },
          "DesiredCapacity": {
            "type": "String",
            "required": false,
            "description": "Specifies the desired capacity for the auto scaling group."
          },
          "HealthCheckGracePeriod": {
            "type": "Number",
            "required": false,
            "description": "The length of time in seconds after a new EC2 instance comes into service that Auto Scaling starts checking its health."
          },
          "HealthCheckType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "EC2",
              "ELB"
            ],
            "description": "The service you want the health status from, Amazon EC2 or Elastic Load Balancer. Valid values are \"EC2\" or \"ELB.\""
          },
          "InstanceId": {
            "type": "String",
            "required": false,
            "description": "The ID of the Amazon EC2 instance you want to use to create the Auto Scaling group. Use this property if you want to create an Auto Scaling group by using an existing Amazon EC2 instance instead of a launch configuration."
          },
          "LaunchConfigurationName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::AutoScaling::LaunchConfiguration",
            "description": "Specifies the name of the associated AWS::AutoScaling::LaunchConfiguration."
          },
          "LoadBalancerNames": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "description": "A list of load balancers associated with this auto scaling group."
          },
          "MaxSize": {
            "type": "String",
            "required": true,
            "description": "The maximum size of the auto scaling group."
          },
          "MetricsCollection": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Enables the monitoring of group metrics of an Auto Scaling group.",
            "properties": {
              "Granularity": {
                "type": "String",
                "required": true,
                "description": "The frequency at which Auto Scaling sends aggregated data to CloudWatch. For example, you can specify 1Minute to send aggregated data to CloudWatch every minute."
              },
              "Metrics": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The list of metrics to collect. If you don't specify any metrics, all metrics are enabled."
              }
            }
          },
          "MinSize": {
            "type": "String",
            "required": true,
            "description": "The minimum size of the auto scaling group."
          },
          "NotificationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "An embedded property that configures an auto scaling group to send notifications when specified events take place.",
            "properties": {
              "TopicARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::SNS::Topic",
                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic."
              },
              "NotificationTypes": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "allowed-values": [
                  "autoscaling:EC2_INSTANCE_LAUNCH",
                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                  "autoscaling:EC2_INSTANCE_TERMINATE",
                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                  "autoscaling:TEST_NOTIFICATION"
                ],
                "description": "The type of events that will trigger the notification."
              }
            }
          },
          "NotificationConfigurations": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An embedded property that configures an auto scaling group to send notifications when specified events take place.",
            "properties": {
              "TopicARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::SNS::Topic",
                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic."
              },
              "NotificationTypes": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "allowed-values": [
                  "autoscaling:EC2_INSTANCE_LAUNCH",
                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                  "autoscaling:EC2_INSTANCE_TERMINATE",
                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR",
                  "autoscaling:TEST_NOTIFICATION"
                ],
                "description": "The type of events that will trigger the notification."
              }
            }
          },
          "PlacementGroup": {
            "type": "String",
            "required": false,
            "description": "The name of an existing cluster placement group into which you want to launch your instances."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags you want to attach to this resource.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The key name of the tag."
              },
              "PropagateAtLaunch": {
                "type": "Boolean",
                "required": true,
                "description": "Set to true if you want AWS CloudFormation to copy the tag to EC2 instances that are launched as part of the auto scaling group. Set to false if you want the tag attached only to the auto scaling group and not copied to any instances launched as part of the auto scaling group."
              }
            }
          },
          "TargetGroupARNs": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "description": "A list of Amazon Resource Names (ARN) of target groups to associate with the Auto Scaling group."
          },
          "TerminationPolicies": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A termination policy or a list of termination policies that are used to select the instances to terminate. The policies are executed in the order that you list them."
          },
          "VPCZoneIdentifier": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "A list of subnet identifiers of Amazon Virtual Private Clouds (Amazon VPCs)."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::LaunchConfiguration": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AutoScaling::LaunchConfiguration type creates an Auto Scaling launch configuration that can be used by an Auto Scaling group to configure EC2 instances in the Auto Scaling group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AutoScaling::LaunchConfiguration type creates an Auto Scaling launch configuration that can be used by an Auto Scaling group to configure EC2 instances in the Auto Scaling group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AssociatePublicIpAddress": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Amazon EC2 instances in the Auto Scaling group receive public IP addresses. If you specify true, each instance in the Auto Scaling receives a unique public IP address."
          },
          "BlockDeviceMappings": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Specifies how block devices are exposed to the instance. You can specify virtual devices and EBS volumes.",
            "properties": {
              "DeviceName": {
                "type": "String",
                "required": true,
                "description": "The name of the device within Amazon EC2."
              },
              "Ebs": {
                "type": "Object",
                "required": false,
                "description": "The information for the Elastic Block Store volume. If you specify the Ebs property, do not specify the VirtualName property.",
                "properties": {
                  "DeleteOnTermination": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to delete the volume when the instance is terminated. By default, Auto Scaling uses true."
                  },
                  "Encrypted": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the volume is encrypted. Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption."
                  },
                  "Iops": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of I/O operations per second (IOPS) that the volume supports. The maximum ratio of IOPS to volume size is 30."
                  },
                  "SnapshotId": {
                    "type": "String",
                    "required": false,
                    "description": "The Snapshot ID of the volume to use.  If you specify SnapshotId, do not specify VolumeSize."
                  },
                  "VolumeSize": {
                    "type": "String",
                    "required": false,
                    "description": "The volume size, in GigiBytes.  If you specify VolumeSize, do not specify SnapshotId."
                  },
                  "VolumeType": {
                    "type": "String",
                    "required": false,
                    "description": "The volume type. By default, Auto Scaling uses the standard volume type."
                  }
                }
              },
              "NoDevice": {
                "type": "Boolean",
                "required": false,
                "description": "Suppresses the device mapping. If NoDevice is set to true for the root device, the instance might fail the Amazon EC2 health check. Auto Scaling launches a replacement instance if the instance fails the health check."
              },
              "VirtualName": {
                "type": "String",
                "required": false,
                "description": "The name of the virtual device. The name must be in the form ephemeralX where X is a number starting from 0, for example, ephemeral0. If you specify the VirtualName property, do not specify the Ebs property."
              }
            }
          },
          "EbsOptimized": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether the launch configuration is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. Additional fees are incurred when using EBS-optimized instances."
          },
          "ClassicLinkVPCId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": false,
            "description": "The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. You can specify this property only for EC2-Classic instances."
          },
          "ClassicLinkVPCSecurityGroups": {
            "array-type": "String",
            "type": "Array",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "The IDs of one or more security groups for the VPC that you specified in the ClassicLinkVPCId property."
          },
          "IamInstanceProfile": {
            "type": "String",
            "resource-ref-type": "AWS::IAM::InstanceProfile",
            "required": false,
            "description": "Provides the name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role."
          },
          "ImageId": {
            "type": "String",
            "required": false,
            "description": "Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration."
          },
          "InstanceId": {
            "type": "String",
            "required": false,
            "description": "The ID of the Amazon EC2 instance you want to use to create the launch configuration. Use this property if you want the launch configuration to use settings from an existing Amazon EC2 instance."
          },
          "InstanceMonitoring": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether or not instance monitoring should be enabled for this autoscaling group. This is enabled by default. To turn it off, set InstanceMonitoring to \"false\"."
          },
          "InstanceType": {
            "type": "String",
            "required": false,
            "description": "The instance type. For example, \"m1.small\".",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "KernelId": {
            "type": "String",
            "required": false,
            "description": "The kernel ID"
          },
          "KeyName": {
            "type": "String",
            "required": false,
            "description": "Provides the name of the EC2 key pair."
          },
          "PlacementTenancy": {
            "type": "String",
            "required": false,
            "description": "The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware and can only be launched in a VPC."
          },
          "RamdiskId": {
            "type": "String",
            "required": false,
            "description": "The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID."
          },
          "SecurityGroups": {
            "array-type": "String",
            "type": "Array",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "A list containing the EC2 security groups to assign to the Amazon EC2 instances in the Auto Scaling group. The list can contain the name of existing EC2 security groups, references to AWS::EC2::SecurityGroup resources created in the template, or both."
          },
          "SpotPrice": {
            "type": "String",
            "required": false,
            "description": "The spot price for this autoscaling group. If a spot price is set, then the autoscaling group will launch when the current spot price is less than the amount specified in the template."
          },
          "UserData": {
            "type": "String",
            "required": false,
            "description": "The user data available to the launched EC2 instances."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::LifecycleHook": {
    "type": "Object",
    "required": false,
    "description": "Use AWS::AutoScaling::LifecycleHook to control the state of an instance in an Auto Scaling group after it is launched or terminated.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use AWS::AutoScaling::LifecycleHook to control the state of an instance in an Auto Scaling group after it is launched or terminated."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name of the Auto Scaling group for the lifecycle hook."
          },
          "DefaultResult": {
            "type": "String",
            "required": false,
            "description": "The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs."
          },
          "HeartbeatTimeout": {
            "type": "Number",
            "required": false,
            "description": "The amount of time that can elapse before the lifecycle hook times out. When the lifecycle hook times out, Auto Scaling performs the action that you specified in the DefaultResult property."
          },
          "LifecycleHookName": {
            "type": "String",
            "required": false,
            "description": "The name of the lifecycle hook. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the lifecycle hook name."
          },
          "LifecycleTransition": {
            "type": "String",
            "required": true,
            "description": "The state of the Amazon EC2 instance to which you want to attach the lifecycle hook."
          },
          "NotificationMetadata": {
            "type": "String",
            "required": false,
            "description": "Additional information that you want to include when Auto Scaling sends a message to the notification target."
          },
          "NotificationTargetARN": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon resource name (ARN) of the notification target that Auto Scaling uses to notify you when an instance is in the transition state for the lifecycle hook."
          },
          "RoleARN": {
            "type": "String",
            "required": true,
            "description": "The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. The role requires permissions to Amazon SNS and Amazon SQS."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::ScalingPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AutoScaling::ScalingPolicy resource adds a scaling policy to an auto scaling group. A scaling policy specifies whether to scale the auto scaling group up or down, and by how much.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AutoScaling::ScalingPolicy resource adds a scaling policy to an auto scaling group. A scaling policy specifies whether to scale the auto scaling group up or down, and by how much."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AdjustmentType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "ChangeInCapacity",
              "ExactCapacity",
              "PercentChangeInCapacity"
            ],
            "description": "Specifies whether the ScalingAdjustment is an absolute number or a percentage of the current capacity."
          },
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name or Amazon Resource Name (ARN) of the Auto Scaling Group that you want to attach the policy to."
          },
          "Cooldown": {
            "type": "String",
            "required": false,
            "description": "The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start."
          },
          "EstimatedInstanceWarmup": {
            "type": "Number",
            "required": false,
            "description": "The estimated time, in seconds, until a newly launched instance can send metrics to CloudWatch."
          },
          "MetricAggregationType": {
            "type": "String",
            "required": false,
            "description": "The aggregation type for the CloudWatch metrics.",
            "allowed-values": [
              "Minimum",
              "Maximum",
              "Average"
            ]
          },
          "MinAdjustmentMagnitude": {
            "type": "Number",
            "required": false,
            "description": "For the PercentChangeInCapacity adjustment type, the minimum number of instances to scale."
          },
          "MinAdjustmentStep": {
            "type": "Number",
            "required": false,
            "description": "The minimum number of instances that are added or removed when the Auto Scaling group scales up or down. You can use this property only when you specify PercentChangeInCapacity for the AdjustmentType property."
          },
          "PolicyType": {
            "type": "String",
            "required": false,
            "description": "An Auto Scaling policy type. You can specify SimpleScaling or StepScaling. By default, AWS CloudFormation specifies SimpleScaling.",
            "allowed-values": [
              "SimpleScaling",
              "StepScaling"
            ]
          },
          "ScalingAdjustment": {
            "type": "Number",
            "required": false,
            "description": "The number of instances by which to scale. AdjustmentType determines the interpretation of this number (e.g., as an absolute number or as a percentage of the existing Auto Scaling group size). A positive increment adds to the current capacity and a negative value removes from the current capacity."
          },
          "StepAdjustments": {
            "type": "Object",
            "required": false,
            "description": "A set of adjustments that enable you to scale based on the size of the alarm breach.",
            "properties": {
              "MetricIntervalLowerBound": {
                "type": "Number",
                "required": false,
                "description": "The lower bound for the difference between the breach threshold and the CloudWatch metric."
              },
              "MetricIntervalUpperBound": {
                "type": "Number",
                "required": false,
                "description": "The upper bound for the difference between the breach threshold and the CloudWatch metric."
              },
              "ScalingAdjustment": {
                "type": "Number",
                "required": true,
                "description": "The amount by which to scale, based on the value that you specified in the AdjustmentType property. "
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::ScheduledAction": {
    "type": "Object",
    "required": false,
    "description": "The AWS::AutoScaling::AutoScalingGroup type creates an Auto Scaling group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::AutoScaling::AutoScalingGroup type creates an Auto Scaling group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name or ARN of the Auto Scaling group."
          },
          "DesiredCapacity": {
            "type": "String",
            "required": false,
            "description": "The number of Amazon EC2 instances that should be running in the Auto Scaling group."
          },
          "EndTime": {
            "type": "String",
            "required": false,
            "description": "The time in UTC for this schedule to end. For example, 2010-06-01T00:00:00Z."
          },
          "MaxSize": {
            "type": "Number",
            "required": false,
            "description": "The maximum number of Amazon EC2 instances in the Auto Scaling group."
          },
          "MinSize": {
            "type": "Number",
            "required": false,
            "description": "The minimum number of Amazon EC2 instances in the Auto Scaling group."
          },
          "Recurrence": {
            "type": "String",
            "required": false,
            "description": "The time when recurring future actions will start. You specify the start time by following the Unix cron syntax format."
          },
          "StartTime": {
            "type": "String",
            "required": false,
            "description": "The time in UTC for this schedule to start. For example, 2010-06-01T00:00:00Z."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::AutoScaling::Trigger": {
    "type": "Object",
    "required": false,
    "description": "Creates an Auto Scaling trigger that determines when scaling activities should occur for the Auto Scaling group. This type does not support updates.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Auto Scaling trigger that determines when scaling activities should occur for the Auto Scaling group. This type does not support updates."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoScalingGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "The name of the Auto Scaling group."
          },
          "BreachDuration": {
            "type": "String",
            "required": true,
            "description": "The amount of time to wait while the trigger is firing before performing scaling activities in response to the breach."
          },
          "Dimensions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of CloudWatch dimensions used to retrieve metric statistics that the trigger uses to determine when to fire.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "Name of the dimension."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value representing the dimension measurement."
              }
            }
          },
          "LowerBreachScaleIncrement": {
            "type": "String",
            "required": false,
            "description": "The incremental amount to use when performing scaling activities when the lower threshold has been breached."
          },
          "LowerThreshold": {
            "type": "String",
            "required": true,
            "description": "The lower limit for the metric. The trigger fires if all data points in the last BreachDuration seconds exceed the upper threshold or fall below the lower threshold."
          },
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "The metric name used by the trigger to determine when to fire."
          },
          "Namespace": {
            "type": "String",
            "required": false,
            "description": "The namespace used by the trigger to determine when to fire."
          },
          "Period": {
            "type": "String",
            "required": false,
            "description": "The period used in retrieving metric statistics used by the trigger to determine when to fire."
          },
          "Statistic": {
            "type": "String",
            "required": false,
            "description": "The statistic used by the trigger to determine which metric statistics to examine."
          },
          "Unit": {
            "type": "String",
            "required": false,
            "description": "The standard unit associated with a measure, used by the trigger when fetching the metric statistics it uses to determine when to activate."
          },
          "UpperBreachScaleIncrement": {
            "type": "String",
            "required": false,
            "description": "The incremental amount to use when performing scaling activities when the upper threshold has been breached. Must be a negative or positive integer, or integer percentage value."
          },
          "UpperThreshold": {
            "type": "String",
            "required": false,
            "description": "The upper limit of the metric used. The trigger fires if all data points in the last BreachDuration seconds exceed the upper threshold or fall below the lower threshold."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CertificateManager::Certificate": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CertificateManager::Certificate resource requests an AWS Certificate Manager (ACM) certificate that you can use with AWS services to enable secure connections.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CertificateManager::Certificate resource requests an AWS Certificate Manager (ACM) certificate that you can use with AWS services to enable secure connections."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DomainName": {
            "type": "String",
            "required": true,
            "description": "Fully qualified domain name (FQDN), such as www.example.com, of the site that you want to secure with the ACM certificate."
          },
          "DomainValidationOptions": {
            "type": "Object",
            "required": false,
            "description": "Domain information that domain name registrars use to verify your identity.",
            "properties": {
              "DomainName": {
                "type": "String",
                "required": true,
                "description": "Fully Qualified Domain Name (FQDN) of the Certificate that you are requesting."
              },
              "ValidationDomain": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "FQDNs to be included in the Subject Alternative Name extension of the ACM certificate."
              }
            }
          },
          "SubjectAlternativeNames": {
            "type": "String",
            "required": true,
            "description": "Fully qualified domain name (FQDN), such as www.example.com, of the site that you want to secure with the ACM certificate."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFormation::CustomResource": {
    "type": "Object",
    "required": false,
    "description": "Custom resources are special AWS CloudFormation resources that provide a way for a template developer to include resources in an AWS CloudFormation stack that are provided by a source other than Amazon Web Services. The custom resource provider can be either a template developer or a separate third-party resource provider.",
    "return-values": [
      {
        "name": "*",
        "description": "Custom return parameter."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Custom resources are special AWS CloudFormation resources that provide a way for a template developer to include resources in an AWS CloudFormation stack that are provided by a source other than Amazon Web Services. The custom resource provider can be either a template developer or a separate third-party resource provider."
      },
      "Properties": {
        "type": "Json",
        "required": false,
        "description": "Custom resources are special AWS CloudFormation resources that provide a way for a template developer to include resources in an AWS CloudFormation stack that are provided by a source other than Amazon Web Services. The custom resource provider can be either a template developer or a separate third-party resource provider."
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFormation::Stack": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudFormation::Stack type embeds a stack as a resource in a template.",
    "return-values": [
      {
        "name": "*",
        "description": "The output value from the specified embedded stack where EmbeddedStackOutputName is the name of the output value."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudFormation::Stack type embeds a stack as a resource in a template."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "TemplateURL": {
            "type": "String",
            "required": true,
            "description": "The URL of a template that specifies the stack that you want to create as a resource."
          },
          "TimeoutInMinutes": {
            "type": "String",
            "required": false,
            "description": "The length of time, in minutes, that AWS CloudFormation waits for the embedded stack to reach the CREATE_COMPLETE state. "
          },
          "Parameters": {
            "type": "Json",
            "required": false,
            "description": "The set of parameters passed to AWS CloudFormation when this embedded stack is created."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFormation::WaitCondition": {
    "type": "Object",
    "required": false,
    "description": "The following properties are available with the AWS::CloudFormation::WaitCondition type.",
    "return-values": [
      {
        "name": "Data",
        "description": "A JSON object containing the UniqueId and Data values from the wait condition signal(s) for the specified wait condition."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The following properties are available with the AWS::CloudFormation::WaitCondition type."
      },
      "CreationPolicy": {
        "type": "Object",
        "required": false,
        "description": "The CreationPolicy prevents the resource's status from reaching create complete until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded.",
        "properties": {
          "ResourceSignal": {
            "type": "Object",
            "required": true,
            "description": "Signal configuration.",
            "properties": {
              "Count": {
                "type": "Number",
                "required": false,
                "description": "The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE."
              },
              "Timeout": {
                "type": "String",
                "required": false,
                "description": "The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property. The value must be in ISO8601 duration format, in the form: PT#H#M#S, where each # is the number of hours, minutes, and seconds, respectively. Default: PT5M (5 minutes)"
              }
            }
          }
        }
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Handle": {
            "type": "Reference",
            "resource-ref-type": "AWS::CloudFormation::WaitConditionHandle",
            "required": true,
            "description": "A reference to the wait condition handle used to signal this wait condition."
          },
          "Timeout": {
            "type": "String",
            "required": true,
            "description": "The length of time (in seconds) to wait for the number of signals that the Count property specifies."
          },
          "Count": {
            "type": "String",
            "required": true,
            "description": "The number of success signals that AWS CloudFormation must receive before it continues the stack creation process."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFormation::WaitConditionHandle": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudFormation::WaitConditionHandle type has no properties.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudFormation::WaitConditionHandle type has no properties."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {}
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudFront::Distribution": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon CloudFront download distribution.",
    "return-values": [
      {
        "name": "DomainName",
        "description": "The domain name of the resource. For example: d2fadu0nynjpfn.cloudfront.net."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon CloudFront download distribution."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DistributionConfig": {
            "type": "Object",
            "required": true,
            "description": "The distribution's configuration information.",
            "properties": {
              "Aliases": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "CNAMEs (alternate domain names), if any, for the distribution."
              },
              "CacheBehaviors": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "properties": {
                  "AllowedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "allowed-values": [
                      "HEAD",
                      "GET",
                      "OPTIONS",
                      "DELETE",
                      "PATCH",
                      "POST",
                      "PUT",
                      "*"
                    ],
                    "description": "HTTP methods that CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. You can specify [\"HEAD\", \"GET\"] or [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]."
                  },
                  "CachedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "allowed-values": [
                      "HEAD",
                      "GET",
                      "OPTIONS",
                      "*"
                    ],
                    "description": "HTTP methods for which CloudFront caches responses."
                  },
                  "ForwardedValues": {
                    "type": "Object",
                    "required": true,
                    "description": "Specifies how CloudFront handles query strings.",
                    "properties": {
                      "Cookies": {
                        "type": "Object",
                        "required": false,
                        "description": "ForwardedValues is a property of the DefaultCacheBehavior and CacheBehavior properties that indicates whether Amazon CloudFront forwards query strings or cookies.",
                        "properties": {
                          "Forward": {
                            "type": "String",
                            "required": true,
                            "allowed-values": [
                              "none",
                              "all",
                              "whitelist"
                            ],
                            "description": "The cookies to forward to the origin of the cache behavior. You can specify none, all, or whitelist."
                          },
                          "WhitelistedNames": {
                            "type": "Array",
                            "array-type": "String",
                            "required": false,
                            "description": "The names of cookies to forward to the origin for the cache behavior."
                          }
                        }
                      },
                      "Headers": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "Specifies the headers that you want Amazon CloudFront to forward to the origin for this cache behavior."
                      },
                      "QueryString": {
                        "type": "Boolean",
                        "required": true,
                        "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior. If so, specify true; if not, specify false."
                      }
                    }
                  },
                  "MinTTL": {
                    "type": "String",
                    "required": false,
                    "description": "The minimum amount of time that you want objects to stay in the cache before CloudFront queries your origin to see whether the object has been updated."
                  },
                  "PathPattern": {
                    "type": "String",
                    "required": true,
                    "description": "The pattern for which you want this cache behavior to apply (ex. \"images/*.jpg\"). When CloudFront receives an end-user request, the requested path is compared with path patterns in the order in which cache behaviors are listed in the stack specification for the distribution."
                  },
                  "SmoothStreaming": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to distribute media files in the Microsoft Smooth Streaming format by using the origin that is associated with this cache behavior. If you specify true, you can still use this cache behavior to distribute other content if the content matches the PathPattern value."
                  },
                  "TargetOriginId": {
                    "type": "String",
                    "required": true,
                    "description": "The value of ID for the origin that you want CloudFront to route requests to when the default cache behavior is applicable to a request."
                  },
                  "TrustedSigners": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of AWS accounts that you want to allow to create signed URLs for private content."
                  },
                  "ViewerProtocolPolicy": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "allow-all",
                      "https-only",
                      "redirect-to-https",
                      "*"
                    ],
                    "description": "Specifies the protocol that users can use to access the files in the origin specified by TargetOriginId when the default cache behavior is applicable to a request."
                  }
                }
              },
              "Comment": {
                "type": "String",
                "required": false,
                "description": "Any comments you want to include about the distribution."
              },
              "CustomErrorResponses": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Whether CloudFront replaces HTTP status codes in the 4xx and 5xx range with custom error messages before returning the response to the viewer.",
                "properties": {
                  "ErrorCachingMinTTL": {
                    "type": "Number",
                    "required": false,
                    "description": "The minimum amount of time, in seconds, that Amazon CloudFront caches the HTTP status code that you specified in the ErrorCode property. The default value is 300."
                  },
                  "ErrorCode": {
                    "type": "Number",
                    "required": true,
                    "description": "An HTTP status code for which you want to specify a custom error page. You can specify 400, 403, 404, 405, 414, 500, 501, 502, 503, or 504."
                  },
                  "ResponseCode": {
                    "type": "Number",
                    "required": false,
                    "description": "The HTTP status code that CloudFront returns to viewer along with the custom error page. You can specify 200, 400, 403, 404, 405, 414, 500, 501, 502, 503, or 504."
                  },
                  "ResponsePagePath": {
                    "type": "String",
                    "required": false,
                    "description": "The path to the custom error page that CloudFront returns to a viewer when your origin returns the HTTP status code that you specified in the ErrorCode property. For example, you can specify /404-errors/403-forbidden.html."
                  }
                }
              },
              "DefaultCacheBehavior": {
                "type": "Object",
                "required": true,
                "description": "The default cache behavior that is triggered if you do not specify a CacheBehavior element, or if files don't match any of the values of PathPattern in CacheBehavior elements.",
                "properties": {
                  "AllowedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "allowed-values": [
                      "HEAD",
                      "GET",
                      "OPTIONS",
                      "DELETE",
                      "PATCH",
                      "POST",
                      "PUT",
                      "*"
                    ],
                    "description": "HTTP methods that CloudFront processes and forwards to your Amazon S3 bucket or your custom origin. You can specify [\"HEAD\", \"GET\"] or [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]."
                  },
                  "CachedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "allowed-values": [
                      "HEAD",
                      "GET",
                      "OPTIONS",
                      "*"
                    ],
                    "description": "HTTP methods for which CloudFront caches responses."
                  },
                  "ForwardedValues": {
                    "type": "Object",
                    "required": true,
                    "description": "Specifies how CloudFront handles query strings.",
                    "properties": {
                      "Cookies": {
                        "type": "Object",
                        "required": false,
                        "description": "ForwardedValues is a property of the DefaultCacheBehavior and CacheBehavior properties that indicates whether Amazon CloudFront forwards query strings or cookies.",
                        "properties": {
                          "Forward": {
                            "type": "String",
                            "required": true,
                            "allowed-values": [
                              "none",
                              "all",
                              "whitelist"
                            ],
                            "description": "The cookies to forward to the origin of the cache behavior. You can specify none, all, or whitelist."
                          },
                          "WhitelistedNames": {
                            "type": "Array",
                            "array-type": "String",
                            "required": false,
                            "description": "The names of cookies to forward to the origin for the cache behavior."
                          }
                        }
                      },
                      "Headers": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "Specifies the headers that you want Amazon CloudFront to forward to the origin for this cache behavior."
                      },
                      "QueryString": {
                        "type": "Boolean",
                        "required": true,
                        "description": "Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior. If so, specify true; if not, specify false."
                      },
                      "QueryStringCacheKeys": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "If you forward query strings to the origin, specifies the query string parameters that CloudFront uses to determine which content to cache."
                      }
                    }
                  },
                  "MinTTL": {
                    "type": "String",
                    "required": false,
                    "description": "The minimum amount of time that you want objects to stay in the cache before CloudFront queries your origin to see whether the object has been updated."
                  },
                  "SmoothStreaming": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to distribute media files in the Microsoft Smooth Streaming format by using the origin that is associated with this cache behavior. If you specify true, you can still use this cache behavior to distribute other content if the content matches the PathPattern value."
                  },
                  "TargetOriginId": {
                    "type": "String",
                    "required": true,
                    "description": "The value of ID for the origin that you want CloudFront to route requests to when the default cache behavior is applicable to a request."
                  },
                  "TrustedSigners": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "A list of AWS accounts that you want to allow to create signed URLs for private content."
                  },
                  "ViewerProtocolPolicy": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "allow-all",
                      "https-only",
                      "redirect-to-https",
                      "*"
                    ],
                    "description": "Specifies the protocol that users can use to access the files in the origin specified by TargetOriginId when the default cache behavior is applicable to a request."
                  }
                }
              },
              "DefaultRootObject": {
                "type": "String",
                "required": false,
                "description": "The object (ex. \"index.html\") that you want CloudFront to request from your origin when the root URL for your distribution (ex. \"http://example.com/\") is requested."
              },
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Controls whether the distribution is enabled to accept end user requests for content."
              },
              "HttpVersion": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "http1.1",
                  "http2",
                  "*"
                ],
                "description": "The latest HTTP version that viewers can use to communicate with CloudFront."
              },
              "Logging": {
                "type": "Object",
                "required": false,
                "description": "Controls whether access logs are written for the distribution. To turn on access logs, include this property.",
                "properties": {
                  "Bucket": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The Amazon S3 bucket to store the access logs in."
                  },
                  "IncludeCookies": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudFront includes cookies in access logs."
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "An optional string that, if defined, will be used as a prefix for the access log file names for this distribution."
                  }
                }
              },
              "Origins": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A list of origins for this CloudFront distribution. For each origin, you can specify whether it is an S3 or custom origin.",
                "properties": {
                  "CustomOriginConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "Origin information to specify a custom origin. Required: Conditional. You cannot use CustomOrigin and S3 Origin in the same distribution, but you must specify one or the other.",
                    "properties": {
                      "HTTPPort": {
                        "type": "String",
                        "required": false,
                        "description": "The HTTP port the custom origin listens on."
                      },
                      "HTTPSPort": {
                        "type": "String",
                        "required": false,
                        "description": "The HTTPS port the custom origin listens on."
                      },
                      "OriginProtocolPolicy": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "http-only",
                          "match-viewer",
                          "*"
                        ],
                        "description": "The origin protocol policy to apply to your origin."
                      },
                      "OriginSSLProtocols": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The SSL protocols that CloudFront can use when establishing an HTTPS connection with your origin. By default, AWS CloudFormation specifies the TLSv1 and SSLv3 protocols."
                      }
                    }
                  },
                  "DomainName": {
                    "type": "String",
                    "required": true,
                    "description": "The DNS name of the Amazon S3 bucket or the HTTP server from which you want CloudFront to get objects for this origin."
                  },
                  "Id": {
                    "type": "String",
                    "required": true,
                    "description": "An identifier for the origin. The value of Id must be unique within the distribution."
                  },
                  "OriginCustomHeaders": {
                    "type": "Object",
                    "required": false,
                    "description": "Custom headers that CloudFront includes when it forwards a request to your origin.",
                    "properties": {
                      "HeaderName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of a header that CloudFront forwards to your origin."
                      },
                      "HeaderValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value for the header that you specified in the HeaderName property."
                      }
                    }
                  },
                  "OriginPath": {
                    "type": "String",
                    "required": true,
                    "description": "The path that CloudFront uses to request content from an S3 bucket or custom origin."
                  },
                  "S3OriginConfig": {
                    "type": "Object",
                    "required": false,
                    "description": "Origin information to specify an Amazon S3 origin. Required: Conditional. You cannot use S3Origin and CustomOrigin in the same distribution, but you must specify one or the other.",
                    "properties": {
                      "OriginAccessIdentity": {
                        "type": "String",
                        "required": false,
                        "description": "The CloudFront origin access identity to associate with the origin. This is used to configure the origin so that end users can only access objects in an Amazon S3 bucket through CloudFront."
                      }
                    }
                  }
                }
              },
              "PriceClass": {
                "type": "String",
                "required": false,
                "description": "The price class that corresponds with the maximum price that you want to pay for the CloudFront service."
              },
              "Restrictions": {
                "type": "Object",
                "required": false,
                "description": "Specifies restrictions on who or how viewers can access your content.",
                "properties": {
                  "GeoRestriction": {
                    "type": "Object",
                    "required": false,
                    "description": "The countries in which viewers are able to access your content.",
                    "properties": {
                      "Locations": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "description": "The two-letter, uppercase country code for a country that you want to include in your blacklist or whitelist."
                      },
                      "RestrictionType": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "blacklist",
                          "whitelist",
                          "none"
                        ],
                        "description": "The method to restrict distribution of your content."
                      }
                    }
                  }
                }
              },
              "ViewerCertificate": {
                "type": "Object",
                "required": false,
                "description": "The certificate to use when viewers use HTTPS to request objects.",
                "properties": {
                  "AcmCertificateArn": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::CertificateManager::Certificate",
                    "description": "If you're using an alternate domain name, the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate."
                  },
                  "CloudFrontDefaultCertificate": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to use the default certificate for your CloudFront domain name when viewers use HTTPS to request your content."
                  },
                  "IamCertificateId": {
                    "type": "String",
                    "required": false,
                    "description": "The IAM certificate ID to use if you're using an alternate domain name."
                  },
                  "MinimumProtocolVersion": {
                    "type": "String",
                    "required": false,
                    "description": "The minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections."
                  },
                  "SslSupportMethod": {
                    "type": "String",
                    "required": false,
                    "description": "Specifies how CloudFront serves HTTPS requests."
                  }
                }
              },
              "WebACLId": {
                "type": "String",
                "required": false,
                "description": "The AWS WAF web ACL to associate with this distribution."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudTrail::Trail": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudTrail::Trail resource creates a trail and specifies where logs are published.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudTrail::Trail resource creates a trail and specifies where logs are published."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CloudWatchLogsLogGroupArn": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of a log group to which CloudTrail logs will be delivered."
          },
          "CloudWatchLogsRoleArn": {
            "type": "String",
            "required": false,
            "description": "The role ARN that Amazon CloudWatch Logs (CloudWatch Logs) assumes to write logs to a log group."
          },
          "EnableLogFileValidation": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether CloudTrail validates the integrity of log files. When you disable log file integrity validation, CloudTrail stops creating digest files."
          },
          "IncludeGlobalServiceEvents": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the trail is publishing events from global services, such as IAM, to the log files."
          },
          "IsLogging": {
            "type": "Boolean",
            "required": true,
            "description": "Indicates whether the CloudTrail trail is currently logging AWS API calls."
          },
          "IsMultiRegionTrail": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the CloudTrail trail is created in the region in which you create the stack (false) or in all regions (true)."
          },
          "KMSKeyId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The AWS Key Management Service (AWS KMS) key ID that you want to use to encrypt CloudTrail logs."
          },
          "S3BucketName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::S3::Bucket",
            "description": "The name of the Amazon S3 bucket where CloudTrail publishes log files."
          },
          "S3KeyPrefix": {
            "type": "String",
            "required": false,
            "description": "An Amazon S3 object key prefix that precedes the name of all log files."
          },
          "SnsTopicName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The name of an Amazon SNS topic that is notified when new log files are published."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CloudWatch::Alarm": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CloudWatch::Alarm type creates an Amazon CloudWatch alarm.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CloudWatch::Alarm type creates an Amazon CloudWatch alarm."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ActionsEnabled": {
            "type": "String",
            "required": false,
            "description": "Indicates whether or not actions should be executed during any changes to the alarm's state. Either true or false."
          },
          "AlarmActions": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": [
              "AWS::SNS::Topic",
              "AWS::AutoScaling::ScalingPolicy"
            ],
            "required": false,
            "description": "The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy."
          },
          "AlarmDescription": {
            "type": "String",
            "required": false,
            "description": "The description for the alarm."
          },
          "AlarmName": {
            "type": "String",
            "required": false,
            "description": "A name for the alarm. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the alarm name."
          },
          "ComparisonOperator": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "GreaterThanOrEqualToThreshold",
              "GreaterThanThreshold",
              "LessThanThreshold",
              "LessThanOrEqualToThreshold"
            ],
            "description": "The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand."
          },
          "Dimensions": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The dimensions for the alarm's associated metric.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "Name of the dimension."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The value representing the dimension measurement."
              }
            }
          },
          "EvaluationPeriods": {
            "type": "String",
            "required": true,
            "description": "The number of periods over which data is compared to the specified threshold."
          },
          "InsufficientDataActions": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": [
              "AWS::SNS::Topic",
              "AWS::AutoScaling::ScalingPolicy"
            ],
            "required": false,
            "description": "The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy."
          },
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "The name for the alarm's associated metric."
          },
          "Namespace": {
            "type": "String",
            "required": true,
            "description": "The namespace for the alarm's associated metric."
          },
          "OKActions": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": [
              "AWS::SNS::Topic",
              "AWS::AutoScaling::ScalingPolicy"
            ],
            "required": false,
            "description": "The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Number (ARN). Currently the only action supported is publishing to an Amazon SNS topic or an Amazon Auto Scaling policy."
          },
          "Period": {
            "type": "String",
            "required": true,
            "description": "The period in seconds over which the specified statistic is applied."
          },
          "Statistic": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "SampleCount",
              "Average",
              "Sum",
              "Minimum",
              "Maximum"
            ],
            "description": "The statistic to apply to the alarm's associated metric."
          },
          "Threshold": {
            "type": "String",
            "required": true,
            "description": "The value against which the specified statistic is compared."
          },
          "Unit": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "Seconds",
              "Microseconds",
              "Milliseconds",
              "Bytes",
              "Kilobytes",
              "Megabytes",
              "Gigabytes",
              "Terabytes",
              "Bits",
              "Kilobits",
              "Megabits",
              "Gigabits",
              "Terabits",
              "Percent",
              "Count",
              "Bytes/Second",
              "Kilobytes/Second",
              "Megabytes/Second",
              "Gigabytes/Second",
              "Terabytes/Second",
              "Bits/Second",
              "Kilobits/Second",
              "Megabits/Second",
              "Gigabits/Second",
              "Terabits/Second",
              "Count/Second",
              "None"
            ],
            "description": "The unit for the alarm's associated metric."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodeCommit::Repository": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodeCommit::Repository resource creates an AWS CodeCommit repository that is hosted by Amazon Web Services.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodeCommit::Repository resource creates an AWS CodeCommit repository that is hosted by Amazon Web Services."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RepositoryDescription": {
            "type": "String",
            "required": false,
            "description": "A description about the AWS CodeCommit repository."
          },
          "RepositoryName": {
            "type": "String",
            "required": false,
            "description": "A name for the AWS CodeCommit repository."
          },
          "Triggers": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Defines the actions to take in response to events that occur in the repository.",
            "properties": {
              "Branches": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The names of the branches in the AWS CodeCommit repository that contain events that you want to include in the trigger."
              },
              "CustomData": {
                "type": "String",
                "required": false,
                "description": "When an event is triggered, additional information that AWS CodeCommit includes when it sends information to the target."
              },
              "DestinationArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": [
                  "AWS::Lambda::Function",
                  "AWS::SNS::Topic"
                ],
                "description": "The Amazon Resource Name (ARN) of the resource that is the target for this trigger. "
              },
              "Events": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "all",
                  "updateReference",
                  "createReference",
                  "deleteReference"
                ],
                "description": "The repository events for which AWS CodeCommit sends information to the target, which you specified in the DestinationArn property."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "A name for the trigger."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodeDeploy::Application": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodeDeploy::Application resource creates an AWS CodeDeploy application.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodeDeploy::Application resource creates an AWS CodeDeploy application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": false,
            "description": "A name for the application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodeDeploy::DeploymentConfig": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodeDeploy::DeploymentConfig resource creates a set of deployment rules, deployment success conditions, and deployment failure conditions that AWS CodeDeploy uses during a deployment.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodeDeploy::DeploymentConfig resource creates a set of deployment rules, deployment success conditions, and deployment failure conditions that AWS CodeDeploy uses during a deployment."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DeploymentConfigName": {
            "type": "String",
            "required": false,
            "description": "A name for the deployment configuration. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the deployment configuration name."
          },
          "MinimumHealthyHosts": {
            "type": "Object",
            "required": true,
            "description": "The minimum number of healthy instances that must be available at any time during an AWS CodeDeploy deployment.",
            "properties": {
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of count to use, such as an absolute value or a percentage of the total number of instances in the deployment."
              },
              "Value": {
                "type": "Number",
                "required": false,
                "description": "The minimum number of healthy instances."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodeDeploy::DeploymentGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodeDeploy::DeploymentGroup resource creates an AWS CodeDeploy deployment group that details which application revision to use and which instances your application revisions are deployed to.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodeDeploy::DeploymentGroup resource creates an AWS CodeDeploy deployment group that details which application revision to use and which instances your application revisions are deployed to."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::CodeDeploy::Application",
            "description": "The name of an AWS CodeDeploy application for this deployment group."
          },
          "AutoScalingGroups": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::AutoScaling::AutoScalingGroup",
            "description": "A list of associated Auto Scaling groups that AWS CodeDeploy automatically deploys revisions to when new instances are created."
          },
          "Deployment": {
            "type": "Object",
            "required": false,
            "description": "The application revision that will be deployed to this deployment group.",
            "properties": {
              "Description": {
                "type": "String",
                "required": false,
                "description": "A description about this deployment."
              },
              "IgnoreApplicationStopFailures": {
                "type": "Boolean",
                "required": false,
                "description": "Whether to continue the deployment if the ApplicationStop deployment lifecycle event fails."
              },
              "Revision": {
                "type": "Object",
                "required": true,
                "description": "The location of the application revision to deploy.",
                "properties": {
                  "GitHubLocation": {
                    "type": "Object",
                    "required": false,
                    "description": "If your application revision is stored in GitHub, information about the location where it is stored.",
                    "properties": {
                      "CommitId": {
                        "type": "String",
                        "required": true,
                        "description": "The SHA1 commit ID of the GitHub commit to use as your application revision."
                      },
                      "Repository": {
                        "type": "String",
                        "required": true,
                        "description": "The GitHub account and repository name that includes the application revision. Specify the value as account/repository_name."
                      }
                    }
                  },
                  "RevisionType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "S3",
                      "GitHub",
                      "*"
                    ],
                    "description": "The application revision's location, such as in an S3 bucket or GitHub repository."
                  },
                  "S3Location": {
                    "type": "Object",
                    "required": false,
                    "description": "Information about the location of application artifacts that are stored in Amazon S3.",
                    "properties": {
                      "Bucket": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::S3::Bucket",
                        "description": "The name of the Amazon S3 bucket where the application revision is stored."
                      },
                      "BundleType": {
                        "type": "String",
                        "required": false,
                        "allowed-values": [
                          "tar",
                          "tgz",
                          "zip",
                          "*"
                        ],
                        "description": "The file type of the application revision."
                      },
                      "ETag": {
                        "type": "String",
                        "required": false,
                        "description": "The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision."
                      },
                      "Key": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the Amazon S3 object that represents the bundled artifacts for the application revision."
                      },
                      "Version": {
                        "type": "String",
                        "required": false,
                        "description": "A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision."
                      }
                    }
                  }
                }
              }
            }
          },
          "DeploymentConfigName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::CodeDeploy::DeploymentConfig",
            "description": "A deployment configuration name or a predefined configuration name."
          },
          "DeploymentGroupName": {
            "type": "String",
            "required": false,
            "description": "A name for the deployment group. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the deployment group name."
          },
          "Ec2TagFilters": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The Amazon EC2 tags to filter on. AWS CodeDeploy includes all instances that match the tag filter with this deployment group.",
            "properties": {
              "Key": {
                "type": "String",
                "required": false,
                "description": "Filter instances with this key."
              },
              "Type": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "KEY_ONLY",
                  "VALUE_ONLY",
                  "KEY_AND_VALUE"
                ],
                "description": "The filter type. For example, you can filter instances by the key, tag value, or both."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "Filter instances with this tag value."
              }
            }
          },
          "OnPremisesInstanceTagFilters": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The on-premises instance tags to filter on.",
            "properties": {
              "Key": {
                "type": "String",
                "required": false,
                "description": "Filter on-premises instances with this key."
              },
              "Type": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "KEY_ONLY",
                  "VALUE_ONLY",
                  "KEY_AND_VALUE"
                ],
                "description": "The filter type. For example, you can filter on-premises instances by the key, tag value, or both."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "Filter on-premises instances with this tag value."
              }
            }
          },
          "ServiceRoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "A service role Amazon Resource Name (ARN) that grants AWS CodeDeploy permission to make calls to AWS services on your behalf."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodePipeline::CustomActionType": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodePipeline::CustomActionType resource creates a custom action for activities that aren't included in the AWS CodePipeline default actions, such as running an internally developed build process or a test suite.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodePipeline::CustomActionType resource creates a custom action for activities that aren't included in the AWS CodePipeline default actions, such as running an internally developed build process or a test suite."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Category": {
            "type": "String",
            "required": true,
            "description": "The category of the custom action, such as a source action or a build action."
          },
          "ConfigurationProperties": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The configuration properties for the custom action.",
            "properties": {
              "Description": {
                "type": "String",
                "required": false,
                "description": "A description of this configuration property that will be displayed to users."
              },
              "Key": {
                "type": "Boolean",
                "required": true,
                "description": "Indicates whether the configuration property is a key."
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "A name for this configuration property."
              },
              "Queryable": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the configuration property will be used with the PollForJobs call."
              },
              "Required": {
                "type": "Boolean",
                "required": true,
                "description": ""
              },
              "Secret": {
                "type": "Boolean",
                "required": true,
                "description": "Indicates whether the configuration property is secret."
              },
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of the configuration property, such as String, Number, or Boolean.",
                "allowed-values": [
                  "*",
                  "String",
                  "Number",
                  "Boolean"
                ]
              }
            }
          },
          "InputArtifactDetails": {
            "type": "Object",
            "required": true,
            "description": "The input artifact details for this custom action.",
            "properties": {
              "MaximumCount": {
                "type": "Number",
                "required": true,
                "description": "The maximum number of artifacts allowed for the action type."
              },
              "MinimumCount": {
                "type": "Number",
                "required": true,
                "description": "The minimum number of artifacts allowed for the action type."
              }
            }
          },
          "OutputArtifactDetails": {
            "type": "Object",
            "required": true,
            "description": "The output artifact details for this custom action.",
            "properties": {
              "MaximumCount": {
                "type": "Number",
                "required": true,
                "description": "The maximum number of artifacts allowed for the action type."
              },
              "MinimumCount": {
                "type": "Number",
                "required": true,
                "description": "The minimum number of artifacts allowed for the action type."
              }
            }
          },
          "Provider": {
            "type": "String",
            "required": true,
            "description": "The name of the service provider that AWS CodePipeline uses for this custom action."
          },
          "Settings": {
            "type": "Object",
            "required": false,
            "description": "URLs that provide users information about this custom action.",
            "properties": {
              "EntityUrlTemplate": {
                "type": "String",
                "required": false,
                "description": "The URL that is returned to the AWS CodePipeline console that links to the resources of the external system, such as the configuration page for an AWS CodeDeploy deployment group."
              },
              "ExecutionUrlTemplate": {
                "type": "String",
                "required": false,
                "description": "The URL that is returned to the AWS CodePipeline console that links to the top-level landing page for the external system, such as the console page for AWS CodeDeploy."
              },
              "RevisionUrlTemplate": {
                "type": "String",
                "required": false,
                "description": "The URL that is returned to the AWS CodePipeline console that links to the page where customers can update or change the configuration of the external action."
              },
              "ThirdPartyConfigurationUrl": {
                "type": "String",
                "required": false,
                "description": "The URL of a sign-up page where users can sign up for an external service and specify the initial configurations for the service's action."
              }
            }
          },
          "Version": {
            "type": "String",
            "required": false,
            "description": "The version number of this custom action."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::CodePipeline::Pipeline": {
    "type": "Object",
    "required": false,
    "description": "The AWS::CodePipeline::Pipeline resource creates an AWS CodePipeline pipeline that describes how software changes go through a release process.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::CodePipeline::Pipeline resource creates an AWS CodePipeline pipeline that describes how software changes go through a release process."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ArtifactStore": {
            "type": "Object",
            "required": true,
            "description": "The Amazon Simple Storage Service (Amazon S3) location where AWS CodePipeline stores pipeline artifacts.",
            "properties": {
              "EncryptionKey": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::KMS::Key",
                "description": "The encryption key AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key."
              },
              "Location": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The location where AWS CodePipeline stores artifacts for a pipeline, such as an S3 bucket."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of the artifact store, such as Amazon S3.",
                "allowed-values": [
                  "*",
                  "S3"
                ]
              }
            }
          },
          "DisableInboundStageTransitions": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Prevents artifacts in a pipeline from transitioning to the stage that you specified.",
            "properties": {
              "Reason": {
                "type": "String",
                "required": true,
                "description": "An explanation of why the transition between two stages of a pipeline was disabled."
              },
              "StageName": {
                "type": "String",
                "required": true,
                "description": "The name of the stage to which transitions are disabled."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of your AWS CodePipeline pipeline."
          },
          "RestartExecutionOnUpdate": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to rerun the AWS CodePipeline pipeline after you update it."
          },
          "RoleArn": {
            "type": "String",
            "resource-ref-type": "AWS::IAM::Role",
            "required": true,
            "description": "A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf."
          },
          "Stages": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Defines the AWS CodePipeline pipeline stages.",
            "properties": {
              "Actions": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The actions to include in this stage.",
                "properties": {
                  "ActionTypeId": {
                    "type": "Object",
                    "required": true,
                    "description": "Specifies the action type and the provider of the action.",
                    "properties": {
                      "Category": {
                        "type": "String",
                        "required": true,
                        "description": "A category that defines which action type the owner (the entitiy that performs the action) performs.",
                        "allowed-values": [
                          "*",
                          "Source",
                          "Build",
                          "Deploy",
                          "Test",
                          "Invoke"
                        ]
                      },
                      "Owner": {
                        "type": "String",
                        "required": true,
                        "description": "The entity that performs the action.",
                        "allowed-values": [
                          "*",
                          "AWS",
                          "ThirdParty",
                          "Custom"
                        ]
                      },
                      "Provider": {
                        "type": "String",
                        "required": true,
                        "description": "The service provider that the action calls."
                      },
                      "Version": {
                        "type": "String",
                        "required": true,
                        "description": "A version identifier for this action."
                      }
                    }
                  },
                  "Configuration": {
                    "type": "Json",
                    "required": false,
                    "description": "The action's configuration."
                  },
                  "InputArtifacts": {
                    "type": "Object",
                    "required": true,
                    "description": "The name or ID of the artifact that the action consumes, such as a test or build artifact.",
                    "properties": {
                      "Name": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the artifact that the AWS CodePipeline action works on, such as My App.The input artifact of an action must match the output artifact from any preceding action."
                      }
                    }
                  },
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The action name."
                  },
                  "OutputArtifacts": {
                    "type": "Object",
                    "required": true,
                    "description": "The artifact name or ID that is a result of the action, such as a test or build artifact.",
                    "properties": {
                      "Name": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the artifact that is the result of an AWS CodePipeline action, such as My App. Output artifact names must be unique within a pipeline."
                      }
                    }
                  },
                  "RoleArn": {
                    "type": "String",
                    "resource-ref-type": "AWS::IAM::Role",
                    "required": false,
                    "description": "The Amazon Resource Name (ARN) of a service role that the action uses. The pipeline's role assumes this role."
                  },
                  "RunOrder": {
                    "type": "Number",
                    "required": false,
                    "description": "The order in which AWS CodePipeline runs this action."
                  }
                }
              },
              "Blockers": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The gates included in a stage.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the gate declaration."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The type of gate declaration.",
                    "allowed-values": [
                      "*",
                      "Schedule"
                    ]
                  }
                }
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "A name for this stage."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Config::ConfigRule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Config::ConfigRule resource uses an AWS Lambda (Lambda) function that evaluates configuration items to assess whether your AWS resources comply with your specified configurations.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Config::ConfigRule resource uses an AWS Lambda (Lambda) function that evaluates configuration items to assess whether your AWS resources comply with your specified configurations."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ConfigRuleName": {
            "type": "String",
            "required": false,
            "description": "A name for the AWS Config rule. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the rule name."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description about this AWS Config rule."
          },
          "InputParameters": {
            "type": "Json",
            "required": false,
            "description": "Input parameter values that are passed to the AWS Config rule (Lambda function)."
          },
          "MaximumExecutionFrequency": {
            "type": "String",
            "required": false,
            "description": "The maximum frequency at which the AWS Config rule runs evaluations.",
            "allowed-values": [
              "*",
              "One_Hour",
              "Three_Hours",
              "Six_Hours",
              "Twelve_Hours",
              "TwentyFour_Hours"
            ]
          },
          "Scope": {
            "type": "Object",
            "required": false,
            "description": "Defines which AWS resources will trigger an evaluation when their configurations change.",
            "properties": {
              "ComplianceResourceId": {
                "type": "String",
                "required": false,
                "description": "The ID of an AWS resource that you want AWS Config to evaluate against a rule."
              },
              "ComplianceResourceTypes": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The ID of an AWS resource that you want AWS Config to evaluate against a rule.",
                "allowed-values": [
                  "*",
                  "AWS::EC2::Volume",
                  "AWS::EC2::Host",
                  "AWS::EC2::EIP",
                  "AWS::EC2::Instance",
                  "AWS::EC2::NetworkInterface",
                  "AWS::EC2::SecurityGroup",
                  "AWS::EC2::CustomerGateway",
                  "AWS::EC2::InternetGateway",
                  "AWS::EC2::NetworkAcl",
                  "AWS::EC2::RouteTable",
                  "AWS::EC2::Subnet",
                  "AWS::EC2::VPC",
                  "AWS::EC2::VPNConnection",
                  "AWS::EC2::VPNGateway",
                  "AWS::CloudTrail::Trail"
                ]
              },
              "TagKey": {
                "type": "String",
                "required": false,
                "description": "The tag key that is applied to the AWS resources that you want AWS Config to evaluate against the rule."
              },
              "TagValue": {
                "type": "String",
                "required": false,
                "description": "The tag value that is applied to the AWS resources that you want AWS Config to evaluate against the rule."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Config::ConfigurationRecorder": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Config::ConfigurationRecorder resource describes the AWS resource types for which AWS Config records configuration changes. The configuration recorder stores the configurations of the supported resources in your account as configuration items.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Config::ConfigurationRecorder resource describes the AWS resource types for which AWS Config records configuration changes. The configuration recorder stores the configurations of the supported resources in your account as configuration items."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the configuration recorder."
          },
          "RecordingGroup": {
            "type": "Object",
            "required": false,
            "description": "Indicates whether to record configurations for all supported resources or for a list of resource types.",
            "properties": {
              "AllSupported": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether to record all supported resource types. If you specify this property, do not specify the ResourceTypes property."
              },
              "IncludeGlobalResourceTypes": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether AWS Config records all supported global resource types. "
              },
              "ResourceTypes": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A name for the configuration recorder.",
                "allowed-values": [
                  "*",
                  "AWS::EC2::Volume",
                  "AWS::EC2::Host",
                  "AWS::EC2::EIP",
                  "AWS::EC2::Instance",
                  "AWS::EC2::NetworkInterface",
                  "AWS::EC2::SecurityGroup",
                  "AWS::EC2::CustomerGateway",
                  "AWS::EC2::InternetGateway",
                  "AWS::EC2::NetworkAcl",
                  "AWS::EC2::RouteTable",
                  "AWS::EC2::Subnet",
                  "AWS::EC2::VPC",
                  "AWS::EC2::VPNConnection",
                  "AWS::EC2::VPNGateway",
                  "AWS::CloudTrail::Trail",
                  "AWS::IAM::User",
                  "AWS::IAM::Group",
                  "AWS::IAM::Role",
                  "AWS::IAM::Policy"
                ]
              }
            }
          },
          "RoleARN": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that is used to make read or write requests to the delivery channel that you specify and to get configuration details for supported AWS resources."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Config::DeliveryChannel": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Config::DeliveryChannel resource describes where AWS Config stores configuration changes to an AWS resource.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Config::DeliveryChannel resource describes where AWS Config stores configuration changes to an AWS resource."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ConfigSnapshotDeliveryProperties": {
            "type": "Object",
            "required": false,
            "description": "Provides options for how AWS Config delivers configuration snapshots to the S3 bucket in your delivery channel.",
            "properties": {
              "DeliveryFrequency": {
                "type": "String",
                "required": false,
                "description": "The frequency with which AWS Config delivers configuration snapshots.",
                "allowed-values": [
                  "*",
                  "One_Hour",
                  "Three_Hours",
                  "Six_Hours",
                  "Twelve_Hours",
                  "TwentyFour_Hours"
                ]
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the delivery channel. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the delivery channel name."
          },
          "S3BucketName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::S3::Bucket",
            "description": "The name of an S3 bucket where you want to store configuration history for the delivery channel."
          },
          "S3KeyPrefix": {
            "type": "String",
            "required": false,
            "description": "A key prefix (folder) for the specified S3 bucket."
          },
          "SnsTopicARN": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic that AWS Config delivers notifications to."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DataPipeline::Pipeline": {
    "type": "Object",
    "required": false,
    "description": "Creates a data pipeline that you can use to automate the movement and transformation of data.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a data pipeline that you can use to automate the movement and transformation of data."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Activate": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to validate and start the pipeline or stop an active pipeline. By default, the value is set to true."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description for the pipeline."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the pipeline. Because AWS CloudFormation assigns each new pipeline a unique identifier, you can use the same name for multiple pipelines that are associated with your AWS account."
          },
          "ParameterObjects": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Defines the variables that are in the pipeline definition.",
            "properties": {
              "Attributes": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "Key-value pairs that define the attributes of the parameter object.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "Specifies the name of a parameter attribute."
                  },
                  "StringValue": {
                    "type": "String",
                    "required": false,
                    "description": "A parameter attribute value."
                  }
                }
              },
              "Id": {
                "type": "String",
                "required": true,
                "description": "The identifier of the parameter object."
              }
            }
          },
          "ParameterValues": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Defines the values for the parameters that are defined in the ParameterObjects property.",
            "properties": {
              "Id": {
                "type": "String",
                "required": true,
                "description": "The ID of a parameter object."
              },
              "StringValue": {
                "type": "String",
                "required": true,
                "description": "A value to associate with the parameter object."
              }
            }
          },
          "PipelineObjects": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of pipeline objects that make up the pipeline.",
            "properties": {
              "Fields": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "Key-value pairs that define the properties of the object.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "Specifies the name of a field for a particular object."
                  },
                  "RefValue": {
                    "type": "String",
                    "required": false,
                    "description": "A field value that you specify as an identifier of another object in the same pipeline definition."
                  },
                  "StringValue": {
                    "type": "String",
                    "required": false,
                    "description": "A field value that you specify as a string."
                  }
                }
              },
              "Id": {
                "type": "String",
                "required": true,
                "description": "The ID of a parameter object."
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "Name of the object."
              }
            }
          },
          "PipelineTags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DirectoryService::MicrosoftAD": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DirectoryService::MicrosoftAD resource creates a Microsoft Active Directory in AWS so that your directory users and groups can access the AWS Management Console and AWS applications using their existing credentials.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DirectoryService::MicrosoftAD resource creates a Microsoft Active Directory in AWS so that your directory users and groups can access the AWS Management Console and AWS applications using their existing credentials."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CreateAlias": {
            "type": "Boolean",
            "required": false,
            "description": "A unique alias to assign to the Microsoft Active Directory in AWS. "
          },
          "EnableSso": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to enable single sign-on for a Microsoft Active Directory in AWS."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The fully qualified name for the Microsoft Active Directory in AWS, such as corp.example.com."
          },
          "Password": {
            "type": "String",
            "required": true,
            "description": "The password for the default administrative user, Admin."
          },
          "ShortName": {
            "type": "String",
            "required": false,
            "description": "The NetBIOS name for your domain, such as CORP."
          },
          "VpcSettings": {
            "type": "Object",
            "required": true,
            "description": "Specifies the VPC settings of the Microsoft Active Directory server in AWS.",
            "properties": {
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "A list of at least two subnet IDs for the directory servers.",
                "resource-ref-type": "AWS::EC2::Subnet"
              },
              "VpcId": {
                "type": "String",
                "required": true,
                "description": "The VPC ID in which to create the Microsoft Active Directory server.",
                "resource-ref-type": "AWS::EC2::VPC"
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DirectoryService::SimpleAD": {
    "type": "Object",
    "required": false,
    "description": "The AWS::DirectoryService::SimpleAD resource creates an AWS Directory Service Simple Active Directory (Simple AD) in AWS so that you can seamlessly join Amazon Elastic Compute Cloud (Amazon EC2) Windows instances to your domain.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::DirectoryService::SimpleAD resource creates an AWS Directory Service Simple Active Directory (Simple AD) in AWS so that you can seamlessly join Amazon Elastic Compute Cloud (Amazon EC2) Windows instances to your domain."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CreateAlias": {
            "type": "Boolean",
            "required": false,
            "description": "Creates an alias for a directory and assigns the alias to the directory."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the directory."
          },
          "EnableSso": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to enable single-sign on for a directory."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The fully qualified name for the directory, such as corp.example.com."
          },
          "Password": {
            "type": "String",
            "required": true,
            "description": "The password for the directory administrator. AWS Directory Service creates a directory administrator account with the user name Administrator and this password."
          },
          "ShortName": {
            "type": "String",
            "required": false,
            "description": "The short name of the directory, such as CORP."
          },
          "Size": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "Large",
              "Small",
              "*"
            ],
            "description": "The size of the directory."
          },
          "VpcSettings": {
            "type": "Object",
            "required": true,
            "description": "Specifies the VPC settings of the directory server.",
            "properties": {
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "A list of at least two subnet IDs for the directory servers."
              },
              "VpcId": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::VPC",
                "description": "The VPC ID in which to create the Simple AD directory."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::DynamoDB::Table": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon DynamoDB table.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon DynamoDB table."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AttributeDefinitions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of AttributeName and AttributeValue objects that describe the key schema for the table and indexes.",
            "properties": {
              "AttributeName": {
                "type": "String",
                "required": true,
                "description": "The name of an attribute. Attribute names can be 1 � 255 characters long and have no character restrictions."
              },
              "AttributeType": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "S",
                  "N",
                  "B"
                ],
                "description": "The data type for the attribute. You can specify S for string data, N for numeric data, or B for binary data."
              }
            }
          },
          "GlobalSecondaryIndexes": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Global secondary indexes to be created on the table. You can create up to 5 global secondary indexes.",
            "properties": {
              "IndexName": {
                "type": "String",
                "required": true,
                "description": "The name of the global secondary index. The index name can be 3 � 255 characters long and have no character restrictions."
              },
              "KeySchema": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The complete index key schema for the global secondary index, which consists of one or more pairs of attribute names and key types.",
                "properties": {
                  "AttributeName": {
                    "type": "String",
                    "required": true,
                    "description": "The attribute name that is used as the primary key for this Global Secondary Index. Primary key element names can be 1 � 255 characters long and have no character restrictions."
                  },
                  "KeyType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "HASH",
                      "RANGE"
                    ],
                    "description": "Represents the attribute data, consisting of the data type and the attribute value itself. You can specify HASH or RANGE."
                  }
                }
              },
              "Projection": {
                "type": "Object",
                "required": true,
                "description": "Attributes that are copied (projected) from the source table into the index. These attributes are additions to the primary key attributes and index key attributes, which are automatically projected.",
                "properties": {
                  "NonKeyAttributes": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "The non-key attribute names that are projected into the index."
                  },
                  "ProjectionType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "KEYS_ONLY",
                      "INCLUDE",
                      "ALL"
                    ],
                    "description": "The set of attributes that are projected into the index."
                  }
                }
              },
              "ProvisionedThroughput": {
                "type": "Object",
                "required": true,
                "description": "The provisioned throughput settings for the index.",
                "properties": {
                  "ReadCapacityUnits": {
                    "type": "Number",
                    "required": true,
                    "description": "Sets the desired minimum number of consistent reads of items (of up to 1KB in size) per second for the specified index before Amazon DynamoDB balances the load."
                  },
                  "WriteCapacityUnits": {
                    "type": "Number",
                    "required": true,
                    "description": "Sets the desired minimum number of consistent writes of items (of up to 1KB in size) per second for the specified index before Amazon DynamoDB balances the load."
                  }
                }
              },
              "StreamSpecification": {
                "type": "Object",
                "required": false,
                "description": "The settings for the DynamoDB table stream, which capture changes to items stored in the table.",
                "properties": {
                  "StreamViewType": {
                    "type": "String",
                    "required": true,
                    "description": "The attribute name that is used as the primary key for this Global Secondary Index. Primary key element names can be 1 � 255 characters long and have no character restrictions.",
                    "allowed-values": [
                      "KEYS_ONLY",
                      "NEW_IMAGE",
                      "OLD_IMAGE",
                      "NEW_AND_OLD_IMAGES",
                      "*"
                    ]
                  }
                }
              }
            }
          },
          "KeySchema": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The complete index key schema for the global secondary index, which consists of one or more pairs of attribute names and key types.",
            "properties": {
              "AttributeName": {
                "type": "String",
                "required": true,
                "description": "The attribute name that is used as the primary key for this Global Secondary Index. Primary key element names can be 1 � 255 characters long and have no character restrictions."
              },
              "KeyType": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "HASH",
                  "RANGE"
                ],
                "description": "Represents the attribute data, consisting of the data type and the attribute value itself. You can specify HASH or RANGE."
              }
            }
          },
          "LocalSecondaryIndexes": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.",
            "properties": {
              "IndexName": {
                "type": "String",
                "required": true,
                "description": "The name of the local secondary index. The index name can be 3 � 255 characters long and have no character restrictions."
              },
              "KeySchema": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The complete index key schema for the local secondary index, which consists of one or more pairs of attribute names and key types.",
                "properties": {
                  "AttributeName": {
                    "type": "String",
                    "required": true,
                    "description": "The attribute name that is used as the primary key for this local secondary index. Primary key element names can be 1 � 255 characters long and have no character restrictions."
                  },
                  "KeyType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "HASH",
                      "RANGE"
                    ],
                    "description": "Represents the attribute data, consisting of the data type and the attribute value itself. You can specify HASH or RANGE."
                  }
                }
              },
              "Projection": {
                "type": "Object",
                "required": true,
                "description": "Attributes that are copied (projected) from the source table into the index. These attributes are additions to the primary key attributes and index key attributes, which are automatically projected.",
                "properties": {
                  "NonKeyAttributes": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "The non-key attribute names that are projected into the index."
                  },
                  "ProjectionType": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "KEYS_ONLY",
                      "INCLUDE",
                      "ALL"
                    ],
                    "description": "The set of attributes that are projected into the index."
                  }
                }
              }
            }
          },
          "ProvisionedThroughput": {
            "type": "Object",
            "required": true,
            "description": "New throughput for the specified table, consisting of values for ReadCapacityUnits and WriteCapacityUnits.",
            "properties": {
              "ReadCapacityUnits": {
                "type": "Number",
                "required": true,
                "description": "Sets the desired minimum number of consistent reads of items (of up to 1KB in size) per second for the specified table before Amazon DynamoDB balances the load."
              },
              "WriteCapacityUnits": {
                "type": "Number",
                "required": true,
                "description": "Sets the desired minimum number of consistent writes of items (of up to 1KB in size) per second for the specified table before Amazon DynamoDB balances the load."
              }
            }
          },
          "TableName": {
            "type": "String",
            "required": false,
            "description": "A name for the table. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the table name."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::CustomerGateway": {
    "type": "Object",
    "required": false,
    "description": "Provides information to AWS about your VPN customer gateway device.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Provides information to AWS about your VPN customer gateway device."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of VPN connection this customer gateway supports.  For example: ipsec.1"
          },
          "IpAddress": {
            "type": "String",
            "required": true,
            "description": "The Internet-routable IP address for the customer gateway's outside interface. The address must be static."
          },
          "BgpAsn": {
            "type": "Number",
            "required": true,
            "description": "The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN)."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::DHCPOptions": {
    "type": "Object",
    "required": false,
    "description": "Creates a set of DHCP options for your VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a set of DHCP options for your VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DomainName": {
            "type": "String",
            "required": true,
            "description": "A domain name of your choice.  Example: example.com"
          },
          "DomainNameServers": {
            "type": "Array",
            "array-type": "String",
            "allowed-values": [
              "AmazonProvidedDNS",
              "*"
            ],
            "required": true,
            "description": "The IP (IPv4) address of a domain name server. You can specify up to four addresses. Example: 10.0.0.1"
          },
          "NtpServers": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The IP address of a Network Time Protocol (NTP) server. You can specify up to four addresses. Example: 10.0.0.1"
          },
          "NetbiosNameServers": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "The IP address (IPv4) of a NetBIOS name server. You can specify up to four addresses. Example: 10.0.0.1"
          },
          "NetbiosNodeType": {
            "type": "Array",
            "array-type": "Number",
            "allowed-values": [
              1,
              2,
              4,
              8,
              "*"
            ],
            "required": true,
            "description": "Value indicating the NetBIOS node type (1, 2, 4, or 8). We recommend you only use 2 at this time (broadcast and multicast are currently not supported)."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::EIP": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::EIP resource allocates an Elastic IP (EIP) address and can, optionally, associate it with an Amazon EC2 instance.",
    "return-values": [
      {
        "name": "AllocationId",
        "description": "The ID that AWS assigns to represent the allocation of the address for use with Amazon VPC. THis is returned only for VPC elastic IP addresses. Example return value: eipalloc-5723d13e"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::EIP resource allocates an Elastic IP (EIP) address and can, optionally, associate it with an Amazon EC2 instance."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "InstanceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Instance",
            "description": "The Instance ID of the Amazon EC2 instance that you want to associate with this Elastic IP address."
          },
          "Domain": {
            "type": "String",
            "required": false,
            "description": "Set to \"vpc\" to allocate the address to your Virtual Private Cloud (VPC). No other values are supported."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::EIPAssociation": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::EIPAssociation resource associates an Elastic IP address with an Amazon EC2 instance. The Elastic IP address can be an existing Elastic IP address or an Elastic IP address allocated through an AWS::EC2::EIP resource.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::EIPAssociation resource associates an Elastic IP address with an Amazon EC2 instance. The Elastic IP address can be an existing Elastic IP address or an Elastic IP address allocated through an AWS::EC2::EIP resource."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllocationId": {
            "type": "String",
            "required": false,
            "description": "Allocation ID for the VPC Elastic IP address you want to associate with an Amazon EC2 instance in your VPC."
          },
          "EIP": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::EIP",
            "description": "Elastic IP address that you want to associate with the Amazon EC2 instance specified by the InstanceId property. You can specify an existing Elastic IP address or a reference to an Elastic IP address allocated with a AWS::EC2::EIP resource."
          },
          "InstanceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Instance",
            "description": "Instance ID of the Amazon EC2 instance that you want to associate with the Elastic IP address specified by the EIP property."
          },
          "NetworkInterfaceId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::NetworkInterface",
            "description": "The ID of the network interface to associate with the Elastic IP address (VPC only)."
          },
          "PrivateIpAddress": {
            "type": "String",
            "required": false,
            "description": "The private IP address that you want to associate with the Elastic IP address. The private IP address is restricted to the primary and secondary private IP addresses that are associated with the network interface. By default, the private IP address that is associated with the EIP is the primary private IP address of the network interface."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::FlowLog": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::FlowLog resource creates an Amazon Elastic Compute Cloud (Amazon EC2) flow log that captures IP traffic for a specified network interface, subnet, or VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::FlowLog resource creates an Amazon Elastic Compute Cloud (Amazon EC2) flow log that captures IP traffic for a specified network interface, subnet, or VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DeliverLogsPermissionArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account."
          },
          "LogGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Logs::LogGroup",
            "description": "The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs."
          },
          "ResourceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "*",
            "description": "The ID of the subnet, network interface, or VPC for which you want to create a flow log."
          },
          "ResourceType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "VPC",
              "Subnet",
              "NetworkInterface"
            ],
            "description": "The type of resource that you specified in the ResourceId property. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property."
          },
          "TrafficType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "ACCEPT",
              "REJECT",
              "ALL"
            ],
            "description": "The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Host": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::Host resource allocates a fully dedicated physical server for launching EC2 instances.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::Host resource allocates a fully dedicated physical server for launching EC2 instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoPlacement": {
            "type": "String",
            "required": false,
            "description": "Indicates if the host accepts EC2 instances with only matching configurations or if instances must also specify the host ID."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": true,
            "description": "The Availability Zone (AZ) in which to launch the dedicated host."
          },
          "InstanceType": {
            "type": "String",
            "required": false,
            "description": "The instance type that the dedicated host accepts.",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Instance": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::Instance type creates an Amazon EC2 instance.",
    "return-values": [
      {
        "name": "AvailabilityZone",
        "description": "The availability zone where the specified instance is launched. For example: us-east-1b."
      },
      {
        "name": "PrivateDnsName",
        "description": "The private DNS name of the specified instance. For example: ip-10-24-34-0.ec2.internal"
      },
      {
        "name": "PublicDnsName",
        "description": "The public DNS name of the specified instance. For example: ec2-107-20-50-45.compute-1.amazonaws.com"
      },
      {
        "name": "PrivateIp",
        "description": "The private IP address of the specified instance. For example: 10.24.34.0"
      },
      {
        "name": "PublicIp",
        "description": "The public IP address of the specified instance. For example: 192.0.2.0"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::Instance type creates an Amazon EC2 instance."
      },
      "CreationPolicy": {
        "type": "Object",
        "required": false,
        "description": "The CreationPolicy prevents the resource's status from reaching create complete until AWS CloudFormation receives a specified number of success signals or the timeout period is exceeded.",
        "properties": {
          "ResourceSignal": {
            "type": "Object",
            "required": true,
            "description": "Signal configuration.",
            "properties": {
              "Count": {
                "type": "Number",
                "required": false,
                "description": "The number of success signals AWS CloudFormation must receive before it sets the resource status as CREATE_COMPLETE."
              },
              "Timeout": {
                "type": "String",
                "required": false,
                "description": "The length of time that AWS CloudFormation waits for the number of signals that was specified in the Count property. The value must be in ISO8601 duration format, in the form: PT#H#M#S, where each # is the number of hours, minutes, and seconds, respectively. Default: PT5M (5 minutes)"
              }
            }
          }
        }
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Affinity": {
            "type": "String",
            "required": false,
            "description": "Indicates whether Amazon Elastic Compute Cloud (Amazon EC2) always associates the instance with a dedicated host."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "Specifies the name of the availability zone in which the instance is located. If not specified, the default availability zone for the region will be used.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "BlockDeviceMappings": {
            "array-type": "Object",
            "type": "Array",
            "required": false,
            "description": "Defines a set of Amazon EC2 Elastic Block Store (EBS) block device mappings.",
            "properties": {
              "DeviceName": {
                "type": "String",
                "required": true,
                "description": "The name of the device within Amazon EC2."
              },
              "Ebs": {
                "type": "Object",
                "required": false,
                "description": "The EC2 EBS Block Device. You can specify either VirtualName or Ebs, but not both.",
                "properties": {
                  "DeleteOnTermination": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Determines whether to delete the volume on instance termination. The default value is \"true\"."
                  },
                  "Iops": {
                    "type": "String",
                    "required": false,
                    "description": "The number of I/O operations per second (IOPS) that the volume supports. This can be an integer from 100 to 2000. Required when the volume type is \"io1\"; not used with standard volumes."
                  },
                  "SnapshotId": {
                    "type": "String",
                    "required": false,
                    "description": "The snapshot ID of the volume to use to create a block device. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                  },
                  "VolumeSize": {
                    "type": "String",
                    "required": false,
                    "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                  },
                  "VolumeType": {
                    "type": "String",
                    "required": false,
                    "allowed-values": [
                      "*",
                      "standard",
                      "io1",
                      "gp2"
                    ],
                    "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10."
                  }
                }
              },
              "NoDevice": {
                "type": "Object",
                "required": false,
                "description": "This is set to empty map (\"{}\") that be used to unmap a defined device.",
                "properties": {}
              },
              "VirtualName": {
                "type": "String",
                "required": true,
                "description": "The name of the virtual device. The name must be in the form ephemeralX where X is a number starting from zero (0); for example, ephemeral0. You can specify either VirtualName or Ebs, but not both."
              }
            }
          },
          "DisableApiTermination": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether the instance can be terminated through the API (specify \"true\"), or not (specify \"false\")."
          },
          "EbsOptimized": {
            "type": "Boolean",
            "required": false,
            "description": "This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance."
          },
          "HostId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Host",
            "description": "If you specify host for the Affinity property, the ID of a dedicated host that the instance is associated with."
          },
          "IamInstanceProfile": {
            "type": "String",
            "resource-ref-type": "AWS::IAM::InstanceProfile",
            "required": false,
            "description": "A reference to an AWS::IAM::InstanceProfile type"
          },
          "ImageId": {
            "type": "String",
            "required": true,
            "description": "Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration."
          },
          "InstanceInitiatedShutdownBehavior": {
            "type": "String",
            "required": false,
            "description": "Indicates whether an instance stops or terminates when you shut down the instance from the instance's operating system shutdown command."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The instance type. For example, \"m1.small\".",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "KernelId": {
            "type": "String",
            "required": false,
            "description": "The kernel ID"
          },
          "KeyName": {
            "type": "String",
            "required": false,
            "description": "Provides the name of the EC2 key pair."
          },
          "Monitoring": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether monitoring is enabled for the instance."
          },
          "NetworkInterfaces": {
            "type": "Array",
            "array-type": "Object",
            "properties": {
              "AssociatePublicIpAddress": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the network interface receives a public IP address. You can associate a public IP address with a network interface only if it has a device index of eth0."
              },
              "DeleteOnTermination": {
                "type": "Boolean",
                "required": false,
                "description": "Determines whether to delete the network interface on instance termination."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "The description of this network interface."
              },
              "DeviceIndex": {
                "type": "String",
                "required": true,
                "description": "The order in which the network interface should be attached."
              },
              "GroupSet": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of security group IDs associated with this network interface."
              },
              "NetworkInterfaceId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::NetworkInterface",
                "required": true,
                "description": "The ID of the network interface to attach."
              },
              "PrivateIpAddress": {
                "type": "String",
                "required": false,
                "description": "Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property."
              },
              "PrivateIpAddresses": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property.",
                "properties": {
                  "PrivateIpAddress": {
                    "type": "String",
                    "required": true,
                    "description": "The private IP address of the network interface."
                  },
                  "Primary": {
                    "type": "Boolean",
                    "required": true,
                    "description": "Sets the private IP address as the primary private address. You can set only one primary private IP address."
                  }
                }
              },
              "SecondaryPrivateIpAddressCount": {
                "type": "Number",
                "required": false,
                "description": "The number of secondary private IP addresses that Amazon EC2 auto assigns to the network interface. Amazon EC2 uses the value of the PrivateIpAddress property as the primary private IP address."
              },
              "SubnetId": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "The ID of the subnet to associate with the network interface."
              }
            },
            "required": false,
            "description": "A list of network interfaces to associate with this instance."
          },
          "PlacementGroupName": {
            "type": "String",
            "required": false,
            "description": "The name of an existing placement group that you want to launch the instance into (for cluster instances)."
          },
          "PrivateIpAddress": {
            "type": "String",
            "required": false,
            "description": "If you're using an Amazon Virtual Private Cloud (VPC), you can optionally use this parameter to assign the instance a specific available IP address from the subnet (e.g., 10.0.0.25). By default, Amazon VPC selects an IP address from the subnet for the instance."
          },
          "RamdiskId": {
            "type": "String",
            "required": false,
            "description": "The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID."
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "A list that contains the security group IDs for VPC security groups to assign to the Amazon EC2 instance."
          },
          "SecurityGroups": {
            "array-type": "String",
            "type": "Array",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Valid only for EC2 security groups. A list that contains the EC2 security groups to assign to the Amazon EC2 instance. The list can contain both the name of existing EC2 security groups or references to AWS::EC2::SecurityGroup resources created in the template."
          },
          "SourceDestCheck": {
            "type": "Boolean",
            "required": false,
            "description": "Controls whether source/destination checking is enabled on the instance. Also determines if an instance in a VPC will perform network address translation (NAT)."
          },
          "SsmAssociations": {
            "type": "Object",
            "required": false,
            "description": "The Amazon EC2 Simple Systems Manager (SSM) document and parameter values to associate with this instance.",
            "properties": {
              "AssociationParameters": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The input parameter values to use with the associated SSM document.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "The name of an input parameter that is in the associated SSM document."
                  },
                  "Value": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "description": "The value of an input parameter."
                  }
                }
              },
              "DocumentName": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::SSM::Document",
                "description": "The name of an SSM document to associate with the instance."
              }
            }
          },
          "SubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "If you're using Amazon Virtual Private Cloud, this specifies the ID of the subnet that you want to launch the instance into."
          },
          "Tenancy": {
            "type": "String",
            "required": false,
            "description": "The tenancy of the instance that you want to launch. This value can be either \"default\" or \"dedicated\". An instance that has a tenancy value of \"dedicated\" runs on single-tenant hardware and can be launched only into a VPC."
          },
          "UserData": {
            "type": "String",
            "required": false,
            "description": "Base64-encoded MIME user data that is made available to the instances."
          },
          "Volumes": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The EBS volumes to attach to the instance.",
            "properties": {
              "Device": {
                "type": "String",
                "required": true,
                "description": "How the device is exposed to the instance (such as /dev/sdh, or xvdh)."
              },
              "VolumeId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::Volume",
                "required": true,
                "description": "The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone and the instance must be running."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::InternetGateway": {
    "type": "Object",
    "required": false,
    "description": "Creates a new Internet gateway in your AWS account. After creating the Internet gateway, you then attach it to a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new Internet gateway in your AWS account. After creating the Internet gateway, you then attach it to a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NatGateway": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::NatGateway resource creates a network address translation (NAT) gateway in the specified public subnet",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::NatGateway resource creates a network address translation (NAT) gateway in the specified public subnet"
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllocationId": {
            "type": "String",
            "required": true,
            "description": "The allocation ID of an Elastic IP address to associate with the NAT gateway."
          },
          "SubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The public subnet in which to create the NAT gateway."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NetworkAcl": {
    "type": "Object",
    "required": false,
    "description": "Creates a new network ACL in a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new network ACL in a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VpcId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC where the network ACL will be created."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NetworkAclEntry": {
    "type": "Object",
    "required": false,
    "description": "Creates an entry (i.e., rule) in a network ACL with a rule number you specify. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an entry (i.e., rule) in a network ACL with a rule number you specify. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "NetworkAclId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::NetworkAcl",
            "required": true,
            "description": "ID of the ACL where the entry will be created."
          },
          "RuleNumber": {
            "type": "Number",
            "required": true,
            "description": "Rule number to assign to the entry (e.g., 100). This must be a postive integer from 1 to 32766."
          },
          "Protocol": {
            "type": "Number",
            "required": true,
            "description": "IP protocol the rule applies to. You can use -1 to mean all protocols. This must be -1 or a protocol number."
          },
          "RuleAction": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "allow",
              "deny"
            ],
            "description": "ID of the ACL where the entry will be created."
          },
          "Egress": {
            "type": "Boolean",
            "required": true,
            "description": "Whether this rule applies to egress traffic from the subnet (\"true\") or ingress traffic to the subnet (\"false\")."
          },
          "CidrBlock": {
            "type": "String",
            "required": true,
            "description": "The CIDR range to allow or deny, in CIDR notation (e.g., 172.16.0.0/24)."
          },
          "Icmp": {
            "type": "Object",
            "required": false,
            "description": "The Internet Control Message Protocol (ICMP) code and type.  Required: Conditional, required if specifying 1 (ICMP) for the protocol parameter.",
            "properties": {
              "Code": {
                "type": "Number",
                "required": false,
                "description": "The Internet Control Message Protocol (ICMP) code. You can use -1 to specify all ICMP codes for the given ICMP type. Condition: Required if specifying 1 (ICMP) for the CreateNetworkAclEntry protocol parameter."
              },
              "Type": {
                "type": "Number",
                "required": false,
                "description": "The Internet Control Message Protocol (ICMP) type. You can use -1 to specify all ICMP types. Condition: Required if specifying 1 (ICMP) for the CreateNetworkAclEntry protocol parameter."
              }
            }
          },
          "PortRange": {
            "type": "Object",
            "required": false,
            "description": "The range of port numbers for the UDP/TCP protocol. Required: Conditional, required if specifying 6 (TCP) or 17 (UDP) for the protocol parameter.",
            "properties": {
              "From": {
                "type": "Number",
                "required": false,
                "description": "The first port in the range. Condition: Required if specifying 6 (TCP) or 17 (UDP) for the CreateNetworkAclEntry protocol parameter."
              },
              "To": {
                "type": "Number",
                "required": false,
                "description": "The last port in the range. Condition: Required if specifying 6 (TCP) or 17 (UDP) for the CreateNetworkAclEntry protocol parameter."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NetworkInterface": {
    "return-values": [
      {
        "description": "The primary private IP address of the network interface that you specified. For example: 10.0.0.192",
        "name": "PrimaryPrivateIpAddress"
      },
      {
        "description": "The secondary private IP addresses of the network interface that you specified. For example:  [\"10.0.0.161\", \"10.0.0.162\", \"10.0.0.163\"]",
        "name": "SecondaryPrivateIpAddresses"
      }
    ],
    "type": "Object",
    "required": false,
    "description": "Describes a network interface in an Elastic Compute Cloud (EC2) instance for AWS CloudFormation. ",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Describes a network interface in an Elastic Compute Cloud (EC2) instance for AWS CloudFormation. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "The description of this network interface."
          },
          "GroupSet": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "A list of security group IDs associated with this network interface."
          },
          "PrivateIpAddress": {
            "type": "String",
            "required": false,
            "description": "IP address of the interface within the subnet."
          },
          "PrivateIpAddresses": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want Amazon EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.",
            "properties": {
              "PrivateIpAddress": {
                "type": "String",
                "required": true,
                "description": "The private IP address of the network interface."
              },
              "Primary": {
                "type": "Boolean",
                "required": true,
                "description": "Sets the private IP address as the primary private address. You can set only one primary private IP address. If you don't specify a primary private IP address, Amazon EC2 automatically assigns a primary private IP address."
              }
            }
          },
          "SecondaryPrivateIpAddressCount": {
            "type": "Number",
            "required": false,
            "description": "The number of secondary private IP addresses that Amazon EC2 automatically assigns to the network interface. Amazon EC2 uses the value of the PrivateIpAddress property as the primary private IP address. If you don't specify that property, Amazon EC2 automatically assigns both the primary and secondary private IP addresses."
          },
          "SourceDestCheck": {
            "type": "Boolean",
            "required": false,
            "description": "Flag indicating whether traffic to or from the instance is validated."
          },
          "SubnetId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The ID of the subnet to associate with the network interface."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::NetworkInterfaceAttachment": {
    "type": "Object",
    "required": false,
    "description": "Attaches an elastic network interface (ENI) to an Amazon EC2 instance. You can use this resource type to attach additional network interfaces to an instances without interruption.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Attaches an elastic network interface (ENI) to an Amazon EC2 instance. You can use this resource type to attach additional network interfaces to an instances without interruption."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DeleteOnTermination": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to delete the network interface when the instance terminates. By default, this value is set to True."
          },
          "DeviceIndex": {
            "type": "String",
            "required": true,
            "description": "The network interface's position in the attachment order. For example, the first attached network interface has a DeviceIndex of 0."
          },
          "InstanceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Instance",
            "description": "The ID of the instance to which you will attach the ENI."
          },
          "NetworkInterfaceId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::NetworkInterface",
            "description": "The ID of the ENI that you want to attach."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::PlacementGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::PlacementGroup resource is a logical grouping of instances within a single Availability Zone (AZ) that enables applications to participate in a low-latency, 10 Gbps network.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::PlacementGroup resource is a logical grouping of instances within a single Availability Zone (AZ) that enables applications to participate in a low-latency, 10 Gbps network."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Strategy": {
            "type": "String",
            "required": false,
            "description": "The placement strategy, which relates to the instance types that can be added to the placement group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Route": {
    "type": "Object",
    "required": false,
    "description": "Creates a new route in a route table within a VPC. The route's target can be either a gateway attached to the VPC or a NAT instance in the VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new route in a route table within a VPC. The route's target can be either a gateway attached to the VPC or a NAT instance in the VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DestinationCidrBlock": {
            "type": "String",
            "required": true,
            "description": "The CIDR address block used for the destination match. For example, \"0.0.0.0/0\". Routing decisions are based on the most specific match."
          },
          "GatewayId": {
            "type": "String",
            "resource-ref-type": [
              "AWS::EC2::InternetGateway",
              "AWS::EC2::VPNGateway"
            ],
            "required": false,
            "description": "The ID of a gateway attached to your VPC. For example: \"igw-eaad4883\". Required: Conditional. You must provide only one of the following: a GatewayID, InstanceID, or NetworkInterfaceId."
          },
          "InstanceId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Instance",
            "required": false,
            "description": "The ID of a NAT instance in your VPC. For example, \"i-1a2b3c4d\". Required: Conditional. You must provide only one of the following: a GatewayID, InstanceID, or NetworkInterfaceId."
          },
          "NatGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::NatGateway",
            "required": false,
            "description": "The ID of a NAT gateway. For example, nat-0a12bc456789de0fg."
          },
          "NetworkInterfaceId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::NetworkInterface",
            "required": false,
            "description": "Allows the routing of network interface IDs. Required: Conditional. You must provide only one of the following: a GatewayID, InstanceID, or NetworkInterfaceId."
          },
          "RouteTableId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::RouteTable",
            "required": true,
            "description": "The ID of the route table where the route will be added."
          },
          "VpcPeeringConnectionId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPCPeeringConnection",
            "required": false,
            "description": "The ID of a VPC peering connection."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::RouteTable": {
    "type": "Object",
    "required": false,
    "description": "Creates a new route table within a VPC. After you create a new route table, you can add routes and associate the table with a subnet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new route table within a VPC. After you create a new route table, you can add routes and associate the table with a subnet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "The ID of the VPC where the route table will be created."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SecurityGroup": {
    "return-values": [
      {
        "description": "The group ID of the specified security group. For example: sg-94b3a1f6",
        "name": "GroupId"
      }
    ],
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::SecurityGroup type creates an Amazon EC2 security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::SecurityGroup type creates an Amazon EC2 security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GroupDescription": {
            "type": "String",
            "required": false,
            "description": "Description of the security group."
          },
          "VpcId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "ID of the VPC."
          },
          "SecurityGroupIngress": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of EC2 security group ingress rules.",
            "properties": {
              "IpProtocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "tcp",
                  "udp",
                  "icmp"
                ],
                "description": "IP protocol name or number."
              },
              "CidrIp": {
                "type": "String",
                "required": false,
                "description": "The CIDR range. If you specify SourceSecurityGroupName, do not specify CidrIp."
              },
              "SourceSecurityGroupName": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Specifies the name of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupName."
              },
              "SourceSecurityGroupId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "For VPC security groups only. Specifies the ID of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupId."
              },
              "SourceSecurityGroupOwnerId": {
                "type": "String",
                "required": false,
                "description": "Specifies the AWS Account ID of the owner of the Amazon EC2 Security Group specified in the SourceSecurityGroupName property.\n\nIf you specify SourceSecurityGroupName and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional."
              },
              "FromPort": {
                "type": "String",
                "required": true,
                "description": "Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard.",
                "allowed-values": [
                  "*",
                  {
                    "display-label": "SSH (22)",
                    "value": "22"
                  },
                  {
                    "display-label": "SMTP (25)",
                    "value": "25"
                  },
                  {
                    "display-label": "HTTP (80)",
                    "value": "80"
                  },
                  {
                    "display-label": "POP3 (110)",
                    "value": "110"
                  },
                  {
                    "display-label": "HTTPS (443)",
                    "value": "443"
                  },
                  {
                    "display-label": "MS_SQL (1433)",
                    "value": "1433"
                  },
                  {
                    "display-label": "RDP (3389)",
                    "value": "3389"
                  }
                ]
              },
              "ToPort": {
                "type": "String",
                "required": true,
                "description": "End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard.",
                "allowed-values": [
                  "*",
                  {
                    "display-label": "SSH (22)",
                    "value": "22"
                  },
                  {
                    "display-label": "SMTP (25)",
                    "value": "25"
                  },
                  {
                    "display-label": "HTTP (80)",
                    "value": "80"
                  },
                  {
                    "display-label": "POP3 (110)",
                    "value": "110"
                  },
                  {
                    "display-label": "HTTPS (443)",
                    "value": "443"
                  },
                  {
                    "display-label": "MS_SQL (1433)",
                    "value": "1433"
                  },
                  {
                    "display-label": "RDP (3389)",
                    "value": "3389"
                  }
                ]
              }
            }
          },
          "SecurityGroupEgress": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of EC2 security group egress rules.",
            "properties": {
              "IpProtocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "tcp",
                  "udp",
                  "icmp"
                ],
                "description": "IP protocol name or number."
              },
              "CidrIp": {
                "type": "String",
                "required": false,
                "description": "The CIDR range. If you specify SourceSecurityGroupName, do not specify CidrIp."
              },
              "DestinationSecurityGroupId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Specifies the GroupId of the destination Amazon VPC security group."
              },
              "SourceSecurityGroupName": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Specifies the name of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupName."
              },
              "SourceSecurityGroupId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "For VPC security groups only. Specifies the ID of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupId."
              },
              "SourceSecurityGroupOwnerId": {
                "type": "String",
                "required": false,
                "description": "Specifies the AWS Account ID of the owner of the Amazon EC2 Security Group specified in the SourceSecurityGroupName property.\n\nIf you specify SourceSecurityGroupName and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional."
              },
              "FromPort": {
                "type": "String",
                "required": true,
                "description": "Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard.",
                "allowed-values": [
                  "*",
                  {
                    "display-label": "SSH (22)",
                    "value": "22"
                  },
                  {
                    "display-label": "SMTP (25)",
                    "value": "25"
                  },
                  {
                    "display-label": "HTTP (80)",
                    "value": "80"
                  },
                  {
                    "display-label": "POP3 (110)",
                    "value": "110"
                  },
                  {
                    "display-label": "HTTPS (443)",
                    "value": "443"
                  },
                  {
                    "display-label": "MS_SQL (1433)",
                    "value": "1433"
                  },
                  {
                    "display-label": "RDP (3389)",
                    "value": "3389"
                  }
                ]
              },
              "ToPort": {
                "type": "String",
                "required": true,
                "description": "End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard.",
                "allowed-values": [
                  "*",
                  {
                    "display-label": "SSH (22)",
                    "value": "22"
                  },
                  {
                    "display-label": "SMTP (25)",
                    "value": "25"
                  },
                  {
                    "display-label": "HTTP (80)",
                    "value": "80"
                  },
                  {
                    "display-label": "POP3 (110)",
                    "value": "110"
                  },
                  {
                    "display-label": "HTTPS (443)",
                    "value": "443"
                  },
                  {
                    "display-label": "MS_SQL (1433)",
                    "value": "1433"
                  },
                  {
                    "display-label": "RDP (3389)",
                    "value": "3389"
                  }
                ]
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SecurityGroupEgress": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::SecurityGroupEgress type adds an egress rule to an Amazon VPC security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::SecurityGroupEgress type adds an egress rule to an Amazon VPC security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CidrIp": {
            "type": "String",
            "required": false,
            "description": "The CIDR range. Required: Conditional�cannot be used when specifying a destination security group."
          },
          "DestinationPrefixListId": {
            "type": "String",
            "required": false,
            "description": "The AWS service prefix of an Amazon VPC endpoint."
          },
          "DestinationSecurityGroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "For VPC security groups only. Specifies the ID of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupId."
          },
          "FromPort": {
            "type": "String",
            "required": true,
            "description": "Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard.",
            "allowed-values": [
              "*",
              {
                "display-label": "SSH (22)",
                "value": "22"
              },
              {
                "display-label": "SMTP (25)",
                "value": "25"
              },
              {
                "display-label": "HTTP (80)",
                "value": "80"
              },
              {
                "display-label": "POP3 (110)",
                "value": "110"
              },
              {
                "display-label": "HTTPS (443)",
                "value": "443"
              },
              {
                "display-label": "MS_SQL (1433)",
                "value": "1433"
              },
              {
                "display-label": "RDP (3389)",
                "value": "3389"
              }
            ]
          },
          "GroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": true,
            "description": "ID of the Amazon VPC security group to modify. This value can be a reference to an AWS::EC2::SecurityGroup resource that has a valid VpcId property or the ID of an existing Amazon VPC security group."
          },
          "IpProtocol": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "tcp",
              "udp",
              "icmp"
            ],
            "description": "IP protocol name or number."
          },
          "ToPort": {
            "type": "String",
            "required": true,
            "description": "End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard.",
            "allowed-values": [
              "*",
              {
                "display-label": "SSH (22)",
                "value": "22"
              },
              {
                "display-label": "SMTP (25)",
                "value": "25"
              },
              {
                "display-label": "HTTP (80)",
                "value": "80"
              },
              {
                "display-label": "POP3 (110)",
                "value": "110"
              },
              {
                "display-label": "HTTPS (443)",
                "value": "443"
              },
              {
                "display-label": "MS_SQL (1433)",
                "value": "1433"
              },
              {
                "display-label": "RDP (3389)",
                "value": "3389"
              }
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SecurityGroupIngress": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::SecurityGroupIngress type adds an ingress rule to an Amazon EC2 or VPC security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::SecurityGroupIngress type adds an ingress rule to an Amazon EC2 or VPC security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GroupName": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Name of the EC2 security group to modify. This value can be a reference to an AWS::EC2::SecurityGroup resource or the name of an existing EC2 security group. Required: Can be used instead of GroupId for EC2 security groups."
          },
          "GroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Name of the EC2 security group to modify. This value can be a reference to an AWS::EC2::SecurityGroup resource or the name of an existing EC2 security group. Required: Yes, for VPC security groups; can be used instead of GroupName for EC2 security groups."
          },
          "IpProtocol": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "tcp",
              "udp",
              "icmp"
            ],
            "description": "IP protocol name or number."
          },
          "CidrIp": {
            "type": "String",
            "required": false,
            "description": "The CIDR range. If you specify SourceSecurityGroupName, do not specify CidrIp."
          },
          "SourceSecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Specifies the name of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupName."
          },
          "SourceSecurityGroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "For VPC security groups only. Specifies the ID of the Amazon EC2 Security Group to allow access.  If you specify CidrIp, do not specify SourceSecurityGroupId."
          },
          "SourceSecurityGroupOwnerId": {
            "type": "String",
            "required": false,
            "description": "Specifies the AWS Account ID of the owner of the Amazon EC2 Security Group specified in the SourceSecurityGroupName property.\n\nIf you specify SourceSecurityGroupName and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional."
          },
          "FromPort": {
            "type": "String",
            "required": true,
            "description": "Start of port range for the TCP and UDP protocols, or an ICMP type number. An ICMP type number of -1 indicates a wildcard.",
            "allowed-values": [
              "*",
              {
                "display-label": "SSH (22)",
                "value": "22"
              },
              {
                "display-label": "SMTP (25)",
                "value": "25"
              },
              {
                "display-label": "HTTP (80)",
                "value": "80"
              },
              {
                "display-label": "POP3 (110)",
                "value": "110"
              },
              {
                "display-label": "HTTPS (443)",
                "value": "443"
              },
              {
                "display-label": "MS_SQL (1433)",
                "value": "1433"
              },
              {
                "display-label": "RDP (3389)",
                "value": "3389"
              }
            ]
          },
          "ToPort": {
            "type": "String",
            "required": true,
            "description": "End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP code of -1 indicates a wildcard.",
            "allowed-values": [
              "*",
              {
                "display-label": "SSH (22)",
                "value": "22"
              },
              {
                "display-label": "SMTP (25)",
                "value": "25"
              },
              {
                "display-label": "HTTP (80)",
                "value": "80"
              },
              {
                "display-label": "POP3 (110)",
                "value": "110"
              },
              {
                "display-label": "HTTPS (443)",
                "value": "443"
              },
              {
                "display-label": "MS_SQL (1433)",
                "value": "1433"
              },
              {
                "display-label": "RDP (3389)",
                "value": "3389"
              }
            ]
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SpotFleet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::SpotFleet resource creates a request for a collection of Spot instances.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::SpotFleet resource creates a request for a collection of Spot instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SpotFleetRequestConfigData": {
            "type": "Object",
            "required": true,
            "description": "The configuration for a Spot fleet request.",
            "properties": {
              "AllocationStrategy": {
                "type": "String",
                "required": false,
                "description": "Indicates how to allocate the target capacity across the Spot pools that you specified in the Spot fleet request."
              },
              "ExcessCapacityTerminationPolicy": {
                "type": "String",
                "required": false,
                "description": "Indicates whether running Spot instances are terminated if you decrease the target capacity of the Spot fleet request below the current size of the Spot fleet."
              },
              "IamFleetRole": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants the Spot fleet the ability to bid on, launch, and terminate instances on your behalf."
              },
              "LaunchSpecifications": {
                "type": "Object",
                "required": true,
                "description": "Information about the launch specifications for the Spot fleet request.",
                "properties": {
                  "BlockDeviceMappings": {
                    "array-type": "Object",
                    "type": "Array",
                    "required": false,
                    "description": "Defines a set of Amazon EC2 Elastic Block Store (EBS) block device mappings.",
                    "properties": {
                      "DeviceName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the device within Amazon EC2."
                      },
                      "Ebs": {
                        "type": "Object",
                        "required": false,
                        "description": "The EC2 EBS Block Device. You can specify either VirtualName or Ebs, but not both.",
                        "properties": {
                          "DeleteOnTermination": {
                            "type": "Boolean",
                            "required": false,
                            "description": "Determines whether to delete the volume on instance termination. The default value is \"true\"."
                          },
                          "Iops": {
                            "type": "String",
                            "required": false,
                            "description": "The number of I/O operations per second (IOPS) that the volume supports. This can be an integer from 100 to 2000. Required when the volume type is \"io1\"; not used with standard volumes."
                          },
                          "SnapshotId": {
                            "type": "String",
                            "required": false,
                            "description": "The snapshot ID of the volume to use to create a block device. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                          },
                          "VolumeSize": {
                            "type": "String",
                            "required": false,
                            "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10. If you specify both SnapshotId and VolumeSize, VolumeSize must be equal or greater than the size of the snapshot."
                          },
                          "VolumeType": {
                            "type": "String",
                            "required": false,
                            "allowed-values": [
                              "*",
                              "standard",
                              "io1",
                              "gp2"
                            ],
                            "description": "The volume size, in gibibytes (GiB). This can be a number from 1 to 1024. If the volume type is \"io1\", the minimum value is 10."
                          }
                        }
                      },
                      "NoDevice": {
                        "type": "Object",
                        "required": false,
                        "description": "This is set to empty map (\"{}\") that be used to unmap a defined device.",
                        "properties": {}
                      },
                      "VirtualName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the virtual device. The name must be in the form ephemeralX where X is a number starting from zero (0); for example, ephemeral0. You can specify either VirtualName or Ebs, but not both."
                      }
                    }
                  },
                  "EbsOptimized": {
                    "type": "Boolean",
                    "required": false,
                    "description": "This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance."
                  },
                  "IamInstanceProfile": {
                    "type": "String",
                    "resource-ref-type": "AWS::IAM::InstanceProfile",
                    "required": false,
                    "description": "A reference to an AWS::IAM::InstanceProfile type"
                  },
                  "ImageId": {
                    "type": "String",
                    "required": true,
                    "description": "Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration."
                  },
                  "InstanceType": {
                    "type": "String",
                    "required": true,
                    "description": "The instance type. For example, \"m1.small\".",
                    "allowed-values": [
                      "*",
                      "t1.micro",
                      "t2.nano",
                      "t2.micro",
                      "t2.small",
                      "t2.medium",
                      "t2.large",
                      "m1.small",
                      "m1.medium",
                      "m1.large",
                      "m1.xlarge",
                      "m2.xlarge",
                      "m2.2xlarge",
                      "m2.4xlarge",
                      "m3.medium",
                      "m3.large",
                      "m3.xlarge",
                      "m3.2xlarge",
                      "m4.large",
                      "m4.xlarge",
                      "m4.2xlarge",
                      "m4.4xlarge",
                      "m4.10xlarge",
                      "m4.16xlarge",
                      "c1.medium",
                      "c1.xlarge",
                      "cr1.8xlarge",
                      "c3.large",
                      "c3.xlarge",
                      "c3.2xlarge",
                      "c3.4xlarge",
                      "c3.8xlarge",
                      "c4.large",
                      "c4.xlarge",
                      "c4.2xlarge",
                      "c4.4xlarge",
                      "c4.8xlarge",
                      "cc1.4xlarge",
                      "cc2.8xlarge",
                      "cg1.4xlarge",
                      "d2.xlarge",
                      "d2.2xlarge",
                      "d2.4xlarge",
                      "d2.8xlarge",
                      "g2.2xlarge",
                      "g2.8xlarge",
                      "hi1.4xlarge",
                      "hs1.8xlarge",
                      "i2.xlarge",
                      "i2.2xlarge",
                      "i2.4xlarge",
                      "i2.8xlarge",
                      "p2.xlarge",
                      "p2.8xlarge",
                      "p2.16xlarge",
                      "r3.large",
                      "r3.xlarge",
                      "r3.2xlarge",
                      "r3.4xlarge",
                      "r3.8xlarge",
                      "x1.32xlarge"
                    ]
                  },
                  "KernelId": {
                    "type": "String",
                    "required": false,
                    "description": "The kernel ID"
                  },
                  "KeyName": {
                    "type": "String",
                    "required": false,
                    "description": "Provides the name of the EC2 key pair."
                  },
                  "Monitoring": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Specifies whether monitoring is enabled for the instance."
                  },
                  "NetworkInterfaces": {
                    "type": "Array",
                    "array-type": "Object",
                    "properties": {
                      "AssociatePublicIpAddress": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether the network interface receives a public IP address. You can associate a public IP address with a network interface only if it has a device index of eth0."
                      },
                      "DeleteOnTermination": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Determines whether to delete the network interface on instance termination."
                      },
                      "Description": {
                        "type": "String",
                        "required": false,
                        "description": "The description of this network interface."
                      },
                      "DeviceIndex": {
                        "type": "String",
                        "required": true,
                        "description": "The order in which the network interface should be attached."
                      },
                      "GroupSet": {
                        "type": "Array",
                        "array-type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::EC2::SecurityGroup",
                        "description": "A list of security group IDs associated with this network interface."
                      },
                      "NetworkInterfaceId": {
                        "type": "String",
                        "resource-ref-type": "AWS::EC2::NetworkInterface",
                        "required": true,
                        "description": "The ID of the network interface to attach."
                      },
                      "PrivateIpAddress": {
                        "type": "String",
                        "required": false,
                        "description": "Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property."
                      },
                      "PrivateIpAddresses": {
                        "type": "Array",
                        "array-type": "Object",
                        "required": false,
                        "description": "Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property.",
                        "properties": {
                          "PrivateIpAddress": {
                            "type": "String",
                            "required": true,
                            "description": "The private IP address of the network interface."
                          },
                          "Primary": {
                            "type": "Boolean",
                            "required": true,
                            "description": "Sets the private IP address as the primary private address. You can set only one primary private IP address."
                          }
                        }
                      },
                      "SecondaryPrivateIpAddressCount": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of secondary private IP addresses that Amazon EC2 auto assigns to the network interface. Amazon EC2 uses the value of the PrivateIpAddress property as the primary private IP address."
                      },
                      "SubnetId": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::EC2::Subnet",
                        "description": "The ID of the subnet to associate with the network interface."
                      }
                    },
                    "required": false,
                    "description": "A list of network interfaces to associate with this instance."
                  },
                  "Placement": {
                    "type": "Object",
                    "required": false,
                    "description": "The name of an existing placement group that you want to launch the instance into (for cluster instances).",
                    "properties": {
                      "AvailabilityZone": {
                        "type": "String",
                        "required": false,
                        "description": "The Availability Zone (AZ) of the placement group."
                      },
                      "GroupName": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the placement group (for cluster instances)."
                      }
                    }
                  },
                  "RamdiskId": {
                    "type": "String",
                    "required": false,
                    "description": "The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID."
                  },
                  "SecurityGroupIds": {
                    "type": "Array",
                    "array-type": "String",
                    "resource-ref-type": "AWS::EC2::SecurityGroup",
                    "required": false,
                    "description": "A list that contains the security group IDs for VPC security groups to assign to the Amazon EC2 instance."
                  },
                  "SpotPrice": {
                    "type": "String",
                    "required": false,
                    "description": "The bid price per unit hour for the specified instance type."
                  },
                  "SubnetId": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::EC2::Subnet",
                    "description": "If you're using Amazon Virtual Private Cloud, this specifies the ID of the subnet that you want to launch the instance into."
                  },
                  "UserData": {
                    "type": "String",
                    "required": false,
                    "description": "Base64-encoded MIME user data that is made available to the instances."
                  },
                  "WeightedCapacity": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of units provided by the specified instance type."
                  }
                }
              },
              "SpotPrice": {
                "type": "String",
                "required": true,
                "description": "The bid price per unit hour."
              },
              "TargetCapacity": {
                "type": "Number",
                "required": true,
                "description": "The number of units to request."
              },
              "TerminateInstancesWithExpiration": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether running Spot instances are terminated when the Spot fleet request expires."
              },
              "ValidFrom": {
                "type": "String",
                "required": false,
                "description": "The start date and time of the request."
              },
              "ValidUntil": {
                "type": "String",
                "required": false,
                "description": "The end date and time of the request"
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Subnet": {
    "type": "Object",
    "required": false,
    "description": "Creates a subnet in an existing VPC.",
    "return-values": [
      {
        "name": "AvailabilityZone",
        "description": "Returns the availability zone (for example, \"us-east-1a\") of this subnet."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a subnet in an existing VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The availability zone you want the subnet in. Default: AWS selects a zone for you (recommended)."
          },
          "CidrBlock": {
            "type": "String",
            "required": true,
            "description": "The CIDR block you want the subnet to cover (for example, \"10.0.0.0/24\")."
          },
          "MapPublicIpOnLaunch": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether instances that are launched in this subnet receive a public IP address. By default, the value is false."
          },
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "A Ref structure containing the ID of the VPC where you want to create the subnet. The VPC ID is provided as the value of the \"Ref\" property, as: { \"Ref\": \"VPCID\" }."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SubnetNetworkAclAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associates a subnet with a network ACL.",
    "return-values": [
      {
        "name": "AssociationId",
        "description": "Returns the value of this object's SubnetId property."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associates a subnet with a network ACL."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "SubnetId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The ID representing the current association between the original network ACL and the subnet."
          },
          "NetworkAclId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::NetworkAcl",
            "required": true,
            "description": "The ID of the new ACL to associate with the subnet."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::SubnetRouteTableAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associates a subnet with a route table.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associates a subnet with a route table."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RouteTableId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::RouteTable",
            "required": true,
            "description": "The ID of the route table. This is commonly written as a reference to a route table declared elsewhere in the template. For example:"
          },
          "SubnetId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The ID of the subnet. This is commonly written as a reference to a subnet declared elsewhere in the template."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::Volume": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EC2::Volume type creates a new Elastic Block Store volume. You can set a deletion policy for your volume to control how AWS CloudFormation handles the volume when the stack is deleted. For Elastic Block Store volumes, you can choose to retain the volume, to delete the volume, or to create a snapshot of the volume.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EC2::Volume type creates a new Elastic Block Store volume. You can set a deletion policy for your volume to control how AWS CloudFormation handles the volume when the stack is deleted. For Elastic Block Store volumes, you can choose to retain the volume, to delete the volume, or to create a snapshot of the volume."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain",
          "Snapshot"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoEnableIO": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the volume is auto-enabled for I/O operations."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": true,
            "description": "The Availability Zone in which to create the new volume.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "Encrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the volume is encrypted. Encrypted Amazon EBS volumes can only be attached to instance types that support Amazon EBS encryption."
          },
          "Iops": {
            "type": "Number",
            "required": false,
            "description": "The number of I/O operations per second (IOPS) that the volume supports. This can be any value from 1-1000. Required: Conditional. Required when the volume type is \"io1\"; not used with standard volumes."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to create the encrypted volume."
          },
          "Size": {
            "type": "String",
            "required": false,
            "description": "The size of the volume, in gibibytes (GiBs). This can be any value from 1�1024. Required: Conditional. Required if you are not creating a volume from a snapshot. If you specify Size, do not specify SnapshotId."
          },
          "SnapshotId": {
            "type": "String",
            "required": false,
            "description": "The snapshot from which to create the new volume. Required: Conditional. Required if you are creating a volume from a snapshot. If you do not specify a value for SnapshotId, you should specify a value for Size."
          },
          "VolumeType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "standard",
              "io1",
              "gp2"
            ],
            "description": "The volume type. This can be either \"standard\" or \"io1\". If no value is specified, \"standard\" will be used."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      }
    }
  }
,
  "AWS::EC2::VolumeAttachment": {
    "type": "Object",
    "required": false,
    "description": "Attaches a volume to an EC2 instance.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new route table within a VPC. After you create a new route table, you can add routes and associate the table with a subnet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Device": {
            "type": "String",
            "required": true,
            "description": "How the device is exposed to the instance (e.g., /dev/sdh, or xvdh)."
          },
          "InstanceId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Instance",
            "required": true,
            "description": "The ID of the instance to which the volume attaches. This value can be a reference to an AWS::EC2::Instance resource, or it can be the instance ID of an existing EC2 instance."
          },
          "VolumeId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Volume",
            "required": true,
            "description": "The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone. This value can be a reference to an AWS::EC2::Volume resource, or it can be the volume ID of an existing Amazon EBS volume."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPC": {
    "type": "Object",
    "required": false,
    "description": "Creates a Virtual Private Cloud (VPC) with the CIDR block that you specify.",
    "return-values": [
      {
        "name": "DefaultNetworkAcl",
        "description": "The default network ACL ID that is associated with the VPC, which AWS creates when you create a VPC."
      },
      {
        "name": "DefaultSecurityGroup",
        "description": "The default security group ID that is associated with the VPC, which AWS creates when you create a VPC."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a Virtual Private Cloud (VPC) with the CIDR block that you specify."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CidrBlock": {
            "type": "String",
            "required": true,
            "description": "The CIDR block you want the VPC to cover. For example: \"10.0.0.0/16\"."
          },
          "EnableDnsSupport": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether DNS resolution is supported for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not. By default the value is set to true."
          },
          "EnableDnsHostnames": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not. You can only set EnableDnsHostnames to true if you also set the EnableDnsSupport attribute to true. By default, the value is set to false."
          },
          "InstanceTenancy": {
            "type": "Number",
            "allowed-values": [
              "default",
              "dedicated"
            ],
            "required": false,
            "description": "The allowed tenancy of instances launched into the VPC. A value of \"default\" means instances can be launched with any tenancy; a value of \"dedicated\" means instances must be launched with tenancy as dedicated."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCDHCPOptionsAssociation": {
    "type": "Object",
    "required": false,
    "description": "Associates a set of DHCP options (that you've previously created) with the specified VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Associates a set of DHCP options (that you've previously created) with the specified VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "The ID of the VPC to associate with this DHCP options set."
          },
          "DhcpOptionsId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::DHCPOptions",
            "required": true,
            "description": "The ID of the DHCP options you want to associate with the VPC, or \"default\" if you want the VPC to use no DHCP options."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCEndpoint": {
    "type": "Object",
    "required": false,
    "description": "Creates a VPC endpoint that you can use to establish a private connection between your VPC and another AWS service without requiring access over the Internet, a VPN connection, or AWS Direct Connect.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a VPC endpoint that you can use to establish a private connection between your VPC and another AWS service without requiring access over the Internet, a VPN connection, or AWS Direct Connect."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Json",
            "required": false,
            "description": "A policy to attach to the endpoint that controls access to the service."
          },
          "RouteTableIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::RouteTable",
            "description": "One or more route table IDs that are used by the VPC to reach the endpoint."
          },
          "ServiceName": {
            "type": "String",
            "required": true,
            "description": "The AWS service to which you want to establish a connection. Specify the service name in the form of com.amazonaws.region.service."
          },
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "The ID of the VPC in which the endpoint is used."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCGatewayAttachment": {
    "type": "Object",
    "required": false,
    "description": "Attaches a gateway to a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Attaches a gateway to a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": true,
            "description": "The ID of the VPC to associate with this gateway."
          },
          "InternetGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::InternetGateway",
            "required": true,
            "description": "The ID of the Internet gateway. Required: Conditional. You must specify either InternetGatewayId or VpnGatewayId, but not both."
          },
          "VpnGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPNGateway",
            "required": true,
            "description": "The ID of the virtual private network (VPN) gateway to attach to the VPC. Required: Conditional. You must specify either InternetGatewayId or VpnGatewayId, but not both."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPCPeeringConnection": {
    "type": "Object",
    "required": false,
    "description": "A VPC peering connection enables a network connection between two virtual private clouds (VPCs) so that you can route traffic between them by means of a private IP addresses.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "A VPC peering connection enables a network connection between two virtual private clouds (VPCs) so that you can route traffic between them by means of a private IP addresses."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PeerVpcId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC with which you are creating the peering connection."
          },
          "VpcId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC that is requesting a peering connection."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPNConnection": {
    "type": "Object",
    "required": false,
    "description": "Creates a new VPN connection between an existing virtual private gateway and a VPN customer gateway.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new VPN connection between an existing virtual private gateway and a VPN customer gateway."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of VPN connection this virtual private gateway supports. Example: \"ipsec.1\""
          },
          "CustomerGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::CustomerGateway",
            "required": true,
            "description": "The ID of the customer gateway. This can either be an embedded JSON object or a reference to a Gateway ID."
          },
          "StaticRoutesOnly": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the VPN connection requires static routes."
          },
          "VpnGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPNGateway",
            "required": true,
            "description": "The ID of the virtual private gateway. This can either be an embedded JSON object or a reference to a Gateway ID."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPNConnectionRoute": {
    "type": "Object",
    "required": false,
    "description": "A static route that is associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "A static route that is associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DestinationCidrBlock": {
            "type": "DestinationCidrBlock",
            "required": true,
            "description": "The CIDR block that is associated with the local subnet of the customer network."
          },
          "VpnConnectionId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPNConnection",
            "required": true,
            "description": "The ID of the VPN connection."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPNGateway": {
    "type": "Object",
    "required": false,
    "description": "Creates a new virtual private gateway. A virtual private gateway is the VPC-side endpoint for your VPN connection.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a new virtual private gateway. A virtual private gateway is the VPC-side endpoint for your VPN connection."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of VPN connection this customer gateway supports.  For example: ipsec.1",
            "allowed-values": [
              "ipsec.1"
            ]
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EC2::VPNGatewayRoutePropagation": {
    "type": "Object",
    "required": false,
    "description": "Enables a virtual private gateway (VGW) to propagate routes to the routing tables of a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Enables a virtual private gateway (VGW) to propagate routes to the routing tables of a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RouteTableIds": {
            "type": "Array",
            "array-type": "Object",
            "resource-ref-type": "AWS::EC2::RouteTable",
            "required": false,
            "description": "A list of routing table IDs that are associated with a VPC. The routing tables must be associated with the same VPC that the virtual private gateway is attached to."
          },
          "VpnGatewayId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPNGateway",
            "required": true,
            "description": "The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ECR::Repository": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ECR::Repository resource creates an Amazon EC2 Container Registry (Amazon ECR) repository, where users can push and pull Docker images.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ECR::Repository resource creates an Amazon EC2 Container Registry (Amazon ECR) repository, where users can push and pull Docker images."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RepositoryName": {
            "type": "String",
            "required": false,
            "description": "A name for the image repository."
          },
          "RepositoryPolicyText": {
            "type": "Json",
            "required": false,
            "description": "A policy that controls who has access to the repository and which actions they can perform on it."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ECS::Cluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ECS::Cluster resource creates an Amazon EC2 Container Service (Amazon ECS) cluster. ",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ECS::Cluster resource creates an Amazon EC2 Container Service (Amazon ECS) cluster. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ClusterName": {
            "type": "String",
            "required": false,
            "description": "A name for the cluster."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ECS::Service": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ECS::Service resource creates an Amazon EC2 Container Service (Amazon ECS) service that runs and maintains the desired number of tasks and associated load balancers.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ECS::Service resource creates an Amazon EC2 Container Service (Amazon ECS) service that runs and maintains the desired number of tasks and associated load balancers."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Cluster": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ECS::Cluster",
            "description": "The name or Amazon Resource Name (ARN) of the cluster that you want to run your service on. If you do not specify a cluster, Amazon ECS uses the default cluster."
          },
          "DeploymentConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configures how many tasks run during a deployment.",
            "properties": {
              "MaximumPercent": {
                "type": "Number",
                "required": false,
                "description": "The maximum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that can run in a service during a deployment."
              },
              "MinimumHealthyPercent": {
                "type": "Number",
                "required": false,
                "description": "The minimum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that must continue to run and remain healthy during a deployment."
              }
            }
          },
          "DesiredCount": {
            "type": "Number",
            "required": false,
            "description": "The number of simultaneous tasks, which you specify by using the TaskDefinition property, that you want to run on the cluster."
          },
          "LoadBalancers": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of load balancer objects to associate with the cluster.",
            "properties": {
              "ContainerName": {
                "type": "String",
                "required": false,
                "description": "The name of a container to use with the load balancer."
              },
              "ContainerPort": {
                "type": "Number",
                "required": false,
                "description": "The port number on the container to direct load balancer traffic to. Your container instances must allow ingress traffic on this port."
              },
              "LoadBalancerName": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ElasticLoadBalancing::LoadBalancer",
                "description": "The name of the load balancer to associated with the Amazon ECS service."
              },
              "TargetGroupArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                "description": "An Application load balancer target group Amazon Resource Name (ARN) to associate with the Amazon ECS service."
              }
            }
          },
          "Role": {
            "type": "String",
            "resource-ref-type": "AWS::IAM::Role",
            "required": false,
            "description": "The name or ARN of an AWS Identity and Access Management (IAM) role that allows your Amazon ECS container agent to make calls to your load balancer."
          },
          "TaskDefinition": {
            "type": "String",
            "resource-ref-type": "AWS::ECS::TaskDefinition",
            "required": true,
            "description": "The ARN of the task definition that you want to run on the cluster."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ECS::TaskDefinition": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ECS::TaskDefinition resource describes the container and volume definitions of an Amazon EC2 Container Service (Amazon ECS) task.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ECS::TaskDefinition resource describes the container and volume definitions of an Amazon EC2 Container Service (Amazon ECS) task."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ContainerDefinitions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of container definitions in JSON format that describe the containers that make up your task.",
            "properties": {
              "Command": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The CMD value to pass to the container."
              },
              "Cpu": {
                "type": "Number",
                "required": false,
                "description": "The minimum number of CPU units to reserve for the container."
              },
              "DisableNetworking": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether networking is disabled within the container."
              },
              "DnsSearchDomains": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of DNS search domains that are provided to the container."
              },
              "DnsServers": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of DNS servers that Amazon ECS provides to the container."
              },
              "DockerLabels": {
                "type": "String",
                "required": "Json",
                "description": "A key-value map of labels for the container."
              },
              "DockerSecurityOptions": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of custom labels for SELinux and AppArmor multi-level security systems."
              },
              "EntryPoint": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The ENTRYPOINT value to pass to the container."
              },
              "Environment": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The environment variables to pass to the container.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the environment variable."
                  },
                  "Host": {
                    "type": "String",
                    "required": true,
                    "description": "The value of the environment variable."
                  }
                }
              },
              "Essential": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the task stops if this container fails."
              },
              "Hostname": {
                "type": "String",
                "required": false,
                "description": "The name that Docker will use for the container's hostname."
              },
              "Image": {
                "type": "String",
                "required": true,
                "description": "The image to use for a container, which is passed directly to the Docker daemon."
              },
              "Links": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The name of another container to connect to. With links, containers can communicate with each other without using port mappings."
              },
              "LogConfiguration": {
                "type": "Object",
                "required": false,
                "description": "Configures a custom log driver for the container.",
                "properties": {
                  "LogDriver": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "*",
                      "json-file",
                      "syslog",
                      "journald",
                      "gelf",
                      "fluentd",
                      "awslogs",
                      "splunk"
                    ],
                    "description": "The log driver to use for the container."
                  },
                  "Options": {
                    "type": "Json",
                    "required": true,
                    "description": "The configuration options to send to the log driver."
                  }
                }
              },
              "Memory": {
                "type": "Number",
                "required": true,
                "description": "The number of MiB of memory to reserve for the container. If your container attempts to exceed the allocated memory, the container is killed."
              },
              "MountPoints": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "The mount points for data volumes in the container.",
                "properties": {
                  "ContainerPath": {
                    "type": "String",
                    "required": true,
                    "description": "The path on the container that indicates where you want to mount the volume."
                  },
                  "SourceVolume": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the volume to mount."
                  },
                  "ReadOnly": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the container can write to the volume."
                  }
                }
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "A name for the container."
              },
              "PortMappings": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A mapping of the container port to a host port. Port mappings enable containers to access ports on the host container instance to send or receive traffic.",
                "properties": {
                  "ContainerPort": {
                    "type": "Number",
                    "required": true,
                    "description": "The port number on the container that is bound to the host port."
                  },
                  "HostPort": {
                    "type": "Number",
                    "required": true,
                    "description": "The host port number on the container instance that you want to reserve for your container. "
                  }
                }
              },
              "Privileged": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the container is given full access to the host container instance."
              },
              "ReadonlyRootFilesystem": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the container's root file system is mounted as read only."
              },
              "Ulimits": {
                "type": "String",
                "array-type": "Object",
                "required": false,
                "description": "Indicates whether the container's root file system is mounted as read only.",
                "properties": {
                  "HardLimit": {
                    "type": "Number",
                    "required": true,
                    "description": "The hard limit for the ulimit type."
                  },
                  "Name": {
                    "type": "String",
                    "required": true,
                    "allowed-values": [
                      "*",
                      "core",
                      "cpu",
                      "data",
                      "fsize",
                      "locks",
                      "memlock",
                      "msgqueue",
                      "nice",
                      "nofile",
                      "nproc",
                      "rss",
                      "rtprio",
                      "rttime",
                      "sigpending",
                      "stack"
                    ],
                    "description": "The type of ulimit."
                  },
                  "SoftLimit": {
                    "type": "Number",
                    "required": true,
                    "description": "The soft limit for the ulimit type."
                  }
                }
              },
              "User": {
                "type": "String",
                "required": false,
                "description": "The user name to use inside the container."
              },
              "VolumesFrom": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Data volumes to mount from another container.",
                "properties": {
                  "SourceContainer": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the container that has the volumes to mount."
                  },
                  "HostPort": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether the container can write to the volume."
                  }
                }
              },
              "WorkingDirectory": {
                "type": "String",
                "required": false,
                "description": "The working directory in the container in which to run commands."
              }
            }
          },
          "Family": {
            "type": "String",
            "required": true,
            "description": "The name of a family that this task definition is registered to."
          },
          "TaskRoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
          },
          "Volumes": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "A list of volume definitions in JSON format for volumes that you can use in your container definitions.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "The name of the volume. To specify mount points in your container definitions, use the value of this property."
              },
              "Host": {
                "type": "String",
                "required": false,
                "description": "Determines whether your data volume persists on the host container instance and at the location where it is stored."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EFS::FileSystem": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EFS::FileSystem resource creates a new, empty file system in Amazon Elastic File System (Amazon EFS).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EFS::FileSystem resource creates a new, empty file system in Amazon Elastic File System (Amazon EFS)."
      },
      "Properties": {
        "type": "Object",
        "required": false,
        "properties": {
          "PerformanceMode": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "generalPurpose",
              "maxIO"
            ],
            "description": "The performance mode of the file system."
          },
          "FileSystemTags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EFS::MountTarget": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EFS::MountTarget resource creates a mount target for an Amazon Elastic File System (Amazon EFS) file system (AWS::EFS::FileSystem).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EFS::MountTarget resource creates a mount target for an Amazon Elastic File System (Amazon EFS) file system (AWS::EFS::FileSystem)."
      },
      "Properties": {
        "type": "Object",
        "required": false,
        "properties": {
          "FileSystemId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EFS::FileSystem",
            "description": "The ID of the file system for which you want to create the mount target."
          },
          "IpAddress": {
            "type": "String",
            "required": false,
            "description": "An IPv4 address that is within the address range of the subnet that is specified in the SubnetId property."
          },
          "SecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "A maximum of five VPC security group IDs that are in the same VPC as the subnet that is specified in the SubnetId property."
          },
          "SubnetId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The ID of the subnet in which you want to add the mount target."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::CacheCluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::CacheCluster type creates an Amazon ElastiCache cache cluster.",
    "return-values": [
      {
        "name": "ConfigurationEndpoint.Address",
        "description": "The DNS address of the configuration endpoint for the Memcached cache cluster."
      },
      {
        "name": "ConfigurationEndpoint.Port",
        "description": "The port number of the configuration endpoint for the Memcached cache cluster."
      },
      {
        "name": "RedisEndpoint.Address",
        "description": "The DNS address of the configuration endpoint for the Redis cache cluster."
      },
      {
        "name": "RedisEndpoint.Port",
        "description": "The port number of the configuration endpoint for the Redis cache cluster."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::CacheCluster type creates an Amazon ElastiCache cache cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates that minor engine upgrades will be applied automatically to the cache cluster during the maintenance window."
          },
          "AZMode": {
            "type": "String",
            "required": false,
            "description": "For Memcached cache clusters, indicates whether the nodes are created in a single Availability Zone or across multiple Availability Zones in the cluster's region."
          },
          "CacheNodeType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "cache.t2.micro",
              "cache.t2.small",
              "cache.t2.medium",
              "cache.t1.micro",
              "cache.m1.medium",
              "cache.m1.large",
              "cache.m1.xlarge",
              "cache.m3.medium",
              "cache.m3.large",
              "cache.m3.xlarge",
              "cache.m3.2xlarge",
              "cache.m1.small",
              "cache.m1.large",
              "cache.m1.xlarge",
              "cache.m2.xlarge",
              "cache.m2.2xlarge",
              "cache.m2.4xlarge",
              "cache.c1.xlarge",
              "cache.r3.large",
              "cache.r3.xlarge",
              "cache.r3.2xlarge",
              "cache.r3.4xlarge",
              "cache.r3.8xlarge",
              "cache.m4.large",
              "cache.m4.xlarge",
              "cache.m4.2xlarge",
              "cache.m4.4xlarge",
              "cache.m4.10xlarge"
            ],
            "description": "The compute and memory capacity of nodes in a cache cluster."
          },
          "CacheParameterGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::ElastiCache::ParameterGroup",
            "required": false,
            "description": "The name of the cache parameter group associated with this cache cluster."
          },
          "CacheSecurityGroupNames": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::ElastiCache::SecurityGroup",
            "required": false,
            "description": "A list of cache security group names associated with this cache cluster."
          },
          "CacheSubnetGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::ElastiCache::SubnetGroup",
            "required": false,
            "description": "The cache subnet group that you associate with a cache cluster."
          },
          "ClusterName": {
            "type": "String",
            "required": false,
            "description": "A name for the cache cluster. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the cache cluster."
          },
          "Engine": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "memcached",
              "redis"
            ],
            "description": "The name of the cache engine to be used for this cache cluster."
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The version of the cache engine to be used for this cluster."
          },
          "NotificationTopicArn": {
            "type": "String",
            "resource-ref-type": "AWS::SNS::Topic",
            "required": false,
            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications will be sent."
          },
          "NumCacheNodes": {
            "type": "String",
            "required": false,
            "description": "The number of cache nodes the cache cluster should have."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which each of the cache nodes will accept connections."
          },
          "PreferredAvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The EC2 Availability Zone that the cache cluster will be created in.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range (in UTC) during which system maintenance can occur. Example: sun:05:00-sun:09:00"
          },
          "SnapshotArns": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file will be used to populate the Redis cache in the new cache cluster. The Amazon S3 object name in the ARN cannot contain any commas."
          },
          "SnapshotName": {
            "type": "String",
            "required": false,
            "description": "The name of a snapshot from which to restore data into a new Redis cache cluster."
          },
          "SnapshotRetentionLimit": {
            "type": "Number",
            "required": false,
            "description": "For Redis cache clusters, the number of days for which ElastiCache retains automatic snapshots before deleting them."
          },
          "SnapshotWindow": {
            "type": "String",
            "required": false,
            "description": "For Redis cache clusters, the daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your node group. For example, you can specify 05:00-09:00."
          },
          "VpcSecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "One or more VPC security groups associated with the cache cluster."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::ParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::ParameterGroup type creates a new cache parameter group. Cache parameter groups control the parameters for a cache cluster.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::ParameterGroup type creates a new cache parameter group. Cache parameter groups control the parameters for a cache cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CacheParameterGroupFamily": {
            "type": "String",
            "required": true,
            "description": "The name of the cache parameter group family that the cache parameter group can be used with."
          },
          "Description": {
            "type": "String",
            "required": true,
            "description": "The description for the Cache Parameter Group."
          },
          "Properties": {
            "type": "String",
            "required": false,
            "description": "A comma-delimited list of parameter name/value pairs."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::ReplicationGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::ReplicationGroup resource creates an Amazon ElastiCache replication group.",
    "return-values": [
      {
        "name": "PrimaryEndPoint.Address",
        "description": "The DNS address of the primary read-write cache node."
      },
      {
        "name": "PrimaryEndPoint.Port",
        "description": "The number of the port that the primary read-write cache engine is listening on."
      },
      {
        "name": "ReadEndPoint.Addresses",
        "description": "A string with a list of endpoints for the read-only replicas. The order of the addresses map to the order of the ports from the ReadEndPoint.Ports attribute."
      },
      {
        "name": "ReadEndPoint.Ports",
        "description": "A string with a list of ports for the read-only replicas. The order of the ports map to the order of the addresses from the ReadEndPoint.Addresses attribute."
      },
      {
        "name": "ReadEndPoint.Addresses.List",
        "description": "A list of endpoints for the read-only replicas. The order of the addresses map to the order of the ports from the ReadEndPoint.Ports.List attribute."
      },
      {
        "name": "ReadEndPoint.Ports.List",
        "description": "A list of ports for the read-only replicas. The order of the ports map to the order of the addresses from the ReadEndPoint.Addresses.List attribute."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::ReplicationGroup resource creates an Amazon ElastiCache replication group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AutomaticFailoverEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Multi-AZ is enabled."
          },
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Currently, this property isn't used by ElastiCache."
          },
          "CacheNodeType": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "cache.t2.micro",
              "cache.t2.small",
              "cache.t2.medium",
              "cache.t1.micro",
              "cache.m1.medium",
              "cache.m1.large",
              "cache.m1.xlarge",
              "cache.m3.medium",
              "cache.m3.large",
              "cache.m3.xlarge",
              "cache.m3.2xlarge",
              "cache.m1.small",
              "cache.m1.large",
              "cache.m1.xlarge",
              "cache.m2.xlarge",
              "cache.m2.2xlarge",
              "cache.m2.4xlarge",
              "cache.c1.xlarge",
              "cache.r3.large",
              "cache.r3.xlarge",
              "cache.r3.2xlarge",
              "cache.r3.4xlarge",
              "cache.r3.8xlarge",
              "cache.m4.large",
              "cache.m4.xlarge",
              "cache.m4.2xlarge",
              "cache.m4.4xlarge",
              "cache.m4.10xlarge"
            ],
            "description": "The compute and memory capacity of nodes in the node group."
          },
          "CacheParameterGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElastiCache::ParameterGroup",
            "description": "The name of the parameter group to associate with this replication group."
          },
          "CacheSecurityGroupNames": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElastiCache::SecurityGroup",
            "description": "A list of cache security group names to associate with this replication group."
          },
          "CacheSubnetGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElastiCache::SubnetGroup",
            "description": "The name of a cache subnet group to use for this replication group."
          },
          "Engine": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "redis"
            ],
            "description": "The name of the cache engine to use for the cache clusters in this replication group. "
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The version number of the cache engine to use for the cache clusters in this replication group."
          },
          "NodeGroupConfiguration": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Configuration options for the node group (shard).",
            "properties": {
              "PrimaryAvailabilityZone": {
                "type": "String",
                "required": false,
                "description": "The Availability Zone where ElastiCache launches the node group's primary node.",
                "allowed-values": [
                  "us-east-1b",
                  "us-east-1c",
                  "us-east-1d",
                  "us-east-1e",
                  "us-west-1b",
                  "us-west-1c",
                  "us-west-2a",
                  "us-west-2b",
                  "us-west-2c",
                  "ap-northeast-1a",
                  "ap-northeast-1c",
                  "ap-northeast-2a",
                  "ap-northeast-2c",
                  "ap-south-1a",
                  "ap-south-1b",
                  "ap-southeast-1a",
                  "ap-southeast-1b",
                  "ap-southeast-2a",
                  "ap-southeast-2b",
                  "ap-southeast-2c",
                  "sa-east-1a",
                  "sa-east-1b",
                  "sa-east-1c",
                  "eu-west-1a",
                  "eu-west-1b",
                  "eu-west-1c",
                  "eu-central-1a",
                  "eu-central-1b"
                ]
              },
              "ReplicaAvailabilityZones": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of Availability Zones where ElastiCache launches the read replicas."
              },
              "ReplicaCount": {
                "type": "Number",
                "required": false,
                "description": "The number of read replica nodes in the node group."
              },
              "Slots": {
                "type": "String",
                "required": false,
                "description": "A string of comma-separated values where the first set of values are the slot numbers (zero based), and the second set of values are the keyspaces for each slot."
              }
            }
          },
          "NotificationTopicArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications will be sent."
          },
          "NumCacheClusters": {
            "type": "Number",
            "required": true,
            "description": "The number of cache clusters this replication group will initially have. If Multi-AZ is enabled, the value of this parameter must be at least 2."
          },
          "NumNodeGroups": {
            "type": "Number",
            "required": true,
            "description": "The number of node groups (shards) for this Redis (clustered mode enabled) replication group. For Redis (clustered mode disabled), omit this property."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which each member of the replication group accepts connections."
          },
          "PreferredCacheClusterAZs": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of Availability Zones (AZs) in which the cache clusters in this replication group are created.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range during which system maintenance can occur. Use the following format to specify a time range: ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). For example, you can specify sun:22:00-sun:23:30 for Sunday from 10 PM to 11:30 PM."
          },
          "PrimaryClusterId": {
            "type": "String",
            "required": false,
            "description": "The cache cluster that ElastiCache uses as the primary cluster for the replication group. The cache cluster must have a status of available."
          },
          "ReplicasPerNodeGroup": {
            "type": "Number",
            "required": false,
            "description": "The number of replica nodes in each node group (shard)."
          },
          "ReplicationGroupDescription": {
            "type": "String",
            "required": true,
            "description": "The description of the replication group."
          },
          "ReplicationGroupId": {
            "type": "String",
            "required": false,
            "description": "An ID for the replication group."
          },
          "SecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "A list of Amazon Virtual Private Cloud (Amazon VPC) security groups to associate with this replication group. Use this property only when you are creating a replication group in a VPC. If you specify the CacheSecurityGroupNames property, do not specify this property; you can specify only one."
          },
          "SnapshotArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A single-element string list that specifies an ARN of a Redis .rdb snapshot file that is stored in Amazon Simple Storage Service (Amazon S3). The snapshot file populates the node group. The Amazon S3 object name in the ARN cannot contain commas. For example, you can specify arn:aws:s3:::my_bucket/snapshot1.rdb."
          },
          "SnapshotRetentionLimit": {
            "type": "Number",
            "required": false,
            "description": "The number of days that ElastiCache retains automatic snapshots before deleting them."
          },
          "SnapshottingClusterId": {
            "type": "String",
            "required": false,
            "description": "The ID of the cache cluster that ElastiCache uses as the daily snapshot source for the replication group."
          },
          "SnapshotWindow": {
            "type": "String",
            "required": false,
            "description": "The time range (in UTC) when ElastiCache takes a daily snapshot of your node group. For example, you can specify 05:00-09:00."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::SecurityGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::SecurityGroup type creates a cache security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::SecurityGroup type creates a cache security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": true,
            "description": "The description property of the new cache security group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::SecurityGroupIngress": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElastiCache::SecurityGroupIngress type authorizes ingress to a cache security group from hosts in specified EC2 security groups.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElastiCache::SecurityGroupIngress type authorizes ingress to a cache security group from hosts in specified EC2 security groups."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CacheSecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::ElastiCache::SecurityGroup",
            "required": true,
            "description": "The name of the Cache Security Group to authorize."
          },
          "EC2SecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": true,
            "description": "Name of the EC2 Security Group to include in the authorization."
          },
          "EC2SecurityGroupOwnerId": {
            "type": "String",
            "required": true,
            "description": "Specifies the AWS Account ID of the owner of the EC2 security group specified in the EC2SecurityGroupName property. The AWS Access Key ID is not an acceptable value."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElastiCache::SubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates a cache subnet group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a cache subnet group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CacheSubnetGroupName": {
            "type": "String",
            "required": false,
            "description": "A name for the cache subnet group. If you don't specify a name, AWS CloudFormation generates a unique physical ID."
          },
          "Description": {
            "type": "String",
            "required": true,
            "description": "The description for the cache subnet group."
          },
          "SubnetIds": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The Amazon EC2 subnet IDs for the cache subnet group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticBeanstalk::Application": {
    "type": "Object",
    "required": false,
    "description": "Creates an application within AWS Elastic Beanstalk.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an application within AWS Elastic Beanstalk."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": false,
            "description": "A name for the AWS Elastic Beanstalk application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Describes the application."
          },
          "ApplicationVersions": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Application versions associated with this application. An application version is a specific, labeled iteration of deployable code.",
            "properties": {
              "Description": {
                "type": "String",
                "required": false,
                "description": "Describes the application version."
              },
              "VersionLabel": {
                "type": "String",
                "required": true,
                "description": "A label uniquely identifying the version for the associated application."
              },
              "SourceBundle": {
                "type": "Object",
                "required": false,
                "description": "The location where the source bundle is located for this version.",
                "properties": {
                  "S3Bucket": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The Amazon S3 bucket where the data is located."
                  },
                  "S3Key": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon S3 key where the data is located."
                  }
                }
              }
            }
          },
          "ConfigurationTemplates": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Configuration templates associated with this application. You can use templates to deploy different versions of an application using the configuration settings defined in the template.",
            "properties": {
              "TemplateName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration template."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "An optional description for this configuration."
              },
              "OptionSettings": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "An array of OptionSettings for this Elastic Beanstalk configuration.",
                "properties": {
                  "Namespace": {
                    "type": "String",
                    "required": true,
                    "description": "A unique namespace identifying the option's associated AWS resource."
                  },
                  "OptionName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the configuration option."
                  },
                  "Value": {
                    "type": "String",
                    "required": true,
                    "description": "The value of the setting."
                  }
                }
              },
              "SolutionStackName": {
                "type": "String",
                "required": false,
                "description": "The name of an existing Elastic Beanstalk solution stack used by this configuration. A solution stack specifies the operating system, architecture, and application server for a configuration template. It also defines configuration options, their possible and default values. If SolutionStackName is not specified, the default Elastic Beanstalk solution stack will be used."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticBeanstalk::ApplicationVersion": {
    "type": "Object",
    "required": false,
    "description": "Creates an application version, an iteration of deployable code, for an Elastic Beanstalk application.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an application version, an iteration of deployable code, for an Elastic Beanstalk application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticBeanstalk::Application",
            "description": "Name of the Elastic Beanstalk application that is associated with this application version."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of this application version."
          },
          "SourceBundle": {
            "type": "Object",
            "required": false,
            "description": "The location where the source bundle is located for this version.",
            "properties": {
              "S3Bucket": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The Amazon S3 bucket where the data is located."
              },
              "S3Key": {
                "type": "String",
                "required": true,
                "description": "The Amazon S3 key where the data is located."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticBeanstalk::ConfigurationTemplate": {
    "type": "Object",
    "required": false,
    "description": "Creates a configuration template for an Elastic Beanstalk application.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a configuration template for an Elastic Beanstalk application."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticBeanstalk::Application",
            "description": "Name of the Elastic Beanstalk application that is associated with this configuration template."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "An optional description for this configuration."
          },
          "EnvironmentId": {
            "type": "String",
            "required": false,
            "description": "An environment whose settings you want to use to create the configuration template."
          },
          "OptionSettings": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "An array of OptionSettings for this Elastic Beanstalk configuration.",
            "properties": {
              "Namespace": {
                "type": "String",
                "required": true,
                "description": "A unique namespace identifying the option's associated AWS resource."
              },
              "OptionName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration option."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The value of the setting."
              }
            }
          },
          "SolutionStackName": {
            "type": "String",
            "required": false,
            "description": "The name of an existing Elastic Beanstalk solution stack used by this configuration. A solution stack specifies the operating system, architecture, and application server for a configuration template. It also defines configuration options, their possible and default values. If SolutionStackName is not specified, the default Elastic Beanstalk solution stack will be used."
          },
          "SourceConfiguration": {
            "type": "Object",
            "required": false,
            "description": "A configuration template that is associated with another Elastic Beanstalk application.",
            "properties": {
              "ApplicationName": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::ElasticBeanstalk::Application",
                "description": "The name of the Elastic Beanstalk application that contains the configuration template that you want to use."
              },
              "TemplateName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration template."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticBeanstalk::Environment": {
    "type": "Object",
    "required": false,
    "description": "Creates an environment within AWS Elastic Beanstalk.",
    "return-values": [
      {
        "name": "EndpointURL",
        "description": "The URL to the LoadBalancer for this environment."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an environment within AWS Elastic Beanstalk."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "Describes the environment."
          },
          "ApplicationName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticBeanstalk::Application",
            "description": "The name of the application associated with this environment."
          },
          "CNAMEPrefix": {
            "type": "String",
            "required": false,
            "description": "The URL to the CNAME for this environment."
          },
          "EnvironmentName": {
            "type": "String",
            "required": false,
            "description": "A name for the AWS Elastic Beanstalk environment. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the environment name."
          },
          "OptionSettings": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The option settings to add.",
            "properties": {
              "Namespace": {
                "type": "String",
                "required": true,
                "description": "A unique namespace identifying the option's associated AWS resource."
              },
              "OptionName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration option."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The value of the setting."
              }
            }
          },
          "OptionsToRemove": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The option settings to remove.",
            "properties": {
              "NameSpace": {
                "type": "String",
                "required": true,
                "description": "A unique namespace identifying the option's associated AWS resource."
              },
              "OptionName": {
                "type": "String",
                "required": true,
                "description": "The name of the configuration option."
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "The value of the setting."
              }
            }
          },
          "SolutionStackName": {
            "type": "String",
            "required": false,
            "description": "Stack name associated with the environment."
          },
          "TemplateName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElasticBeanstalk::ConfigurationTemplate",
            "description": "Name of the template to use with the environment."
          },
          "Tier": {
            "type": "Object",
            "required": false,
            "description": "Specifies the tier to use in creating this environment. The environment tier that you choose determines whether AWS Elastic Beanstalk provisions resources to support a web application that handles HTTP(S) requests or a web application that handles background-processing tasks.",
            "properties": {
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the environment tier. You can specify WebServer or Worker.",
                "allowed-values": [
                  "WebServer",
                  "Worker"
                ]
              },
              "Type": {
                "type": "String",
                "required": false,
                "description": "The type of this environment tier. You can specify Standard for the WebServer tier or SQS/HTTP for the Worker tier.",
                "allowed-values": [
                  "WebServer",
                  "SQS/HTTP"
                ]
              },
              "Version": {
                "type": "String",
                "required": false,
                "description": "The version of this environment tier."
              }
            }
          },
          "VersionLabel": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::ElasticBeanstalk::ApplicationVersion",
            "description": "Version to associate with the environment"
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancing::LoadBalancer": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancing::LoadBalancer type creates a LoadBalancer.",
    "return-values": [
      {
        "name": "CanonicalHostedZoneName",
        "description": "The name of the Route 53 hosted zone that is associated with the LoadBalancer."
      },
      {
        "name": "CanonicalHostedZoneNameID",
        "description": "The ID of the Route 53 hosted zone name that is associated with the LoadBalancer."
      },
      {
        "name": "DNSName",
        "description": "The DNS name for the LoadBalancer."
      },
      {
        "name": "SourceSecurityGroup.GroupName",
        "description": "The security group that you can use as part of your inbound rules for your LoadBalancer's back-end Amazon EC2 application instances."
      },
      {
        "name": "SourceSecurityGroup.OwnerAlias",
        "description": "Owner of the source security group."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SNS::TopicPolicy type applies a policy to SNS topics."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AccessLoggingPolicy": {
            "type": "Object",
            "required": false,
            "description": "Captures detailed information for all requests made to your load balancer, such as the time a request was received, client�s IP address, latencies, request path, and server responses.",
            "properties": {
              "EmitInterval": {
                "type": "String",
                "required": false,
                "description": "The interval for publishing access logs in minutes. You can specify an interval of either 5 minutes or 60 minutes."
              },
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Whether logging is enabled for the load balancer."
              },
              "S3BucketName": {
                "type": "String",
                "required": false,
                "description": "The name of an Amazon S3 bucket where access log files are stored."
              },
              "S3BucketPrefix": {
                "type": "String",
                "required": false,
                "description": "A prefix for the all log object keys, such as my-load-balancer-logs/prod. If you store log files from multiple sources in a single bucket, you can use a prefix to distinguish each log file and its source."
              }
            }
          },
          "AppCookieStickinessPolicy": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Generates one or more stickiness policies with sticky session lifetimes that follow that of an application-generated cookie. These policies can be associated only with HTTP/HTTPS listeners.",
            "properties": {
              "CookieName": {
                "type": "String",
                "required": true,
                "description": "Name of the application cookie used for stickiness."
              },
              "ApplicationName": {
                "type": "String",
                "required": true,
                "description": "The name of the policy being created. The name must be unique within the set of policies for this Load Balancer."
              }
            }
          },
          "AvailabilityZones": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The Availability Zones in which to create the load balancer. You can specify either AvailabilityZones or Subnets, but not both.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "ConnectionDrainingPolicy": {
            "type": "Object",
            "required": false,
            "description": "Whether deregistered or unhealthy instances can complete all in-flight requests.",
            "properties": {
              "Enabled": {
                "type": "Boolean",
                "required": true,
                "description": "Whether or not connection draining is enabled for the load balancer."
              },
              "Timeout": {
                "type": "Number",
                "required": false,
                "description": "The time in seconds after the load balancer closes all connections to a deregistered or unhealthy instance."
              }
            }
          },
          "ConnectionSettings": {
            "type": "Object",
            "required": false,
            "description": "Specifies how long front-end and back-end connections of your load balancer can remain idle.",
            "properties": {
              "IdleTimeout": {
                "type": "Number",
                "required": false,
                "description": "The time (in seconds) that a connection to the load balancer can remain idle, which means no data is sent over the connection. After the specified time, the load balancer closes the connection."
              }
            }
          },
          "CrossZone": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies whether cross-zone load balancing is enabled for the load balancer. With cross-zone load balancing, your load balancer nodes route traffic to the back-end instances across all Availability Zones. By default the CrossZone property is false."
          },
          "HealthCheck": {
            "type": "Object",
            "required": false,
            "description": "When specified, declares an application health check for the instances.",
            "properties": {
              "HealthyThreshold": {
                "type": "String",
                "required": true,
                "description": "Specifies the number of consecutive health probe successes required before moving the instance to the Healthy state."
              },
              "Interval": {
                "type": "String",
                "required": true,
                "description": "Specifies the approximate interval, in seconds, between health checks of an individual instance."
              },
              "Target": {
                "type": "String",
                "required": true,
                "description": "Specifies the instance being checked. The protocol is either TCP or HTTP. The range of valid ports is 1 through 65535."
              },
              "Timeout": {
                "type": "String",
                "required": true,
                "description": "Specifies the amount of time, in seconds, during which no response means a failed health probe. This value must be less than the value for Interval."
              },
              "UnhealthyThreshold": {
                "type": "String",
                "required": true,
                "description": "Specifies the number of consecutive health probe failures required before moving the instance to the Unhealthy state."
              }
            }
          },
          "Instances": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::Instance",
            "required": false,
            "description": "Provides a list of EC2 instance IDs for the LoadBalancer."
          },
          "LoadBalancerName": {
            "type": "String",
            "required": false,
            "description": "A name for the load balancer. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the load balancer. The name must be unique within your set of load balancers."
          },
          "LBCookieStickinessPolicy": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent), or by a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.",
            "properties": {
              "CookieExpirationPeriod": {
                "type": "String",
                "required": false,
                "description": "The time period, in seconds, after which the cookie should be considered stale. If this parameter isn't specified, the sticky session will last for the duration of the browser session."
              },
              "PolicyName": {
                "type": "String",
                "required": true,
                "description": "The name of the policy being created. The name must be unique within the set of policies for this load balancer."
              }
            }
          },
          "Listeners": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "One or more listeners for this load balancer. Each listener must be registered for a specific port, and you can not have more than one listener for a given port.",
            "properties": {
              "InstancePort": {
                "type": "String",
                "required": true,
                "description": "Specifies the TCP port on which the instance server is listening. This property cannot be modified for the life of the LoadBalancer."
              },
              "InstanceProtocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "HTTP",
                  "HTTPS",
                  "TCP",
                  "SSL"
                ],
                "description": "Specifies the protocol to use for routing traffic to back-end instances�HTTP, HTTPS, TCP, or SSL. This property cannot be modified for the life of the load balancer."
              },
              "LoadBalancerPort": {
                "type": "String",
                "required": true,
                "description": "Specifies the external LoadBalancer port number. This property cannot be modified for the life of the LoadBalancer."
              },
              "PolicyNames": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of ElasticLoadBalancing policy names to associate with the listener."
              },
              "Protocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "HTTP",
                  "HTTPS",
                  "TCP",
                  "SSL"
                ],
                "description": "Specifies the LoadBalancer transport protocol to use for routing � TCP or HTTP. This property cannot be modified for the life of the LoadBalancer."
              },
              "SSLCertificateId": {
                "type": "String",
                "required": false,
                "description": "The ARN of the SSL certificate to use."
              }
            }
          },
          "Policies": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of elastic load balancing policies to apply to this elastic load balancer.",
            "properties": {
              "Attributes": {
                "type": "Array",
                "array-type": "Json",
                "required": false,
                "description": "A list of arbitrary attributes for this policy."
              },
              "InstancePorts": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "A list of instance ports for the policy. These are the ports associated with the back-end server."
              },
              "LoadBalancerPorts": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "description": "A list of external load balancer ports for the policy."
              },
              "PolicyName": {
                "type": "String",
                "required": true,
                "description": "A name for this policy that is unique to the load balancer."
              },
              "PolicyType": {
                "type": "String",
                "required": true,
                "description": "The name of the policy type for this policy."
              }
            }
          },
          "Scheme": {
            "type": "String",
            "required": false,
            "description": "For LoadBalancers attached to an Apazon VPC, this parameter can be used to specify the type of LoadBalancer to use. Specify \"internal\" to create an internal LoadBalancer with a DNS name that resolves to private IP addresses."
          },
          "SecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Security groups assigned to your load balancer within your virtual private cloud (VPC)."
          },
          "Subnets": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": false,
            "description": "A list of subnet IDs in your virtual private cloud (VPC) to attach to your load balancer. You can specify either AvailabilityZones or Subnets, but not both."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancingV2::Listener": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancingV2::Listener resource creates a listener for an Elastic Load Balancing Application load balancer.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElasticLoadBalancingV2::Listener resource creates a listener for an Elastic Load Balancing Application load balancer."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Certificates": {
            "type": "Object",
            "required": false,
            "description": "The SSL server certificate for the listener. With a certificate, you can encrypt traffic between the load balancer and the clients that initiate HTTPS sessions, and traffic between the load balancer and your targets.",
            "properties": {
              "CertificateArn": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::CertificateManager::Certificate",
                "description": "The Amazon Resource Name (ARN) of the certificate to associate with the listener."
              }
            }
          },
          "DefaultActions": {
            "type": "Object",
            "required": true,
            "description": "The default actions that the listener takes when handling incoming requests.",
            "properties": {
              "TargetGroupArn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                "description": "The Amazon Resource Name (ARN) of the target group to which Elastic Load Balancing routes the traffic."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "forward"
                ],
                "description": "The type of action."
              }
            }
          },
          "LoadBalancerArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "description": "The Amazon Resource Name (ARN) of the load balancer to associate with the listener."
          },
          "Port": {
            "type": "Number",
            "required": true,
            "description": "The port on which the listener listens for requests."
          },
          "Protocol": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "HTTP",
              "HTTPS"
            ],
            "description": "The protocol that clients must use to send requests to the listener."
          },
          "SslPolicy": {
            "type": "String",
            "required": false,
            "description": "The security policy that defines the ciphers and protocols that the load balancer supports."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancingV2::ListenerRule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancingV2::ListenerRule resource defines which requests an Elastic Load Balancing listener takes action on and the action that it takes.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElasticLoadBalancingV2::ListenerRule resource defines which requests an Elastic Load Balancing listener takes action on and the action that it takes."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Actions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The action that the listener takes when a request meets the specified condition.",
            "properties": {
              "TargetGroupArn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                "description": "The Amazon Resource Name (ARN) of the target group to which Elastic Load Balancing routes the traffic."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "forward"
                ],
                "description": "The type of action."
              }
            }
          },
          "Conditions": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The conditions under which a rule takes effect.",
            "properties": {
              "Field": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "path-pattern"
                ],
                "description": "The name of the condition that you want to define, such as path-pattern (which forwards requests based on the URL of the request)."
              },
              "Values": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "The value for the field that you specified in the Field property."
              }
            }
          },
          "ListenerArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticLoadBalancingV2::Listener",
            "description": "The Amazon Resource Name (ARN) of the listener that the rule applies to."
          },
          "Priority": {
            "type": "Number",
            "required": true,
            "description": "The priority for the rule."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancingV2::LoadBalancer": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancingV2::LoadBalancer resource creates an Elastic Load Balancing Application load balancer that distributes incoming application traffic across multiple targets (such as EC2 instances) in multiple Availability Zones.",
    "return-values": [
      {
        "name": "DNSName",
        "description": "The DNS name for the Application load balancer, for example my-load-balancer-424835706.us-west-2.elb.amazonaws.com."
      },
      {
        "name": "CanonicalHostedZoneID",
        "description": "The ID of the Amazon Route 53 hosted zone associated with the load balancer, for example Z2P70J7EXAMPLE."
      },
      {
        "name": "LoadBalancerFullName",
        "description": "The full name of the Application load balancer, for example app/my-load-balancer/50dc6c495c0c9188."
      },
      {
        "name": "LoadBalancerName",
        "description": "The name of the Application load balancer, for example my-load-balancer."
      },
      {
        "name": "SecurityGroups",
        "description": "The IDs of the security groups for the Application load balancer, for example sg-123456a."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElasticLoadBalancingV2::LoadBalancer resource creates an Elastic Load Balancing Application load balancer that distributes incoming application traffic across multiple targets (such as EC2 instances) in multiple Availability Zones."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "LoadBalancerAttributes": {
            "type": "Object",
            "array-type": "String",
            "required": false,
            "description": "Specifies the load balancer configuration.",
            "properties": {
              "Key": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "access_logs.s3.enabled",
                  "access_logs.s3.bucket",
                  "access_logs.s3.prefix ",
                  "deletion_protection.enabled",
                  "idle_timeout.timeout_seconds"
                ],
                "description": "The name of an attribute that you want to configure."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "A value for the attribute."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "Specifies a name for the load balancer. This name must be unique within your AWS account and can have a maximum of 32 alphanumeric characters and hyphens. A name can't begin or end with a hyphen."
          },
          "Scheme": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "internet-facing",
              "internal"
            ],
            "description": "Specifies whether the load balancer is internal or Internet-facing."
          },
          "SecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "Specifies a list of the IDs of the security groups to assign to the load balancer."
          },
          "Subnets": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "Specifies a list of at least two IDs of the subnets to associate with the load balancer. The subnets must be in different Availability Zones."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::ElasticLoadBalancingV2::TargetGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::ElasticLoadBalancingV2::TargetGroup resource creates an Elastic Load Balancing target group that routes requests to one or more registered targets, such as EC2 instances.",
    "return-values": [
      {
        "name": "LoadBalancerArns",
        "description": "A list of Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::ElasticLoadBalancingV2::TargetGroup resource creates an Elastic Load Balancing target group that routes requests to one or more registered targets, such as EC2 instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "HealthCheckIntervalSeconds": {
            "type": "Number",
            "required": false,
            "description": "The approximate number of seconds between health checks for an individual target."
          },
          "HealthCheckPath": {
            "type": "String",
            "required": false,
            "description": "The ping path destination where Elastic Load Balancing sends health check requests."
          },
          "HealthCheckPort": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "traffic-port"
            ],
            "description": "The port that the load balancer uses when performing health checks on the targets."
          },
          "HealthCheckProtocol": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "HTTP",
              "HTTPS"
            ],
            "description": "The protocol that the load balancer uses when performing health checks on the targets, such as HTTP or HTTPS."
          },
          "HealthCheckTimeoutSeconds": {
            "type": "Number",
            "required": false,
            "description": "The number of seconds to wait for a response before considering that a health check has failed."
          },
          "HealthyThresholdCount": {
            "type": "Number",
            "required": false,
            "description": "The number of consecutive successful health checks that are required before an unhealthy target is considered healthy."
          },
          "Matcher": {
            "type": "Object",
            "required": false,
            "description": "The HTTP codes that a healthy target uses when responding to a health check.",
            "properties": {
              "HttpCode": {
                "type": "String",
                "required": false,
                "description": "The HTTP codes that a healthy target must use when responding to a health check, such as 200,202 or 200-299."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the target group."
          },
          "Port": {
            "type": "Number",
            "required": true,
            "description": "The port on which the targets receive traffic."
          },
          "Protocol": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "HTTP",
              "HTTPS"
            ],
            "description": "The protocol to use for routing traffic to the targets."
          },
          "TargetGroupAttributes": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Target group configurations.",
            "properties": {
              "Key": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "deregistration_delay.timeout_seconds",
                  "stickiness.enabled",
                  "stickiness.type",
                  "stickiness.lb_cookie.duration_seconds"
                ],
                "description": "The name of an attribute that you want to configure."
              },
              "Value": {
                "type": "String",
                "required": false,
                "description": "A value for the attribute."
              }
            }
          },
          "Targets": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "The targets to add to this target group.",
            "properties": {
              "Id": {
                "type": "String",
                "required": true,
                "description": "The ID of the target, such as an EC2 instance ID."
              },
              "Port": {
                "type": "Number",
                "required": false,
                "description": "The port number on which the target is listening for traffic."
              }
            }
          },
          "UnhealthyThresholdCount": {
            "type": "Number",
            "required": false,
            "description": "The number of consecutive failed health checks that are required before a target is considered unhealthy."
          },
          "VpcId": {
            "type": "Number",
            "required": true,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC in which your targets are located."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Elasticsearch::Domain": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Elasticsearch::Domain resource creates an Amazon Elasticsearch Service (Amazon ES) domain that encapsulates the Amazon ES engine instances.",
    "return-values": [
      {
        "name": "DomainArn",
        "description": "The Amazon Resource Name (ARN) of the domain, such as arn:aws:es:us-west-2:123456789012:domain/mystack-elasti-1ab2cdefghij."
      },
      {
        "name": "DomainEndpoint",
        "description": "The domain-specific endpoint that is used to submit index, search, and data upload requests to an Amazon ES domain, such as search-mystack-elasti-1ab2cdefghij-ab1c2deckoyb3hofw7wpqa3cm.us-west-2.es.amazonaws.com."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Elasticsearch::Domain resource creates an Amazon Elasticsearch Service (Amazon ES) domain that encapsulates the Amazon ES engine instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AccessPolicies": {
            "type": "Json",
            "required": false,
            "description": "An AWS Identity and Access Management (IAM) policy document that specifies who can access the Amazon ES domain and their permissions."
          },
          "AdvancedOptions": {
            "type": "Json",
            "required": false,
            "description": "Additional options to specify for the Amazon ES domain."
          },
          "DomainName": {
            "type": "String",
            "required": false,
            "description": "A name for the Amazon ES domain."
          },
          "EBSOptions": {
            "type": "Object",
            "required": false,
            "description": "The configurations of Amazon Elastic Block Store (Amazon EBS) volumes that are attached to data nodes in the Amazon ES domain.",
            "Properties": {
              "EBSEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether Amazon EBS volumes are attached to data nodes in the Amazon ES domain."
              },
              "Iops": {
                "type": "Number",
                "required": false,
                "description": "The number of I/O operations per second (IOPS) that the volume supports."
              },
              "VolumeSize": {
                "type": "Number",
                "required": false,
                "description": "The size of the EBS volume for each data node."
              },
              "VolumeType": {
                "type": "String",
                "required": false,
                "description": "The EBS volume type to use with the Amazon ES domain, such as standard, gp2, or io1.",
                "allowed-values": [
                  "gp2",
                  "io1",
                  "*"
                ]
              }
            }
          },
          "ElasticsearchClusterConfig": {
            "type": "Object",
            "required": false,
            "description": "The cluster configuration for the Amazon ES domain.",
            "Properties": {
              "DedicatedMasterCount": {
                "type": "Number",
                "required": false,
                "description": "The number of instances to use for the master node."
              },
              "DedicatedMasterEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether to use a dedicated master node for the Amazon ES domain."
              },
              "DedicatedMasterType": {
                "type": "String",
                "required": false,
                "description": "The hardware configuration of the computer that hosts the dedicated master node, such as m3.medium.elasticsearch.",
                "allowed-values": [
                  "*",
                  "t2.micro.elasticsearch",
                  "t2.small.elasticsearch",
                  "t2.medium.elasticsearch",
                  "m3.medium.elasticsearch",
                  "m3.large.elasticsearch",
                  "m3.xlarge.elasticsearch",
                  "m3.2xlarge.elasticsearch",
                  "r3.large.elasticsearch",
                  "r3.xlarge.elasticsearch",
                  "r3.2xlarge.elasticsearch",
                  "r3.4xlarge.elasticsearch",
                  "r3.8xlarge.elasticsearch",
                  "i2.xlarge.elasticsearch",
                  "i2.2xlarge.elasticsearch"
                ]
              },
              "InstanceCount": {
                "type": "Number",
                "required": false,
                "description": "The number of data nodes (instances) to use in the Amazon ES domain."
              },
              "InstanceType": {
                "type": "String",
                "required": false,
                "description": "",
                "allowed-values": [
                  "*",
                  "t2.micro.elasticsearch",
                  "t2.small.elasticsearch",
                  "t2.medium.elasticsearch",
                  "m3.medium.elasticsearch",
                  "m3.large.elasticsearch",
                  "m3.xlarge.elasticsearch",
                  "m3.2xlarge.elasticsearch",
                  "r3.large.elasticsearch",
                  "r3.xlarge.elasticsearch",
                  "r3.2xlarge.elasticsearch",
                  "r3.4xlarge.elasticsearch",
                  "r3.8xlarge.elasticsearch",
                  "i2.xlarge.elasticsearch",
                  "i2.2xlarge.elasticsearch"
                ]
              },
              "ZoneAwarenessEnabled": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether to enable zone awareness for the Amazon ES domain."
              }
            }
          },
          "ElasticsearchVersion": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "1.5",
              "2.3"
            ],
            "description": "The version of Elasticsearch to use, such as 2.3."
          },
          "SnapshotOptions": {
            "type": "Object",
            "required": false,
            "description": "The hour in UTC during which the service takes an automated daily snapshot of the indices in the Amazon ES domain.",
            "Properties": {
              "AutomatedSnapshotStartHour": {
                "type": "Number",
                "required": false,
                "description": "The hour in UTC during which the service takes an automated daily snapshot of the indices in the Amazon ES domain."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EMR::Cluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EMR::Cluster resource creates an Amazon Elastic MapReduce (Amazon EMR) cluster.",
    "return-values": [
      {
        "name": "MasterPublicDNS",
        "description": "The public DNS name of the master node (instance), such as ec2-12-123-123-123.us-west-2.compute.amazonaws.com."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EMR::Cluster resource creates an Amazon Elastic MapReduce (Amazon EMR) cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AdditionalInfo": {
            "type": "Json",
            "required": false,
            "description": "Additional features that you want to select."
          },
          "Applications": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The software applications to deploy on the cluster, and the arguments that Amazon EMR passes to those applications.",
            "properties": {
              "AdditionalInfo": {
                "type": "Json",
                "required": false,
                "description": "Metadata about third-party applications that third-party vendors use for testing purposes."
              },
              "Args": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Arguments that Amazon EMR passes to the application."
              },
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the application to add to your cluster."
              },
              "Version": {
                "type": "String",
                "required": false,
                "description": "The version of the application."
              }
            }
          },
          "BootstrapActions": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A list of bootstrap actions that Amazon EMR runs before starting applications on the cluster.",
            "properties": {
              "Name": {
                "type": "String",
                "required": true,
                "description": "The name of the bootstrap action to add to your cluster."
              },
              "ScriptBootstrapAction": {
                "type": "String",
                "required": true,
                "description": "The script that the bootstrap action runs."
              }
            }
          },
          "Configurations": {
            "type": "Array",
            "array-type": "Json",
            "required": false,
            "description": "The software configuration of the Amazon EMR cluster."
          },
          "EbsConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configures Amazon Elastic Block Store (Amazon EBS) storage volumes to attach to your instances.",
            "properties": {
              "EbsBlockDeviceConfig": {
                "type": "Object",
                "required": false,
                "description": "Configures the block storage devices that are associated with your EMR instances.",
                "properties": {
                  "VolumeSpecification": {
                    "type": "Object",
                    "required": false,
                    "description": "The settings for the Amazon EBS volumes.",
                    "properties": {
                      "Iops": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of I/O operations per second (IOPS) that the volume supports. For more information, see Iops for the EbsBlockDevice action in the Amazon EC2 API Reference."
                      },
                      "SizeInGB": {
                        "type": "Number",
                        "required": true,
                        "description": "The volume size, in Gibibytes (GiB)."
                      },
                      "VolumeType": {
                        "type": "Number",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "standard",
                          "io1",
                          "gp2"
                        ],
                        "description": "The volume type, such as standard or io1."
                      }
                    }
                  },
                  "VolumesPerInstance": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of Amazon EBS volumes that you want to create for each instance in the EMR cluster or instance group."
                  }
                }
              },
              "EbsOptimized": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the instances are optimized for Amazon EBS I/O."
              }
            }
          },
          "Instances": {
            "type": "Object",
            "required": true,
            "description": "Configures the EC2 instances that will run jobs in the Amazon EMR cluster.",
            "properties": {
              "AdditionalMasterSecurityGroups": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of additional EC2 security group IDs to assign to the master instance (master node) in your Amazon EMR cluster."
              },
              "AdditionalSlaveSecurityGroups": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of additional EC2 security group IDs to assign to the slave instances (slave nodes) in your Amazon EMR cluster."
              },
              "Ec2KeyName": {
                "type": "String",
                "required": false,
                "description": "The name of an Amazon Elastic Compute Cloud (Amazon EC2) key pair"
              },
              "Ec2SubnetId": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "The ID of an Amazon Virtual Private Cloud (Amazon VPC) virtual private cloud (VPC) where you want to launch your instances."
              },
              "EmrManagedMasterSecurityGroup": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "The ID of an EC2 security group (managed by Amazon EMR) that is assigned to the master instance (master node) in your Amazon EMR cluster."
              },
              "EmrManagedSlaveSecurityGroup": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "The ID of an EC2 security group (managed by Amazon EMR) that is assigned to the slave instances (slave nodes) in your Amazon EMR cluster."
              },
              "HadoopVersion": {
                "type": "String",
                "required": false,
                "description": "The Hadoop version for the job flow.",
                "allowed-values": [
                  "*",
                  "0.18",
                  "0.20",
                  "0.20.205",
                  "1.0.3",
                  "2.2.0",
                  "2.4.0"
                ]
              },
              "Placement": {
                "type": "Object",
                "required": false,
                "description": "The Availability Zone (AZ) in which the job flow runs.",
                "properties": {
                  "AvailabilityZone": {
                    "type": "String",
                    "required": false,
                    "description": "The Amazon Elastic Compute Cloud (Amazon EC2) AZ for the job flow."
                  }
                }
              },
              "ServiceAccessSecurityGroup": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "The ID of an EC2 security group (managed by Amazon EMR) that services use to access clusters in private subnets."
              },
              "TerminationProtected": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether to prevent the EC2 instances from being terminated by an API call or user intervention."
              },
              "CoreInstanceGroup": {
                "type": "Object",
                "required": true,
                "resource-ref-type": "AWS::EMR::InstanceGroupConfig",
                "description": "The settings for the core instances in your Amazon EMR cluster.",
                "properties": {
                  "BidPrice": {
                    "type": "String",
                    "required": false,
                    "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group."
                  },
                  "Configurations": {
                    "type": "Array",
                    "array-type": "Json",
                    "required": false,
                    "description": "A list of configurations to apply to this instance group."
                  },
                  "InstanceCount": {
                    "type": "Number",
                    "required": true,
                    "description": "The number of instances to launch in the instance group."
                  },
                  "InstanceType": {
                    "type": "String",
                    "required": true,
                    "description": "The EC2 instance type for all instances in the instance group.",
                    "allowed-values": [
                      "*",
                      "t1.micro",
                      "t2.nano",
                      "t2.micro",
                      "t2.small",
                      "t2.medium",
                      "t2.large",
                      "m1.small",
                      "m1.medium",
                      "m1.large",
                      "m1.xlarge",
                      "m2.xlarge",
                      "m2.2xlarge",
                      "m2.4xlarge",
                      "m3.medium",
                      "m3.large",
                      "m3.xlarge",
                      "m3.2xlarge",
                      "m4.large",
                      "m4.xlarge",
                      "m4.2xlarge",
                      "m4.4xlarge",
                      "m4.10xlarge",
                      "m4.16xlarge",
                      "c1.medium",
                      "c1.xlarge",
                      "cr1.8xlarge",
                      "c3.large",
                      "c3.xlarge",
                      "c3.2xlarge",
                      "c3.4xlarge",
                      "c3.8xlarge",
                      "c4.large",
                      "c4.xlarge",
                      "c4.2xlarge",
                      "c4.4xlarge",
                      "c4.8xlarge",
                      "cc1.4xlarge",
                      "cc2.8xlarge",
                      "cg1.4xlarge",
                      "d2.xlarge",
                      "d2.2xlarge",
                      "d2.4xlarge",
                      "d2.8xlarge",
                      "g2.2xlarge",
                      "g2.8xlarge",
                      "hi1.4xlarge",
                      "hs1.8xlarge",
                      "i2.xlarge",
                      "i2.2xlarge",
                      "i2.4xlarge",
                      "i2.8xlarge",
                      "p2.xlarge",
                      "p2.8xlarge",
                      "p2.16xlarge",
                      "r3.large",
                      "r3.xlarge",
                      "r3.2xlarge",
                      "r3.4xlarge",
                      "r3.8xlarge",
                      "x1.32xlarge"
                    ]
                  },
                  "Market": {
                    "type": "String",
                    "required": false,
                    "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group.",
                    "allowed-values": [
                      "ON_DEMAND",
                      "SPOT"
                    ]
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "A name for the instance group."
                  }
                }
              },
              "MasterInstanceGroup": {
                "type": "Object",
                "required": true,
                "resource-ref-type": "AWS::EMR::InstanceGroupConfig",
                "description": "The settings for the core instances in your Amazon EMR cluster.",
                "properties": {
                  "BidPrice": {
                    "type": "String",
                    "required": false,
                    "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group."
                  },
                  "Configurations": {
                    "type": "Array",
                    "array-type": "Json",
                    "required": false,
                    "description": "A list of configurations to apply to this instance group."
                  },
                  "InstanceCount": {
                    "type": "Number",
                    "required": true,
                    "description": "The number of instances to launch in the instance group."
                  },
                  "InstanceType": {
                    "type": "String",
                    "required": true,
                    "description": "The EC2 instance type for all instances in the instance group.",
                    "allowed-values": [
                      "*",
                      "t1.micro",
                      "t2.nano",
                      "t2.micro",
                      "t2.small",
                      "t2.medium",
                      "t2.large",
                      "m1.small",
                      "m1.medium",
                      "m1.large",
                      "m1.xlarge",
                      "m2.xlarge",
                      "m2.2xlarge",
                      "m2.4xlarge",
                      "m3.medium",
                      "m3.large",
                      "m3.xlarge",
                      "m3.2xlarge",
                      "m4.large",
                      "m4.xlarge",
                      "m4.2xlarge",
                      "m4.4xlarge",
                      "m4.10xlarge",
                      "m4.16xlarge",
                      "c1.medium",
                      "c1.xlarge",
                      "cr1.8xlarge",
                      "c3.large",
                      "c3.xlarge",
                      "c3.2xlarge",
                      "c3.4xlarge",
                      "c3.8xlarge",
                      "c4.large",
                      "c4.xlarge",
                      "c4.2xlarge",
                      "c4.4xlarge",
                      "c4.8xlarge",
                      "cc1.4xlarge",
                      "cc2.8xlarge",
                      "cg1.4xlarge",
                      "d2.xlarge",
                      "d2.2xlarge",
                      "d2.4xlarge",
                      "d2.8xlarge",
                      "g2.2xlarge",
                      "g2.8xlarge",
                      "hi1.4xlarge",
                      "hs1.8xlarge",
                      "i2.xlarge",
                      "i2.2xlarge",
                      "i2.4xlarge",
                      "i2.8xlarge",
                      "p2.xlarge",
                      "p2.8xlarge",
                      "p2.16xlarge",
                      "r3.large",
                      "r3.xlarge",
                      "r3.2xlarge",
                      "r3.4xlarge",
                      "r3.8xlarge",
                      "x1.32xlarge"
                    ]
                  },
                  "Market": {
                    "type": "String",
                    "required": false,
                    "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group.",
                    "allowed-values": [
                      "ON_DEMAND",
                      "SPOT"
                    ]
                  },
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "A name for the instance group."
                  }
                }
              }
            }
          },
          "JobFlowRole": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "An AWS Identity and Access Management (IAM) role for an Amazon EMR cluster."
          },
          "LogUri": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::S3::Bucket",
            "description": "An S3 bucket location to which Amazon EMR writes logs files from a job flow."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the Amazon EMR cluster."
          },
          "ReleaseLabel": {
            "type": "String",
            "required": false,
            "description": "The Amazon EMR software release label. A release is a set of software applications and components that you can install and configure on an Amazon EMR cluster."
          },
          "ServiceRole": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The IAM role that Amazon EMR assumes to access AWS resources on your behalf. "
          },
          "VisibleToAllUsers": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the instances in the cluster are visible to all IAM users in the AWS account."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EMR::InstanceGroupConfig": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EMR::InstanceGroupConfig resource configures a task instance group for an Amazon Elastic MapReduce (Amazon EMR) cluster.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EMR::InstanceGroupConfig resource configures a task instance group for an Amazon Elastic MapReduce (Amazon EMR) cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BidPrice": {
            "type": "String",
            "required": false,
            "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group."
          },
          "Configurations": {
            "type": "Array",
            "array-type": "Json",
            "required": false,
            "description": "A list of configurations to apply to this instance group."
          },
          "EbsConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configures Amazon Elastic Block Store (Amazon EBS) storage volumes to attach to your instances.",
            "properties": {
              "EbsBlockDeviceConfig": {
                "type": "Object",
                "required": false,
                "description": "Configures the block storage devices that are associated with your EMR instances.",
                "properties": {
                  "VolumeSpecification": {
                    "type": "Object",
                    "required": false,
                    "description": "The settings for the Amazon EBS volumes.",
                    "properties": {
                      "Iops": {
                        "type": "Number",
                        "required": false,
                        "description": "The number of I/O operations per second (IOPS) that the volume supports. For more information, see Iops for the EbsBlockDevice action in the Amazon EC2 API Reference."
                      },
                      "SizeInGB": {
                        "type": "Number",
                        "required": true,
                        "description": "The volume size, in Gibibytes (GiB)."
                      },
                      "VolumeType": {
                        "type": "Number",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "standard",
                          "io1",
                          "gp2"
                        ],
                        "description": "The volume type, such as standard or io1."
                      }
                    }
                  },
                  "VolumesPerInstance": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of Amazon EBS volumes that you want to create for each instance in the EMR cluster or instance group."
                  }
                }
              },
              "EbsOptimized": {
                "type": "Boolean",
                "required": false,
                "description": "Indicates whether the instances are optimized for Amazon EBS I/O."
              }
            }
          },
          "InstanceCount": {
            "type": "Number",
            "required": true,
            "description": "The number of instances to launch in the instance group."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The EC2 instance type for all instances in the instance group.",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "Market": {
            "type": "String",
            "required": false,
            "description": "When launching instances as Spot Instances, the bid price in USD for each EC2 instance in the instance group.",
            "allowed-values": [
              "ON_DEMAND",
              "SPOT"
            ]
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the instance group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::EMR::Step": {
    "type": "Object",
    "required": false,
    "description": "The AWS::EMR::Step resource creates a unit of work (a job flow step) that you submit to an Amazon Elastic MapReduce (Amazon EMR) cluster. ",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::EMR::Step resource creates a unit of work (a job flow step) that you submit to an Amazon Elastic MapReduce (Amazon EMR) cluster. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ActionOnFailure": {
            "type": "String",
            "required": true,
            "description": "The action to take if the job flow step fails.",
            "allowed-values": [
              "*",
              "CONTINUE",
              "CONTINUE_AND_WAIT"
            ]
          },
          "HadoopJarStep": {
            "type": "Object",
            "required": true,
            "description": "The JAR file that includes the main function that Amazon EMR executes.",
            "properties": {
              "Args": {
                "type": "String",
                "required": false,
                "description": "A list of command line arguments passed to the JAR file's main function when the function is executed."
              },
              "Jar": {
                "type": "String",
                "required": true,
                "description": "A path to the JAR file that Amazon EMR runs for the job flow step."
              },
              "MainClass": {
                "type": "String",
                "required": false,
                "description": "The name of the main class in the specified JAR file. If you don't specify a value, you must specify a main class in the JAR file's manifest file."
              },
              "StepProperties": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "A list of Java properties that are set when the job flow step runs.",
                "properties": {
                  "Key": {
                    "type": "String",
                    "required": true,
                    "description": "The unique identifier of a key-value pair."
                  },
                  "Value": {
                    "type": "String",
                    "required": false,
                    "description": "The value part of the identified key."
                  }
                }
              }
            }
          },
          "JobFlowId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::EMR::Cluster",
            "description": "The ID of a cluster in which you want to run this job flow step."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the job flow step."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Events::Rule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Events::Rule resource creates a rule that matches incoming Amazon CloudWatch Events (CloudWatch Events) events and routes them to one or more targets for processing.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The event rule Amazon Resource Name (ARN), such as arn:aws:events:us-east-1:123456789012:rule/example."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Events::Rule resource creates a rule that matches incoming Amazon CloudWatch Events (CloudWatch Events) events and routes them to one or more targets for processing."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the rule's purpose."
          },
          "EventPattern": {
            "type": "Json",
            "required": false,
            "description": "Describes which events CloudWatch Events routes to the specified target. These routed events are matched events."
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "A name for the rule. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the rule name."
          },
          "RoleArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants CloudWatch Events permission to make calls to target services, such as AWS Lambda (Lambda) or Amazon Kinesis streams."
          },
          "ScheduleExpression": {
            "type": "String",
            "required": false,
            "description": "The schedule or rate (frequency) that determines when CloudWatch Events runs the rule."
          },
          "State": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "ENABLED",
              "DISABLED"
            ],
            "description": "Indicates whether the rule is enabled."
          },
          "Targets": {
            "type": "Object",
            "required": false,
            "description": "The resources, such as Lambda functions or Amazon Kinesis streams, that CloudWatch Events routes events to and invokes when the rule is triggered.",
            "properties": {
              "Arn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The Amazon Resource Name (ARN) of the target."
              },
              "Id": {
                "type": "String",
                "required": true,
                "description": "A unique identifier for the target."
              },
              "Input": {
                "type": "Json",
                "required": false,
                "description": "A JSON-formatted text string that is passed to the target. This value overrides the matched event."
              },
              "InputPath": {
                "type": "String",
                "required": false,
                "description": "When you don't want to pass the entire matched event, the JSONPath that describes which part of the event to pass to the target."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GameLift::Alias": {
    "type": "Object",
    "required": false,
    "description": "The AWS::GameLift::Alias resource creates an alias for an Amazon GameLift (GameLift) fleet, which you can use to anonymize your fleet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::GameLift::Alias resource creates an alias for an Amazon GameLift (GameLift) fleet, which you can use to anonymize your fleet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "Information that helps you identify the purpose of this alias."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "An identifier to associate with this alias. Alias names don't need to be unique."
          },
          "RoutingStrategy": {
            "type": "Object",
            "required": false,
            "description": "A routing configuration that specifies where traffic is directed for this alias, such as to a fleet or to a message.",
            "properties": {
              "FleetId": {
                "type": "String",
                "required": false,
                "description": "A unique identifier of a GameLift fleet to associate with the alias."
              },
              "Message": {
                "type": "String",
                "required": false,
                "description": "A text message that GameLift displays for the Terminal routing type."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of routing strategy. For the SIMPLE type, traffic is routed to an active GameLift fleet. For the Terminal type, GameLift returns an exception with the message that you specified in the Message property.",
                "allowed-values": [
                  "*",
                  "SIMPLE",
                  "TERMINAL"
                ]
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GameLift::Build": {
    "type": "Object",
    "required": false,
    "description": "The AWS::GameLift::Build resource creates a build that includes all of the components to run your game server in an Amazon GameLift (GameLift) fleet.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::GameLift::Build resource creates a build that includes all of the components to run your game server in an Amazon GameLift (GameLift) fleet."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "An identifier to associate with this build. Build names don't need to be unique."
          },
          "StorageLocation": {
            "type": "Object",
            "required": false,
            "description": "The Amazon Simple Storage Service (Amazon S3) location where your build package files are located.",
            "properties": {
              "Bucket": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The S3 bucket where the GameLift build package files are stored."
              },
              "Key": {
                "type": "String",
                "required": true,
                "description": "The prefix (folder name) where the GameLift build package files are located."
              },
              "RoleArn": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "An AWS Identity and Access Management (IAM) role Amazon Resource Name (ARN) that GameLift can assume to retrieve the build package files from Amazon Simple Storage Service (Amazon S3)."
              }
            }
          },
          "Version": {
            "type": "String",
            "required": false,
            "description": "A version to associate with this build. Version is useful if you want to track updates to your build package files. Versions don't need to be unique."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::GameLift::Fleet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::GameLift::Fleet resource creates an Amazon GameLift (GameLift) fleet to host game servers.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::GameLift::Fleet resource creates an Amazon GameLift (GameLift) fleet to host game servers."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BuildId": {
            "type": "String",
            "required": true,
            "description": "The unique identifier for the build that you want to use with this fleet."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Information that helps you identify the purpose of this fleet."
          },
          "DesiredEC2Instances": {
            "type": "Number",
            "required": true,
            "description": "The number of EC2 instances that you want in this fleet."
          },
          "EC2InboundPermissions": {
            "type": "Object",
            "required": true,
            "description": "The incoming traffic, expressed as IP ranges and port numbers, that is permitted to access the game server.",
            "properties": {
              "FromPort": {
                "type": "Number",
                "required": true,
                "description": "The starting value for a range of allowed port numbers. This value must be lower than the ToPort value."
              },
              "IpRange": {
                "type": "String",
                "required": true,
                "description": "The range of allowed IP addresses in CIDR notation."
              },
              "Protocol": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "tcp",
                  "udp",
                  "icmp"
                ],
                "description": "The network communication protocol that is used by the fleet."
              },
              "ToPort": {
                "type": "Number",
                "required": true,
                "description": "The ending value for a range of allowed port numbers. This value must be higher than the FromPort value."
              }
            }
          },
          "EC2InstanceType": {
            "type": "String",
            "required": true,
            "description": "The type of EC2 instances that the fleet uses. EC2 instance types define the CPU, memory, storage, and networking capacity of the fleet's hosts.",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "LogPaths": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The path to game-session log files that are generated by your game server, with the slashes (\\) escaped. After a game session has been terminated, GameLift captures and stores the logs in an S3 bucket."
          },
          "MaxSize": {
            "type": "Number",
            "required": false,
            "description": "The maximum number of EC2 instances that you want to allow in this fleet. By default, AWS CloudFormation, sets this property to 1."
          },
          "MinSize": {
            "type": "Number",
            "required": false,
            "description": "The minimum number of EC2 instances that you want to allow in this fleet. By default, AWS CloudFormation, sets this property to 0."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "An identifier to associate with this fleet. Fleet names don't need to be unique."
          },
          "ServerLaunchParameters": {
            "type": "String",
            "required": false,
            "description": "The parameters that are required to launch your game server. Specify these parameters as a string of command-line parameters, such as +sv_port 33435 +start_lobby."
          },
          "ServerLaunchPath": {
            "type": "String",
            "required": true,
            "description": "The location of your game server that GameLift launches."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::AccessKey": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::AccessKey resource type generates a secret access key and assigns it to an IAM user or AWS account.",
    "return-values": [
      {
        "name": "SecretAccessKey",
        "description": "Returns the secret access key for the specified AWS::IAM::AccessKey resource. For example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::AccessKey resource type generates a secret access key and assigns it to an IAM user or AWS account."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Serial": {
            "type": "String",
            "required": false,
            "description": "This value is specific to AWS CloudFormation and can only be incremented. Incrementing this value notifies AWS CloudFormation that you want to rotate your access key. When you update your stack, AWS CloudFormation will replace the existing access key with a new key."
          },
          "Status": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "Active",
              "Inactive"
            ],
            "description": "The status of the access key."
          },
          "UserName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::User",
            "description": "The name of the user that the new key will belong to."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::Group": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::Group type creates an Identity and Access Management (IAM) group.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) for the AWS::IAM::Group resource. For example: arn:aws:iam::123456789012:group/mystack-mygroup-1DZETITOWEKVO."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::Group type creates an Identity and Access Management (IAM) group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GroupName": {
            "type": "String",
            "required": false,
            "description": "A name for the IAM group."
          },
          "ManagedPolicyArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::ManagedPolicy",
            "description": "One or more managed policy ARNs to attach to this group."
          },
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path for the group. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "Policies": {
            "type": "Array",
            "array-type": "Policy",
            "required": false,
            "resource-ref-type": "AWS::IAM::Policy",
            "description": "Applies specified policies to the role."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::InstanceProfile": {
    "type": "Object",
    "required": false,
    "description": "Creates an AWS Identity and Access Management (IAM) Instance Profile that can be used with IAM Roles for EC2 Instances.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) for the instance profile. For example: arn:aws:iam::1234567890:instance-profile/MyProfile-ASDNSDLKJ."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an AWS Identity and Access Management (IAM) Instance Profile that can be used with IAM Roles for EC2 Instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path associated with this IAM instance profile. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "Roles": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The roles associated with this IAM instance profile."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::ManagedPolicy": {
    "type": "Object",
    "required": false,
    "description": "AWS::IAM::ManagedPolicy creates an AWS Identity and Access Management (IAM) managed policy for your AWS account that you can use to apply permissions to IAM users, groups, and roles.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "AWS::IAM::ManagedPolicy creates an AWS Identity and Access Management (IAM) managed policy for your AWS account that you can use to apply permissions to IAM users, groups, and roles."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the policy. For example, you can describe the permissions that are defined in the policy."
          },
          "Groups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Group",
            "description": "The names of groups to attach to this policy."
          },
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path for the policy. By default, the path is /."
          },
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified users or groups."
          },
          "Roles": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The names of roles to attach to this policy."
          },
          "Users": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::User",
            "description": "The names of users to attach to this policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::Policy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::Policy type applies an Identity and Access Management (IAM) policy to users or groups.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::Policy type applies an Identity and Access Management (IAM) policy to users or groups."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyName": {
            "type": "String",
            "required": true,
            "description": "The name of the policy."
          },
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified users or groups."
          },
          "Groups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Group",
            "description": "The names of groups to which you want to add the policy."
          },
          "Users": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::User",
            "description": "The names of users for whom you want to add the policy."
          },
          "Roles": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The names of roles to which you want to add the policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::Role": {
    "type": "Object",
    "required": false,
    "description": "Creates an AWS Identity and Access Management (IAM) Role for EC2 Instances. An IAM Role can be used to enable applications running on an Amazon EC2 instance to securely access your AWS resources.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) for the instance profile. For example: arn:aws:iam::1234567890:role/MyRole-AJJHDSKSDF."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an AWS Identity and Access Management (IAM) Role for EC2 Instances. An IAM Role can be used to enable applications running on an Amazon EC2 instance to securely access your AWS resources."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AssumeRolePolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "The IAM Assume Role Policy Document associated with this role."
          },
          "ManagedPolicyArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::ManagedPolicy",
            "description": "One or more managed policy ARNs to attach to this role."
          },
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path for the role. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "Policies": {
            "type": "Array",
            "array-type": "Policy",
            "required": false,
            "resource-ref-type": "AWS::IAM::Policy",
            "description": "Applies specified policies to the role."
          },
          "RoleName": {
            "type": "String",
            "required": false,
            "description": "A name for the IAM role."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::User": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::User type creates a user.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) for the specified AWS::IAM::User resource. For example: arn:aws:iam::123456789012:user/mystack-myuser-1CCXAFG2H2U4D."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::User type creates a user."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Path": {
            "type": "String",
            "required": false,
            "description": "The path for the user name. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "Groups": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Group",
            "description": "The path for the user name. For more information about paths, see Identifiers for IAM Entities in Using AWS Identity and Access Management."
          },
          "LoginProfile": {
            "type": "Object",
            "required": false,
            "description": "Creates a login profile for the user so the user can access AWS services such as the AWS Management Console.",
            "properties": {
              "Password": {
                "type": "String",
                "description": "The password for the user.",
                "required": true
              },
              "PasswordResetRequired": {
                "type": "Boolean",
                "required": false,
                "description": "Specifies whether the user is required to set a new password the next time the user logs in to the AWS Management Console."
              }
            }
          },
          "ManagedPolicyArns": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::ManagedPolicy",
            "description": "One or more managed policy ARNs to attach to this user."
          },
          "Policies": {
            "type": "Array",
            "array-type": "Policy",
            "required": false,
            "resource-ref-type": "AWS::IAM::Policy",
            "description": "Applies specified policies to the user."
          },
          "UserName": {
            "type": "String",
            "required": false,
            "description": "A name for the IAM user."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IAM::UserToGroupAddition": {
    "type": "Object",
    "required": false,
    "description": "The AWS::IAM::UserToGroupAddition type adds Identity and Access Management (IAM) users to a group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::IAM::UserToGroupAddition type adds Identity and Access Management (IAM) users to a group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "GroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Group",
            "description": "List of groups"
          },
          "Users": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::User",
            "description": "List of users"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::Certificate": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::Certificate resource to declare an X.509 certificate.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Fn::GetAtt returns a value for a specified attribute of this type. This section lists the available attributes and sample return values."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::Certificate resource to declare an X.509 certificate."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CertificateSigningRequest": {
            "type": "String",
            "required": true,
            "description": "The certificate signing request (CSR)."
          },
          "Status": {
            "type": "String",
            "required": true,
            "description": "The status of the certificate."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::Policy": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::Policy resource to declare an AWS IoT policy.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::Policy resource to declare an AWS IoT policy."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Json",
            "required": true,
            "description": "The JSON document that describes the policy."
          },
          "PolicyName": {
            "type": "String",
            "required": true,
            "description": "The name (the physical ID) of the AWS IoT policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::PolicyPrincipalAttachment": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::PolicyPrincipalAttachment resource to attach an AWS IoT policy to a principal (an X.509 certificate or other credential).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::PolicyPrincipalAttachment resource to attach an AWS IoT policy to a principal (an X.509 certificate or other credential)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IoT::Policy",
            "description": "The name (the physical ID) of the AWS IoT policy."
          },
          "Principal": {
            "type": "String",
            "required": true,
            "description": "The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::Thing": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::Thing resource to declare an AWS IoT thing.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::Thing resource to declare an AWS IoT thing."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AttributePayload": {
            "type": "Json",
            "required": false,
            "description": "A JSON string that contains up to three key-value pairs."
          },
          "ThingName": {
            "type": "String",
            "required": false,
            "description": "The name (the physical ID) of the AWS IoT thing."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::ThingPrincipalAttachment": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::ThingPrincipalAttachment resource to attach a principal (an X.509 certificate or another credential) to a thing.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::ThingPrincipalAttachment resource to attach a principal (an X.509 certificate or another credential) to a thing."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Principal": {
            "type": "String",
            "required": true,
            "description": "The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID."
          },
          "ThingName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IoT::Thing",
            "description": "The name (the physical ID) of the AWS IoT thing."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::IoT::TopicRule": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::IoT::TopicRule resource to declare an AWS IoT rule.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::IoT::TopicRule resource to declare an AWS IoT rule."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RuleName": {
            "type": "String",
            "required": false,
            "description": "The name (the physical ID) of the AWS IoT rule."
          },
          "TopicRulePayload": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IoT::Thing",
            "description": "The actions associated with the AWS IoT rule.",
            "properties": {
              "Actions": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The name (the physical ID) of the AWS IoT rule.",
                "properties": {
                  "CloudwatchAlarm": {
                    "type": "String",
                    "required": false,
                    "description": "Changes the state of a CloudWatch alarm.",
                    "properties": {
                      "AlarmName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::CloudWatch::Alarm",
                        "description": "The CloudWatch alarm name."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The IAM role that allows access to the CloudWatch alarm."
                      },
                      "StateReason": {
                        "type": "String",
                        "required": true,
                        "description": "The reason for the change of the alarm state."
                      },
                      "StateValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the alarm state."
                      }
                    }
                  },
                  "CloudwatchMetric": {
                    "type": "Object",
                    "required": false,
                    "description": "Captures a CloudWatch metric.",
                    "properties": {
                      "MetricName": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the CloudWatch metric."
                      },
                      "MetricNamespace": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the CloudWatch metric namespace."
                      },
                      "MetricTimestamp": {
                        "type": "String",
                        "required": false,
                        "description": "An optional Unix timestamp."
                      },
                      "MetricUnit": {
                        "type": "String",
                        "required": true,
                        "description": "The metric unit supported by Amazon CloudWatch."
                      },
                      "MetricValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value to publish to the metric. For example, if you count the occurrences of a particular term such as Error, the value will be 1 for each occurrence."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to the CloudWatch metric."
                      }
                    }
                  },
                  "DynamoDB": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to a DynamoDB table.",
                    "properties": {
                      "HashKeyField": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the hash key."
                      },
                      "HashKeyValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the hash key."
                      },
                      "PayloadField": {
                        "type": "String",
                        "required": false,
                        "description": "The name of the column in the DynamoDB table that contains the result of the query. You can customize this name."
                      },
                      "RangeKeyField": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the range key."
                      },
                      "RangeKeyValue": {
                        "type": "String",
                        "required": true,
                        "description": "The value of the range key."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to the DynamoDB table."
                      },
                      "TableName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::DynamoDB::Table",
                        "description": "The name of the DynamoDB table."
                      }
                    }
                  },
                  "Elasticsearch": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to an Elasticsearch domain.",
                    "properties": {
                      "Endpoint": {
                        "type": "String",
                        "required": true,
                        "description": "The endpoint of your Elasticsearch domain."
                      },
                      "Id": {
                        "type": "String",
                        "required": true,
                        "description": "A unique identifier for the stored data."
                      },
                      "Index": {
                        "type": "String",
                        "required": true,
                        "description": "The Elasticsearch index where the data is stored."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to Elasticsearch."
                      },
                      "Type": {
                        "type": "String",
                        "required": true,
                        "description": "The type of stored data."
                      }
                    }
                  },
                  "Firehose": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to a Firehose stream.",
                    "properties": {
                      "DeliveryStreamName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::KinesisFirehose::DeliveryStream",
                        "description": "The delivery stream name."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to the Firehose stream."
                      }
                    }
                  },
                  "Kinesis": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to an Amazon Kinesis stream.",
                    "properties": {
                      "PartitionKey": {
                        "type": "String",
                        "required": false,
                        "description": "The partition key (the grouping of data by shard within an an Amazon Kinesis stream)."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to an Amazon Kinesis stream."
                      },
                      "StreamName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::Kinesis::Stream",
                        "description": "The name of the Amazon Kinesis stream."
                      }
                    }
                  },
                  "Lambda": {
                    "type": "Object",
                    "required": false,
                    "description": "Invokes a Lambda function.",
                    "properties": {
                      "FunctionArn": {
                        "type": "String",
                        "required": true,
                        "description": "The ARN of the Lambda function."
                      }
                    }
                  },
                  "Republish": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes data to an MQ Telemetry Transport (MQTT) topic different from the one currently specified.",
                    "properties": {
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants publishing access."
                      },
                      "Topic": {
                        "type": "String",
                        "required": true,
                        "description": "The name of the MQTT topic topic different from the one currently specified."
                      }
                    }
                  },
                  "S3": {
                    "type": "Object",
                    "required": false,
                    "description": "Writes data to an S3 bucket.",
                    "properties": {
                      "BucketName": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::S3::Bucket",
                        "description": "The name of the S3 bucket."
                      },
                      "Key": {
                        "type": "String",
                        "required": true,
                        "description": "The object key (the name of an object in the S3 bucket)."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to Amazon S3."
                      }
                    }
                  },
                  "Sns": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes data to an SNS topic.",
                    "properties": {
                      "MessageFormat": {
                        "type": "String",
                        "required": false,
                        "description": "The format of the published message."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to Amazon S3."
                      },
                      "TargetArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::SNS::Topic",
                        "description": "The ARN of the Amazon SNS topic."
                      }
                    }
                  },
                  "Sqs": {
                    "type": "Object",
                    "required": false,
                    "description": "Publishes data to an SQS queue.",
                    "properties": {
                      "QueueUrl": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::SQS::Queue",
                        "description": "The URL of the Amazon Simple Queue Service (Amazon SQS) queue."
                      },
                      "RoleArn": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::IAM::Role",
                        "description": "The ARN of the IAM role that grants access to Amazon S3."
                      },
                      "UseBase64": {
                        "type": "String",
                        "required": false,
                        "description": "Specifies whether Base64 encoding should be used."
                      }
                    }
                  }
                }
              },
              "AwsIotSqlVersion": {
                "type": "String",
                "required": false,
                "description": "The version of the SQL rules engine to use when evaluating the rule."
              },
              "Description": {
                "type": "String",
                "required": false,
                "description": "The description of the rule."
              },
              "RuleDisabled": {
                "type": "Boolean",
                "required": true,
                "description": "Specifies whether the rule is disabled."
              },
              "Sql": {
                "type": "String",
                "required": true,
                "description": "The SQL statement that queries the topic."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::KinesisFirehose::DeliveryStream": {
    "type": "Object",
    "required": false,
    "description": "The AWS::KinesisFirehose::DeliveryStream resource creates an Amazon Kinesis Firehose (Firehose) delivery stream that delivers real-time streaming data to an Amazon Simple Storage Service (Amazon S3), Amazon Redshift, or Amazon Elasticsearch Service (Amazon ES) destination.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::KinesisFirehose::DeliveryStream resource creates an Amazon Kinesis Firehose (Firehose) delivery stream that delivers real-time streaming data to an Amazon Simple Storage Service (Amazon S3), Amazon Redshift, or Amazon Elasticsearch Service (Amazon ES) destination."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DeliveryStreamName": {
            "type": "String",
            "required": false,
            "description": "A name for the delivery stream."
          },
          "ElasticsearchDestinationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "An Amazon ES destination for the delivery stream.",
            "properties": {
              "BufferingHints": {
                "type": "Object",
                "required": true,
                "description": "Configures how Firehose buffers incoming data while delivering it to the Amazon ES domain.",
                "properties": {
                  "IntervalInSeconds": {
                    "type": "Number",
                    "required": true,
                    "description": "The length of time, in seconds, that Firehose buffers incoming data before delivering it to the destination."
                  },
                  "SizeInMBs": {
                    "type": "Number",
                    "required": true,
                    "description": "The size of the buffer, in MBs, that Firehose uses for incoming data before delivering it to the destination."
                  }
                }
              },
              "DomainARN": {
                "type": "String",
                "required": true,
                "description": "The Amazon Resource Name (ARN) of the Amazon ES domain that Firehose delivers data to."
              },
              "IndexName": {
                "type": "String",
                "required": true,
                "description": "The name of the Elasticsearch index to which Firehose adds data for indexing."
              },
              "IndexRotationPeriod": {
                "type": "String",
                "required": true,
                "description": "The frequency of Elasticsearch index rotation. If you enable index rotation, Firehose appends a portion of the UTC arrival timestamp to the specified index name, and rotates the appended timestamp accordingly."
              },
              "RetryOptions": {
                "type": "Object",
                "required": false,
                "description": "The retry behavior when Firehose is unable to deliver data to Amazon ES.",
                "properties": {
                  "DurationInSeconds": {
                    "type": "Number",
                    "required": true,
                    "description": "After an initial failure to deliver to Amazon ES, the total amount of time during which Firehose re-attempts delivery (including the first attempt)."
                  }
                }
              },
              "RoleARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The ARN of the AWS Identity and Access Management (IAM) role that grants Firehose access to your S3 bucket, AWS KMS (if you enable data encryption), and Amazon CloudWatch Logs (if you enable logging)."
              },
              "S3BackupMode": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "FailedDocumentsOnly",
                  "AllDocuments"
                ],
                "description": "The condition under which Firehose delivers data to Amazon Simple Storage Service (Amazon S3). You can send Amazon S3 all documents (all data) or only the documents that Firehose could not deliver to the Amazon ES destination."
              },
              "TypeName": {
                "type": "String",
                "required": true,
                "description": "The Elasticsearch type name."
              },
              "CloudWatchLoggingOptions": {
                "type": "Object",
                "required": false,
                "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudWatch Logs logging is enabled."
                  },
                  "LogGroupName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogGroup",
                    "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                  },
                  "LogStreamName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogStream",
                    "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                  }
                }
              },
              "S3Configuration": {
                "type": "Object",
                "required": true,
                "description": "Describes the configuration of a destination in Amazon S3.",
                "properties": {
                  "BucketARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The ARN of the S3 bucket."
                  },
                  "BufferingHints": {
                    "type": "Object",
                    "required": true,
                    "description": "The buffering option. If no value is specified, BufferingHints object default values are used.",
                    "properties": {
                      "IntervalInSeconds": {
                        "type": "Number",
                        "required": false,
                        "description": "Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300."
                      },
                      "SizeInMBs": {
                        "type": "Number",
                        "required": false,
                        "description": "Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5."
                      }
                    }
                  },
                  "CompressionFormat": {
                    "type": "String",
                    "required": false,
                    "allowed-values": [
                      "*",
                      "UNCOMPRESSED",
                      "GZIP",
                      "ZIP",
                      "Snappy"
                    ],
                    "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                  },
                  "EncryptionConfiguration": {
                    "type": "Object",
                    "required": false,
                    "description": "The encryption configuration. If no value is specified, the default is no encryption.",
                    "properties": {
                      "KMSEncryptionConfig": {
                        "type": "Object",
                        "required": false,
                        "description": "The encryption key.",
                        "properties": {
                          "AWSKMSKeyARN": {
                            "type": "String",
                            "required": true,
                            "resource-ref-type": "AWS::KMS::Key",
                            "description": "The ARN of the encryption key. Must belong to the same region as the destination Amazon S3 bucket."
                          }
                        }
                      },
                      "NoEncryptionConfig": {
                        "type": "String",
                        "required": false,
                        "allowed-values": [
                          "*",
                          "NoEncryption"
                        ],
                        "description": "Specifically override existing encryption information to ensure no encryption is used."
                      }
                    }
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "The \"YYYY/MM/DD/HH\" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the AWS credentials."
                  },
                  "CloudWatchLoggingOptions": {
                    "type": "Object",
                    "required": false,
                    "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                    "properties": {
                      "Enabled": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether CloudWatch Logs logging is enabled."
                      },
                      "LogGroupName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogGroup",
                        "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                      },
                      "LogStreamName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogStream",
                        "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                      }
                    }
                  }
                }
              }
            }
          },
          "RedshiftDestinationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "An Amazon Redshift destination for the delivery stream.",
            "properties": {
              "ClusterJDBCURL": {
                "type": "String",
                "required": true,
                "description": "The connection string that Firehose uses to connect to the Amazon Redshift cluster."
              },
              "CopyCommand": {
                "type": "Object",
                "required": true,
                "description": "Configures the Amazon Redshift COPY command that Firehose uses to load data into the cluster from the S3 bucket.",
                "properties": {
                  "CopyOptions": {
                    "type": "String",
                    "required": false,
                    "description": "Parameters to use with the Amazon Redshift COPY command."
                  },
                  "DataTableColumns": {
                    "type": "String",
                    "required": false,
                    "description": "A comma-separated list of the column names in the table that Firehose copies data to."
                  },
                  "DataTableName": {
                    "type": "String",
                    "required": true,
                    "description": "The name of the table where Firehose adds the copied data."
                  }
                }
              },
              "Password": {
                "type": "String",
                "required": true,
                "description": "The password for the Amazon Redshift user that you specified in the Username property."
              },
              "RoleARN": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::IAM::Role",
                "description": "The ARN of the AWS Identity and Access Management (IAM) role that grants Firehose access to your S3 bucket and AWS KMS (if you enable data encryption)."
              },
              "Username": {
                "type": "String",
                "required": true,
                "description": "The Amazon Redshift user that has permission to access the Amazon Redshift cluster. This user must have INSERT privileges for copying data from the S3 bucket to the cluster."
              },
              "CloudWatchLoggingOptions": {
                "type": "Object",
                "required": false,
                "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                "properties": {
                  "Enabled": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether CloudWatch Logs logging is enabled."
                  },
                  "LogGroupName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogGroup",
                    "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                  },
                  "LogStreamName": {
                    "type": "String",
                    "required": false,
                    "resource-ref-type": "AWS::Logs::LogStream",
                    "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                  }
                }
              },
              "S3Configuration": {
                "type": "Object",
                "required": true,
                "description": "Describes the configuration of a destination in Amazon S3.",
                "properties": {
                  "BucketARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::S3::Bucket",
                    "description": "The ARN of the S3 bucket."
                  },
                  "BufferingHints": {
                    "type": "Object",
                    "required": true,
                    "description": "The buffering option. If no value is specified, BufferingHints object default values are used.",
                    "properties": {
                      "IntervalInSeconds": {
                        "type": "Number",
                        "required": false,
                        "description": "Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300."
                      },
                      "SizeInMBs": {
                        "type": "Number",
                        "required": false,
                        "description": "Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5."
                      }
                    }
                  },
                  "CompressionFormat": {
                    "type": "String",
                    "required": false,
                    "allowed-values": [
                      "*",
                      "UNCOMPRESSED",
                      "GZIP",
                      "ZIP",
                      "Snappy"
                    ],
                    "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                  },
                  "EncryptionConfiguration": {
                    "type": "Object",
                    "required": false,
                    "description": "The encryption configuration. If no value is specified, the default is no encryption.",
                    "properties": {
                      "KMSEncryptionConfig": {
                        "type": "Object",
                        "required": false,
                        "description": "The encryption key.",
                        "properties": {
                          "AWSKMSKeyARN": {
                            "type": "String",
                            "required": true,
                            "resource-ref-type": "AWS::KMS::Key",
                            "description": "The ARN of the encryption key. Must belong to the same region as the destination Amazon S3 bucket."
                          }
                        }
                      },
                      "NoEncryptionConfig": {
                        "type": "String",
                        "required": false,
                        "allowed-values": [
                          "*",
                          "NoEncryption"
                        ],
                        "description": "Specifically override existing encryption information to ensure no encryption is used."
                      }
                    }
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "The \"YYYY/MM/DD/HH\" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix."
                  },
                  "RoleARN": {
                    "type": "String",
                    "required": true,
                    "resource-ref-type": "AWS::IAM::Role",
                    "description": "The ARN of the AWS credentials."
                  },
                  "CloudWatchLoggingOptions": {
                    "type": "Object",
                    "required": false,
                    "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                    "properties": {
                      "Enabled": {
                        "type": "Boolean",
                        "required": false,
                        "description": "Indicates whether CloudWatch Logs logging is enabled."
                      },
                      "LogGroupName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogGroup",
                        "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                      },
                      "LogStreamName": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": "AWS::Logs::LogStream",
                        "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                      }
                    }
                  }
                }
              }
            }
          },
          "S3DestinationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "An Amazon S3 destination for the delivery stream.",
            "S3DestinationConfiguration": {
              "type": "Object",
              "required": true,
              "description": "Describes the configuration of a destination in Amazon S3.",
              "properties": {
                "BucketARN": {
                  "type": "String",
                  "required": true,
                  "resource-ref-type": "AWS::S3::Bucket",
                  "description": "The ARN of the S3 bucket."
                },
                "BufferingHints": {
                  "type": "Object",
                  "required": true,
                  "description": "The buffering option. If no value is specified, BufferingHints object default values are used.",
                  "properties": {
                    "IntervalInSeconds": {
                      "type": "Number",
                      "required": false,
                      "description": "Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300."
                    },
                    "SizeInMBs": {
                      "type": "Number",
                      "required": false,
                      "description": "Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5."
                    }
                  }
                },
                "CompressionFormat": {
                  "type": "String",
                  "required": false,
                  "allowed-values": [
                    "*",
                    "UNCOMPRESSED",
                    "GZIP",
                    "ZIP",
                    "Snappy"
                  ],
                  "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                },
                "EncryptionConfiguration": {
                  "type": "Object",
                  "required": false,
                  "description": "The encryption configuration. If no value is specified, the default is no encryption.",
                  "properties": {
                    "KMSEncryptionConfig": {
                      "type": "Object",
                      "required": false,
                      "description": "The encryption key.",
                      "properties": {
                        "AWSKMSKeyARN": {
                          "type": "String",
                          "required": true,
                          "resource-ref-type": "AWS::KMS::Key",
                          "description": "The ARN of the encryption key. Must belong to the same region as the destination Amazon S3 bucket."
                        }
                      }
                    },
                    "NoEncryptionConfig": {
                      "type": "String",
                      "required": false,
                      "allowed-values": [
                        "*",
                        "NoEncryption"
                      ],
                      "description": "Specifically override existing encryption information to ensure no encryption is used."
                    }
                  }
                },
                "Prefix": {
                  "type": "String",
                  "required": false,
                  "description": "The \"YYYY/MM/DD/HH\" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix."
                },
                "RoleARN": {
                  "type": "String",
                  "required": true,
                  "resource-ref-type": "AWS::IAM::Role",
                  "description": "The ARN of the AWS credentials."
                },
                "CloudWatchLoggingOptions": {
                  "type": "Object",
                  "required": false,
                  "description": "The Amazon CloudWatch Logs logging options for the delivery stream.",
                  "properties": {
                    "Enabled": {
                      "type": "Boolean",
                      "required": false,
                      "description": "Indicates whether CloudWatch Logs logging is enabled."
                    },
                    "LogGroupName": {
                      "type": "String",
                      "required": false,
                      "resource-ref-type": "AWS::Logs::LogGroup",
                      "description": "The name of the CloudWatch Logs log group that contains the log stream that Firehose will use."
                    },
                    "LogStreamName": {
                      "type": "String",
                      "required": false,
                      "resource-ref-type": "AWS::Logs::LogStream",
                      "description": "The name of the CloudWatch Logs log stream that Firehose uses to send logs about data delivery."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Kinesis::Stream": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Kinesis stream that captures and transports data records that are emitted from data sources.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The Amazon resource name (ARN) of the Amazon Kinesis stream, such as arn:aws:kinesis:us-east-1:123456789012:stream/mystream."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Kinesis stream that captures and transports data records that are emitted from data sources."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": false,
            "description": "The name of the Amazon Kinesis stream."
          },
          "ShardCount": {
            "type": "Number",
            "required": true,
            "description": "The number of shards that the stream uses. For greater provisioned throughput, increase the number of shards."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::KMS::Alias": {
    "type": "Object",
    "required": false,
    "description": "The AWS::KMS::Alias resource creates a display name for a customer master key (CMK) in AWS Key Management Service (AWS KMS).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::KMS::Alias resource creates a display name for a customer master key (CMK) in AWS Key Management Service (AWS KMS)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AliasName": {
            "type": "String",
            "required": false,
            "description": "The name of the alias. The name must start with alias followed by a forward slash, such as alias/. You can't specify aliases that begin with alias/AWS. These aliases are reserved."
          },
          "TargetKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The ID of the key for which you are creating the alias."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::KMS::Key": {
    "type": "Object",
    "required": false,
    "description": "The AWS::KMS::Key resource creates a customer master key (CMK) in AWS Key Management Service (AWS KMS).",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::KMS::Key resource creates a customer master key (CMK) in AWS Key Management Service (AWS KMS)."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the key. Use a description that helps your users decide whether the key is appropriate for a particular task."
          },
          "Enabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the key is available for use. AWS CloudFormation sets this value to true by default."
          },
          "EnableKeyRotation": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether AWS KMS rotates the key. AWS CloudFormation sets this value to false by default."
          },
          "KeyPolicy": {
            "type": "Policy",
            "required": false,
            "description": "An AWS Identity and Access Management (IAM) policy to attach to the key."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::Alias": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::Alias resource creates an alias that points to an AWS Lambda (Lambda) function that you specify.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::Alias resource creates an alias that points to an AWS Lambda (Lambda) function that you specify."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "Information that describes the alias, such as its purpose or the function that it's associated with."
          },
          "FunctionName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Lambda::Function",
            "description": "The Lambda function that you want to associate with this alias. You can specify the function's name or its Amazon Resource Name (ARN)."
          },
          "FunctionVersion": {
            "type": "String",
            "required": true,
            "description": "The version of the Lambda function that you want to associate with this alias."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A name for the alias."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::EventSourceMapping": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::EventSourceMapping resource specifies a stream as an event source for an AWS Lambda (Lambda) function.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::EventSourceMapping resource specifies a stream as an event source for an AWS Lambda (Lambda) function."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BatchSize": {
            "type": "Number",
            "required": false,
            "description": "The largest number of records that Lambda retrieves from your event source when invoking your function."
          },
          "Enabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Lambda begins polling the event source."
          },
          "EventSourceArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": [
              "AWS::Kinesis::Stream",
              "*"
            ],
            "description": "The Amazon Resource Name (ARN) of the Amazon Kinesis or DynamoDB stream that is the source of events."
          },
          "FunctionName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Lambda::Function",
            "description": "The name or ARN of a Lambda function to invoke when Lambda detects an event on the stream."
          },
          "StartingPosition": {
            "type": "String",
            "required": true,
            "description": "The position in the stream where Lambda starts reading."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::Function": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::Function resource creates an AWS Lambda (Lambda) function that can run code in response to events.",
    "return-values": [
      {
        "name": "Arn",
        "description": "The ARN of the Lambda function."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::Function resource creates an AWS Lambda (Lambda) function that can run code in response to events."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Code": {
            "type": "Object",
            "required": false,
            "description": "The source code of your Lambda function.",
            "properties": {
              "S3Bucket": {
                "type": "String",
                "required": false,
                "resource-ref-type": "AWS::S3::Bucket",
                "description": "The name of the Amazon Simple Storage Service (Amazon S3) bucket that contains the source code of your Lambda function."
              },
              "S3Key": {
                "type": "String",
                "required": false,
                "description": "The location and name of your source code .zip file. If you specify this property, you must also specify the S3Bucket property."
              },
              "S3ObjectVersion": {
                "type": "String",
                "required": false,
                "description": "If you have versioning enabled, the version ID of your packaged source code."
              },
              "ZipFile": {
                "type": "String",
                "required": false,
                "description": "For nodejs runtime environments, the source code of your Lambda function. You cannot use this property with other runtime environments."
              }
            }
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the function."
          },
          "Environment": {
            "type": "Object",
            "required": false,
            "description": "Key-value pairs that Lambda caches and makes available for your Lambda functions.",
            "properties": {
              "Variables": {
                "type": "Json",
                "required": false,
                "description": "A map of key-value pairs that the Lambda function can access."
              }
            }
          },
          "FunctionName": {
            "type": "String",
            "required": false,
            "description": "A name for the function. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the function's name."
          },
          "Handler": {
            "type": "String",
            "required": true,
            "description": "The name of the function within your code that Lambda calls to start running the code."
          },
          "KmsKeyArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The Amazon Resource Name (ARN) of an AWS Key Management Service (AWS KMS) key that Lambda uses to encrypt and decrypt environment variable values."
          },
          "MemorySize": {
            "type": "Number",
            "required": false,
            "description": "The amount of memory, in MB, that is allocated to your Lambda function. Lambda uses this value to infer the amount of CPU and memory that is allocated to your function."
          },
          "Role": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Lambda assumes when it runs your code to access AWS."
          },
          "Runtime": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "dotnetcore1.0",
              "nodejs",
              "nodejs4.3",
              "java8",
              "python2.7"
            ],
            "description": "The runtime environment for the Lambda function that you are uploading."
          },
          "Timeout": {
            "type": "Number",
            "required": false,
            "description": "The function execution time (in seconds) after which Lambda terminates the function. By default, Timeout is set to 3 seconds."
          },
          "VpcConfig": {
            "type": "Object",
            "required": false,
            "description": "If the Lambda function requires access to resources in a VPC, specify a VPC configuration that Lambda uses to set up an elastic network interface (ENI).",
            "properties": {
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of one or more security groups IDs in the VPC that includes the resources to which your Lambda function requires access."
              },
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "A list of one or more subnet IDs in the VPC that includes the resources to which your Lambda function requires access."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::Permission": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::Permission resource associates a policy statement with a specific AWS Lambda (Lambda) function's access policy.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::Permission resource associates a policy statement with a specific AWS Lambda (Lambda) function's access policy."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Action": {
            "type": "String",
            "required": true,
            "description": "The Lambda actions that you want to allow in this statement."
          },
          "FunctionName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Lambda::Function",
            "description": "The name (physical ID) or Amazon Resource Name (ARN) of the Lambda function that you want to associate with this statement. Lambda adds this statement to the function's access policy."
          },
          "Principal": {
            "type": "String",
            "required": true,
            "description": "The entity for which you are granting permission to invoke the Lambda function."
          },
          "SourceAccount": {
            "type": "String",
            "required": false,
            "description": "The AWS account ID (without hyphens) of the source owner."
          },
          "SourceArn": {
            "type": "String",
            "required": false,
            "description": "The ARN of a resource that is invoking your function."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Lambda::Version": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Lambda::Version resource publishes a specified version of an AWS Lambda (Lambda) function.",
    "return-values": [
      {
        "name": "Version",
        "description": "The published version of a Lambda version, such as 1."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Lambda::Version resource publishes a specified version of an AWS Lambda (Lambda) function."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CodeSha256": {
            "type": "String",
            "required": false,
            "description": "The SHA-256 hash of the deployment package that you want to publish."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the version you are publishing. If you don't specify a value, Lambda copies the description from the $LATEST version of the function."
          },
          "FunctionName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Lambda::Function",
            "description": "The Lambda function for which you want to publish a version. You can specify the function's name or its Amazon Resource Name (ARN)."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::Destination": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::Destination resource creates an Amazon CloudWatch Logs (CloudWatch Logs) destination.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::Destination resource creates an Amazon CloudWatch Logs (CloudWatch Logs) destination."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DestinationName": {
            "type": "String",
            "required": true,
            "description": "The name of the CloudWatch Logs destination."
          },
          "DestinationPolicy": {
            "type": "String",
            "required": true,
            "description": "An AWS Identity and Access Management (IAM) policy that specifies who can write to your destination."
          },
          "RoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource (TargetArn)."
          },
          "TargetArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Kinesis::Stream",
            "description": "The ARN of the AWS resource that receives log events. Currently, you can specify only an Amazon Kinesis stream."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::LogGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::LogGroup resource creates an Amazon CloudWatch Logs log group that defines common properties for log streams, such as their retention and access control rules. Each log stream must belong to one log group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::LogGroup resource creates an Amazon CloudWatch Logs log group that defines common properties for log streams, such as their retention and access control rules. Each log stream must belong to one log group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "RetentionInDays": {
            "type": "Number",
            "required": false,
            "description": "The number of days log events are kept in CloudWatch Logs. When a log event expires, CloudWatch Logs automatically deletes it."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::LogStream": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::LogStream resource creates an Amazon CloudWatch Logs log stream in a log group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::LogStream resource creates an Amazon CloudWatch Logs log stream in a log group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "LogGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Logs::LogGroup",
            "description": "The name of the log group where the log stream is created."
          },
          "LogStreamName": {
            "type": "String",
            "required": true,
            "description": "The name of the log stream to create. The name must be unique within the log group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::MetricFilter": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::MetricFilter resource creates a metric filter that describes how Amazon CloudWatch Logs extracts information from logs that you specify and transforms it into Amazon CloudWatch metrics.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::MetricFilter resource creates a metric filter that describes how Amazon CloudWatch Logs extracts information from logs that you specify and transforms it into Amazon CloudWatch metrics."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "FilterPattern": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "description": "Describes the pattern that CloudWatch Logs follows to interpret each entry in a log."
          },
          "LogGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Logs::LogGroup",
            "description": "The name of an existing log group that you want to associate with this metric filter."
          },
          "MetricTransformations": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Describes how to transform data from a log into a CloudWatch metric.",
            "properties": {
              "MetricName": {
                "type": "String",
                "required": true,
                "description": "The name of the CloudWatch metric to which the log information will be published."
              },
              "MetricNamespace": {
                "type": "String",
                "required": true,
                "description": "The destination namespace of the CloudWatch metric. Namespaces are containers for metrics. For example, you can add related metrics in the same namespace."
              },
              "MetricValue": {
                "type": "String",
                "required": true,
                "description": "The value that is published to the CloudWatch metric."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Logs::SubscriptionFilter": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Logs::SubscriptionFilter resource creates an Amazon CloudWatch Logs (CloudWatch Logs) subscription filter that defines which log events are delivered to your Amazon Kinesis stream and where to send them.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Logs::SubscriptionFilter resource creates an Amazon CloudWatch Logs (CloudWatch Logs) subscription filter that defines which log events are delivered to your Amazon Kinesis stream and where to send them."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DestinationArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Kinesis::Stream",
            "description": "The Amazon Resource Name (ARN) of the Amazon Kinesis stream that you want to use as the subscription feed destination."
          },
          "FilterPattern": {
            "type": "String",
            "required": true,
            "description": "The filtering expressions that restrict what gets delivered to the destination Amazon Kinesis stream."
          },
          "LogGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Logs::LogGroup",
            "description": "The log group to associate with the subscription filter."
          },
          "RoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "An IAM role that grants CloudWatch Logs permission to put data into the specified Amazon Kinesis stream."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::Instance": {
    "type": "Object",
    "required": false,
    "description": "Creates an instance for an AWS OpsWorks stack. These instances represent the Amazon EC2 instances that, for example, handle the work of serving applications and balancing traffic.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an instance for an AWS OpsWorks stack. These instances represent the Amazon EC2 instances that, for example, handle the work of serving applications and balancing traffic."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AmiId": {
            "type": "String",
            "required": false,
            "description": "The ID of the custom AMI to be used to create the instance. The AMI should be based on one of the standard AWS OpsWorks APIs."
          },
          "Architecture": {
            "type": "String",
            "required": false,
            "description": "The instance architecture."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The instance Availability Zone."
          },
          "EbsOptimized": {
            "type": "Boolean",
            "required": false,
            "description": "Whether the instance is optimized for Amazon Elastic Block Store (Amazon EBS) I/O."
          },
          "InstallUpdatesOnBoot": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to install operating system and package updates when the instance boots."
          },
          "InstanceType": {
            "type": "String",
            "required": true,
            "description": "The instance type, which must be supported by AWS OpsWorks.",
            "allowed-values": [
              "*",
              "t1.micro",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "m1.small",
              "m1.medium",
              "m1.large",
              "m1.xlarge",
              "m2.xlarge",
              "m2.2xlarge",
              "m2.4xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "c1.medium",
              "c1.xlarge",
              "cr1.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "cc1.4xlarge",
              "cc2.8xlarge",
              "cg1.4xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "hi1.4xlarge",
              "hs1.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.32xlarge"
            ]
          },
          "LayerIds": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Layer",
            "description": "The IDs of the AWS OpsWorks layers that will be associated with this instance."
          },
          "Os": {
            "type": "String",
            "required": false,
            "description": "The instance operating system."
          },
          "RootDeviceType": {
            "type": "String",
            "required": false,
            "description": "The instance root device type."
          },
          "SshKeyName": {
            "type": "String",
            "required": false,
            "description": "The instance SSH key name."
          },
          "StackId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Stack",
            "description": "The ID of the AWS OpsWorks stack that this instance will be associated with."
          },
          "TimeBasedAutoScaling": {
            "type": "Object",
            "required": false,
            "description": "The time-based scaling configuration for the instance.",
            "properties": {
              "Sunday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Sunday."
              },
              "Monday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Monday."
              },
              "Tuesday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Tuesday."
              },
              "Wednesday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Wednesday."
              },
              "Thursday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Thursday."
              },
              "Friday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Friday."
              },
              "Saturday": {
                "type": "Json",
                "required": false,
                "description": "The schedule for Saturday."
              }
            }
          },
          "SubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The ID of the instance's subnet. If the stack is running in a VPC, you can use this parameter to override the stack's default subnet ID value and direct AWS OpsWorks to launch the instance in a different subnet."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::App": {
    "type": "Object",
    "required": false,
    "description": "Defines an AWS OpsWorks app for an AWS OpsWorks stack. The app represents code that you want to run on an application server.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Defines an AWS OpsWorks app for an AWS OpsWorks stack. The app represents code that you want to run on an application server."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AppSource": {
            "type": "Object",
            "required": false,
            "description": "Contains the information required to retrieve an app from a repository.",
            "properties": {
              "Password": {
                "type": "String",
                "description": "This parameter depends on the repository type. For Amazon S3 bundles, set Password to the appropriate IAM secret access key. For HTTP bundles, Git repositories, and Subversion repositories, set Password to the appropriate password.",
                "required": false
              },
              "Revision": {
                "type": "String",
                "description": "The application's version. With AWS OpsWorks, you can deploy new versions of an application. One of the simplest approaches is to have branches or revisions in your repository that represent different versions that can potentially be deployed.",
                "required": false
              },
              "SshKey": {
                "type": "String",
                "description": "The repository's SSH key.",
                "required": false
              },
              "Type": {
                "type": "String",
                "description": "The repository type.",
                "required": false
              },
              "Url": {
                "type": "String",
                "description": "The source URL.",
                "required": false
              }
            }
          },
          "Attributes": {
            "type": "Json",
            "required": false,
            "description": "One or more user-defined key-value pairs to be added to the stack attributes bag."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the app."
          },
          "Domains": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The app virtual host settings, with multiple domains separated by commas. For example, 'www.example.com, example.com'."
          },
          "EnableSsl": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to enable SSL for this app."
          },
          "Environment": {
            "type": "Object",
            "required": false,
            "description": "Contains the information required to retrieve an app from a repository.",
            "properties": {
              "Key": {
                "type": "String",
                "description": "The name of the environment variable, which can consist of up to 64 characters. You can use upper and lowercase letters, numbers, and underscores (_), but the name must start with a letter or underscore.",
                "required": true
              },
              "Secure": {
                "type": "Boolean",
                "description": "Indicates whether the value of the environment variable is concealed, such as with a DescribeApps response. To conceal an environment variable's value, set the value to true.",
                "required": false
              },
              "Value": {
                "type": "String",
                "description": "The value of the environment variable, which can be empty. You can specify a value of up to 256 characters.",
                "required": true
              }
            }
          },
          "Name": {
            "type": "String",
            "required": false,
            "description": "The AWS OpsWorks app name."
          },
          "Shortname": {
            "type": "String",
            "required": false,
            "description": "The app short name, which is used internally by AWS OpsWorks and by Chef recipes."
          },
          "SslConfiguration": {
            "type": "Object",
            "required": false,
            "description": "The SSL configuration",
            "properties": {
              "Certificate": {
                "type": "String",
                "description": "The contents of the certificate's domain.crt file.",
                "required": false
              },
              "Chain": {
                "type": "String",
                "description": "An intermediate certificate authority key or client authentication.",
                "required": false
              },
              "PrivateKey": {
                "type": "String",
                "description": "The private key; the contents of the certificate's domain.kex file.",
                "required": false
              }
            }
          },
          "StackId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Stack",
            "description": "The AWS OpsWorks stack ID that this app will be associated with."
          },
          "Type": {
            "type": "String",
            "required": false,
            "description": "The app type. Each supported type is associated with a particular layer."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::ElasticLoadBalancerAttachment": {
    "type": "Object",
    "required": false,
    "description": "Attaches an Elastic Load Balancing load balancer to an AWS OpsWorks layer that you specify.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Attaches an Elastic Load Balancing load balancer to an AWS OpsWorks layer that you specify."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ElasticLoadBalancerName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "description": "Elastic Load Balancing load balancer name."
          },
          "LayerId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Layer",
            "description": "The AWS OpsWorks layer ID that the Elastic Load Balancing load balancer will be attached to."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::Layer": {
    "type": "Object",
    "required": false,
    "description": "Creates an AWS OpsWorks layer. A layer defines, for example, which packages and applications are installed and how they are configured.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an AWS OpsWorks layer. A layer defines, for example, which packages and applications are installed and how they are configured."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Attributes": {
            "type": "Json",
            "required": false,
            "description": "One or more user-defined key-value pairs to be added to the stack attributes bag."
          },
          "AutoAssignElasticIps": {
            "type": "Boolean",
            "required": true,
            "description": "Whether to automatically assign an Elastic IP address to Amazon EC2 instances in this layer."
          },
          "AutoAssignPublicIps": {
            "type": "Boolean",
            "required": true,
            "description": "For AWS OpsWorks stacks that are running in a VPC, whether to automatically assign a public IP address to Amazon EC2 instances in this layer."
          },
          "CustomInstanceProfileArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::InstanceProfile",
            "description": "The Amazon Resource Name (ARN) of an IAM instance profile that is to be used for the Amazon EC2 instances in this layer."
          },
          "CustomRecipes": {
            "type": "Object",
            "required": false,
            "description": "Custom event recipes for this layer.",
            "properties": {
              "Configure": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Configure event. The event occurs on all of the stack's instances when an instance enters or leaves the online state."
              },
              "Deploy": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Deploy event. The event occurs when you run a deploy command, typically to deploy an application to a set of application server instances."
              },
              "Setup": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Setup event. This event occurs on a new instance after it successfully boots."
              },
              "Shutdown": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Shutdown event. This event occurs after you direct AWS OpsWorks to shut an instance down before the associated Amazon EC2 instance is actually terminated."
              },
              "Undeploy": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "description": "Custom recipe names to be run following a Undeploy event. This event occurs when you delete an app or run an undeploy command to remove an app from a set of application server instances."
              }
            }
          },
          "CustomSecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "Custom security group IDs for this layer."
          },
          "EnableAutoHealing": {
            "type": "Boolean",
            "required": true,
            "description": "Whether to automatically heal Amazon EC2 instances that have become disconnected or timed out."
          },
          "InstallUpdatesOnBoot": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to install operating system and package updates when the instance boots."
          },
          "LifecycleEventConfiguration": {
            "type": "Object",
            "required": false,
            "description": "The lifecycle events for the AWS OpsWorks layer.",
            "properties": {
              "ShutdownEventConfiguration": {
                "type": "Object",
                "required": true,
                "description": "Specifies the shutdown event configuration for a layer.",
                "properties": {
                  "DelayUntilElbConnectionsDrained": {
                    "type": "Boolean",
                    "required": false,
                    "description": "Indicates whether to wait for connections to drain from the Elastic Load Balancing load balancers."
                  },
                  "ExecutionTimeout": {
                    "type": "Number",
                    "required": false,
                    "description": "The time, in seconds, that AWS OpsWorks waits after a shutdown event has been triggered before shutting down an instance."
                  }
                }
              }
            }
          },
          "LoadBasedAutoScaling": {
            "type": "Object",
            "required": false,
            "description": "The load-based scaling configuration for the AWS OpsWorks layer.",
            "properties": {
              "Enable": {
                "type": "Boolean",
                "required": true,
                "description": "Whether to enable automatic load-based scaling for the layer."
              },
              "DownScaling": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "AutoScalingThresholds for OpsWorks Layer.",
                "properties": {
                  "CpuThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The percentage of CPU utilization that triggers the starting or stopping of instances (scaling)."
                  },
                  "IgnoreMetricsTime": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks should ignore metrics and not start any additional scaling events."
                  },
                  "InstanceCount": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of instances to add or remove when the load exceeds a threshold."
                  },
                  "LoadThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The degree of system load that triggers the starting or stopping of instances (scaling). "
                  },
                  "MemoryThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The percentage of memory consumption that triggers the starting or stopping of instances (scaling)."
                  },
                  "ThresholdsWaitTime": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time, in minutes, that the load must exceed a threshold before instances are added or removed."
                  }
                }
              },
              "UpScaling": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "AutoScalingThresholds for OpsWorks Layer.",
                "properties": {
                  "CpuThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The percentage of CPU utilization that triggers the starting or stopping of instances (scaling)."
                  },
                  "IgnoreMetricsTime": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks should ignore metrics and not start any additional scaling events."
                  },
                  "InstanceCount": {
                    "type": "Number",
                    "required": false,
                    "description": "The number of instances to add or remove when the load exceeds a threshold."
                  },
                  "LoadThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The degree of system load that triggers the starting or stopping of instances (scaling). "
                  },
                  "MemoryThreshold": {
                    "type": "Number",
                    "required": false,
                    "description": "The percentage of memory consumption that triggers the starting or stopping of instances (scaling)."
                  },
                  "ThresholdsWaitTime": {
                    "type": "Number",
                    "required": false,
                    "description": "The amount of time, in minutes, that the load must exceed a threshold before instances are added or removed."
                  }
                }
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The AWS OpsWorks layer name."
          },
          "Packages": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "The packages for this layer."
          },
          "Shortname": {
            "type": "String",
            "required": true,
            "description": "The layer short name, which is used internally by AWS OpsWorks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed."
          },
          "StackId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::OpsWorks::Stack",
            "description": "The ID of the AWS OpsWorks stack that this layer will be associated with."
          },
          "Type": {
            "type": "String",
            "required": false,
            "description": "The layer type. A stack cannot have more than one layer of the same type."
          },
          "VolumeConfigurations": {
            "type": "Object",
            "required": false,
            "description": "Describes the Amazon EBS volumes for this layer.",
            "properties": {
              "MountPoint": {
                "type": "String",
                "required": true,
                "description": "The volume mount point, such as /dev/sdh."
              },
              "NumberOfDisks": {
                "type": "Number",
                "required": true,
                "description": "The number of disks in the volume."
              },
              "RaidLevel": {
                "type": "Number",
                "required": true,
                "description": "he number of disks in the volume."
              },
              "Size": {
                "type": "Number",
                "required": true,
                "description": "The volume size."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::OpsWorks::Stack": {
    "type": "Object",
    "required": false,
    "description": "Creates an AWS OpsWorks stack. An AWS OpsWorks stack represents a set of instances that you want to manage collectively, typically because they have a common purpose such as serving PHP applications.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an AWS OpsWorks stack. An AWS OpsWorks stack represents a set of instances that you want to manage collectively, typically because they have a common purpose such as serving PHP applications."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AgentVersion": {
            "type": "String",
            "required": false,
            "description": "The AWS OpsWorks agent version that you want to use. The agent communicates with the service and handles tasks such as initiating Chef runs in response to lifecycle events."
          },
          "Attributes": {
            "type": "Json",
            "required": false,
            "description": "One or more user-defined key-value pairs to be added to the stack attributes bag."
          },
          "ChefConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Describes the Chef configuration.",
            "properties": {
              "BerkshelfVersion": {
                "type": "String",
                "required": false,
                "description": "The Berkshelf version."
              },
              "ManageBerkshelf": {
                "type": "Boolean",
                "required": false,
                "description": "Whether to enable Berkshelf."
              }
            }
          },
          "ConfigurationManager": {
            "type": "Object",
            "required": false,
            "description": "The configuration manager. When you create a stack, you use the configuration manager to specify the Chef version.",
            "properties": {
              "Name": {
                "type": "String",
                "required": false,
                "description": "The name of the configuration manager."
              },
              "Version": {
                "type": "String",
                "required": false,
                "description": "The Chef version."
              }
            }
          },
          "CustomCookbooksSource": {
            "type": "Object",
            "required": false,
            "description": "Contains the information required to retrieve a cookbook from a repository.",
            "properties": {
              "Password": {
                "type": "String",
                "required": false,
                "description": "This parameter depends on the repository type. For Amazon S3 bundles, set Password to the appropriate IAM secret access key. For HTTP bundles, Git repositories, and Subversion repositories, set Password to the appropriate password."
              },
              "Revision": {
                "type": "String",
                "required": false,
                "description": "The application's version. With AWS OpsWorks, you can deploy new versions of an application. One of the simplest approaches is to have branches or revisions in your repository that represent different versions that can potentially be deployed."
              },
              "SshKey": {
                "type": "String",
                "required": false,
                "description": "The repository's SSH key."
              },
              "Type": {
                "type": "String",
                "required": false,
                "description": "The repository type."
              },
              "Url": {
                "type": "String",
                "required": false,
                "description": "The source URL."
              },
              "Username": {
                "type": "String",
                "required": false,
                "description": "This parameter depends on the repository type. For Amazon S3 bundles, set Username to the appropriate IAM access key ID. For HTTP bundles, Git repositories, and Subversion repositories, set Username to the appropriate user name."
              }
            }
          },
          "CustomJson": {
            "type": "Json",
            "required": false,
            "description": "A string that contains user-defined custom JSON. The custom JSON is used to override the corresponding default stack configuration JSON values."
          },
          "DefaultAvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The stack's default Availability Zone, which must be in the specified region."
          },
          "DefaultInstanceProfileArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::InstanceProfile",
            "description": "The Amazon Resource Name (ARN) of an IAM instance profile that is the default profile for all of the stack's Amazon EC2 instances."
          },
          "DefaultOs": {
            "type": "String",
            "required": false,
            "description": "The stack's default operating system."
          },
          "DefaultRootDeviceType": {
            "type": "String",
            "required": false,
            "description": "The default root device type. This value is used by default for all instances in the stack, but you can override it when you create an instance."
          },
          "DefaultSshKeyName": {
            "type": "String",
            "required": false,
            "description": "A default SSH key for the stack instances. You can override this value when you create or update an instance."
          },
          "DefaultSubnetId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "The stack's default subnet ID. All instances are launched into this subnet unless you specify another subnet ID when you create the instance."
          },
          "HostnameTheme": {
            "type": "String",
            "required": false,
            "description": "The stack's host name theme, with spaces replaced by underscores. The theme is used to generate host names for the stack's instances."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the AWS OpsWorks stack."
          },
          "ServiceRoleArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The AWS Identity and Access Management (IAM) role that AWS OpsWorks uses to work with AWS resources on your behalf. You must specify an Amazon Resource Name (ARN) for an existing IAM role."
          },
          "UseCustomCookbooks": {
            "type": "Boolean",
            "required": false,
            "description": "Whether the stack uses custom cookbooks."
          },
          "UseOpsworksSecurityGroups": {
            "type": "Boolean",
            "required": false,
            "description": "Whether to associate the AWS OpsWorks built-in security groups with the stack's layers."
          },
          "VpcId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::VPC",
            "description": "The ID of the VPC that the stack is to be launched into, which must be in the specified region. All instances are launched into this VPC."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBCluster": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBCluster resource creates a cluster, such as an Aurora for Amazon RDS (Amazon Aurora) DB cluster. Amazon Aurora is a fully managed, MySQL-compatible, relational database engine.",
    "return-values": [
      {
        "name": "Endpoint.Address",
        "description": "The connection endpoint for the database. For example: mystack-mydb-1apw1j4phylrk.cg034hpkmmjt.us-east-1.rds.amazonaws.com."
      },
      {
        "name": "Endpoint.Port",
        "description": "The port number on which the database accepts connections. For example: 3306"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBCluster resource creates a cluster, such as an Aurora for Amazon RDS (Amazon Aurora) DB cluster. Amazon Aurora is a fully managed, MySQL-compatible, relational database engine."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AvailabilityZones": {
            "type": "String",
            "required": false,
            "description": "A list of Availability Zones (AZs) in which DB instances in the cluster can be created."
          },
          "BackupRetentionPeriod": {
            "type": "Number",
            "required": false,
            "description": "The number of days for which automatic backups are retained."
          },
          "DatabaseName": {
            "type": "String",
            "required": false,
            "description": "The name of your database."
          },
          "DBClusterParameterGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::DBClusterParameterGroup",
            "description": "The name of the DB cluster parameter group to associate with this DB cluster."
          },
          "DBSubnetGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::DBSecurityGroup",
            "description": "A DB subnet group that you want to associate with this DB cluster."
          },
          "Engine": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "MySQL",
              "mariadb",
              "oracle-se1",
              "oracle-se",
              "oracle-ee",
              "sqlserver-ee",
              "sqlserver-se",
              "sqlserver-ex",
              "sqlserver-web",
              "postgres",
              "aurora",
              "*"
            ],
            "description": "The name of the database engine that you want to use for this DB cluster."
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The version number of the database engine to use."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to encrypt the database instances in the DB cluster."
          },
          "MasterUsername": {
            "type": "String",
            "required": false,
            "description": "The name of master user for the client DB instance."
          },
          "MasterUserPassword": {
            "type": "String",
            "required": false,
            "description": "The name of master user for the client DB instance."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which the database accepts connections."
          },
          "PreferredBackupWindow": {
            "type": "String",
            "required": false,
            "description": "The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC)."
          },
          "SnapshotIdentifier": {
            "type": "String",
            "required": false,
            "description": "The identifier for the DB cluster snapshot from which you want to restore."
          },
          "StorageEncrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the DB instances in the cluster are encrypted."
          },
          "VpcSecurityGroupIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of EC2 VPC security groups to associate with this DB instance."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBClusterParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBClusterParameterGroup resource creates a new Amazon Relational Database Service (Amazon RDS) database (DB) cluster parameter group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBClusterParameterGroup resource creates a new Amazon Relational Database Service (Amazon RDS) database (DB) cluster parameter group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": true,
            "description": "A friendly description for this DB cluster parameter group."
          },
          "Family": {
            "type": "String",
            "required": true,
            "description": "The database family of this DB cluster parameter group."
          },
          "Parameters": {
            "type": "Json",
            "required": true,
            "description": "The parameters to set for this DB cluster parameter group."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBInstance": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBInstance type creates an Amazon RDS database instance.",
    "return-values": [
      {
        "name": "Endpoint.Address",
        "description": "The connection endpoint for the database. For example: mystack-mydb-1apw1j4phylrk.cg034hpkmmjt.us-east-1.rds.amazonaws.com."
      },
      {
        "name": "Endpoint.Port",
        "description": "The port number on which the database accepts connections. For example: 3306"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBInstance type creates an Amazon RDS database instance."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain",
          "Snapshot"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllocatedStorage": {
            "type": "String",
            "required": true,
            "description": "The allocated storage size specified in gigabytes (GB). If any value is used in the Iops parameter, AllocatedStorage must be at least 100 GB, which corresponds to the minimum Iops value of 1000. If Iops is increased (in 1000 IOPS increments), then AllocatedStorage must also be increased (in 100 GB increments) correspondingly."
          },
          "AllowMajorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether major version upgrades are allowed. Changing this parameter does not result in an outage, and the change is applied asynchronously as soon as possible."
          },
          "AutoMinorVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates that minor engine upgrades will be applied automatically to the DB instance during the maintenance window. The default value is true."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The name of the Availability Zone where the DB instance is. You cannot set the AvailabilityZone parameter if the MultiAZ parameter is set to true.",
            "allowed-values": [
              "us-east-1b",
              "us-east-1c",
              "us-east-1d",
              "us-east-1e",
              "us-west-1b",
              "us-west-1c",
              "us-west-2a",
              "us-west-2b",
              "us-west-2c",
              "ap-northeast-1a",
              "ap-northeast-1c",
              "ap-northeast-2a",
              "ap-northeast-2c",
              "ap-south-1a",
              "ap-south-1b",
              "ap-southeast-1a",
              "ap-southeast-1b",
              "ap-southeast-2a",
              "ap-southeast-2b",
              "ap-southeast-2c",
              "sa-east-1a",
              "sa-east-1b",
              "sa-east-1c",
              "eu-west-1a",
              "eu-west-1b",
              "eu-west-1c",
              "eu-central-1a",
              "eu-central-1b"
            ]
          },
          "BackupRetentionPeriod": {
            "type": "String",
            "required": false,
            "description": "The number of days for which automatic DB snapshots are retained."
          },
          "CharacterSetName": {
            "type": "String",
            "required": false,
            "description": "For supported engines, specifies the character set to associate with the database instance."
          },
          "DBClusterIdentifier": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::DBCluster",
            "description": "The identifier of an existing DB cluster that this instance will be associated with."
          },
          "DBInstanceClass": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "db.t1.micro",
              "db.m1.small",
              "db.m1.medium",
              "db.m1.large",
              "db.m1.xlarge",
              "db.m2.xlarge",
              "db.m2.2xlarge",
              "db.m2.4xlarge",
              "db.m3.medium",
              "db.m3.large",
              "db.m3.xlarge",
              "db.m3.2xlarge",
              "db.m4.large",
              "db.m4.xlarge",
              "db.m4.2xlarge",
              "db.m4.4xlarge",
              "db.m4.10xlarge",
              "db.r3.large",
              "db.r3.xlarge",
              "db.r3.2xlarge",
              "db.r3.4xlarge",
              "db.r3.8xlarge",
              "db.t2.micro",
              "db.t2.small",
              "db.t2.medium",
              "db.t2.large"
            ],
            "description": "The name of the compute and memory capacity class of the DB instance."
          },
          "DBInstanceIdentifier": {
            "type": "String",
            "required": false,
            "description": "A name for the DB instance. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the DB instance."
          },
          "DBName": {
            "type": "String",
            "required": false,
            "description": "The name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance."
          },
          "DBParameterGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::RDS::DBParameterGroup",
            "required": false,
            "description": "The name of an existing DB parameter group or a reference to an AWS::RDS::DBParameterGroup resource created in the template."
          },
          "DBSecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::RDS::DBSecurityGroup",
            "required": false,
            "description": "A list containing the DB security groups to assign to the Amazon RDS instance. The list can contain both the name of existing DB security groups or references to AWS::RDS::DBSecurityGroup resources created in the template."
          },
          "DBSnapshotIdentifier": {
            "type": "String",
            "required": false,
            "description": "The identifier for the DB snapshot to restore from."
          },
          "DBSubnetGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::RDS::DBSubnetGroup",
            "required": false,
            "description": "A DB Subnet Group to associate with this DB instance."
          },
          "Domain": {
            "type": "String",
            "required": false,
            "description": "For an Amazon RDS DB instance that is running Microsoft SQL Server, the Active Directory directory ID to create the instance in."
          },
          "DomainIAMRoleName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The name of an IAM role that Amazon RDS uses when calling the Directory Service APIs."
          },
          "Engine": {
            "type": "String",
            "required": true,
            "description": "The name of the database engine to be used for this DB instance.",
            "allowed-values": [
              "*",
              "MySQL",
              "mariadb",
              "oracle-se1",
              "oracle-se",
              "oracle-ee",
              "sqlserver-ee",
              "sqlserver-se",
              "sqlserver-ex",
              "sqlserver-web",
              "postgres",
              "aurora"
            ]
          },
          "EngineVersion": {
            "type": "String",
            "required": false,
            "description": "The version number of the database engine to use."
          },
          "Iops": {
            "type": "String",
            "required": false,
            "description": "The number of I/O operations per second (IOPS) that the database should provision. This can be any value from 1000�10,000, in 1000 IOPS increments."
          },
          "KmsKeyId": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The Amazon Resource Name (ARN) of the AWS Key Management Service master key that is used to encrypt the database instance."
          },
          "LicenseModel": {
            "type": "String",
            "required": false,
            "description": "The license model information for this DB instance."
          },
          "MasterUsername": {
            "type": "String",
            "required": true,
            "description": "The master username for the DB instance."
          },
          "MasterUserPassword": {
            "type": "String",
            "required": true,
            "description": "The master password for the DB instance."
          },
          "MonitoringInterval": {
            "type": "Number",
            "required": false,
            "description": "The interval, in seconds, between points when Amazon RDS collects enhanced monitoring metrics for the DB instance. To disable metrics collection, specify 0."
          },
          "MonitoringRoleArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The ARN of the AWS Identity and Access Management (IAM) role that permits Amazon RDS to send enhanced monitoring metrics to Amazon CloudWatch."
          },
          "MultiAZ": {
            "type": "Boolean",
            "required": false,
            "description": "Specifies if the DB instance is a multiple availability-zone deployment. You cannot set the AvailabilityZone parameter if the MultiAZ parameter is set to true."
          },
          "OptionGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::OptionGroup",
            "description": "An option group that this database instance is associated with."
          },
          "Port": {
            "type": "String",
            "required": false,
            "description": "The port for the instance."
          },
          "PreferredBackupWindow": {
            "type": "String",
            "required": false,
            "description": "The daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range (in UTC) during which system maintenance can occur."
          },
          "PubliclyAccessible": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the database instance is an Internet-facing instance. If you specify true, an instance is created with a publicly resolvable DNS name, which resolves to a public IP address. If you specify false, an internal instance is created with a DNS name that resolves to a private IP address."
          },
          "SourceDBInstanceIdentifier": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::RDS::DBInstance",
            "description": "If you want to create a read replica DB instance, specify the ID of the source DB instance."
          },
          "StorageEncrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the database instance is encrypted."
          },
          "StorageType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "standard",
              "gp2",
              "io1",
              "*"
            ],
            "description": "The storage type associated with this database instance."
          },
          "VPCSecurityGroups": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "A list of the VPC security groups to assign to the Amazon RDS instance."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      }
    }
  }
,
  "AWS::RDS::DBParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates a custom parameter group for an RDS database family.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a custom parameter group for an RDS database family."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": true,
            "description": "A friendly description of the RDS parameter group. For example, \"My Parameter Group\"."
          },
          "Family": {
            "type": "String",
            "required": true,
            "description": "The database family of this RDS parameter group. For example, \"MySQL5.1\"."
          },
          "Parameters": {
            "type": "Json",
            "required": true,
            "description": "The parameters to set for this RDS parameter group."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBSecurityGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBSecurityGroup type is used to create or update an Amazon RDS DB Security Group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBSecurityGroup type is used to create or update an Amazon RDS DB Security Group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "EC2VpcId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::VPC",
            "required": false,
            "description": "The Id of VPC. Indicates which VPC this DB Security Group should belong to. Required: Conditional. Must be specified to create a DB Security Group for a VPC; may not be specified otherwise."
          },
          "DBSecurityGroupIngress": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Network ingress authorization for an Amazon EC2 security group or an IP address range.",
            "properties": {
              "CIDRIP": {
                "type": "String",
                "required": false,
                "description": "The IP range to authorize."
              },
              "EC2SecurityGroupId": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Id of the VPC or EC2 Security Group to authorize."
              },
              "EC2SecurityGroupName": {
                "type": "String",
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "required": false,
                "description": "Name of the EC2 Security Group to authorize."
              },
              "EC2SecurityGroupOwnerId": {
                "type": "String",
                "required": false,
                "description": "AWS Account Number of the owner of the EC2 Security Group specified in the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value."
              }
            }
          },
          "GroupDescription": {
            "type": "String",
            "required": true,
            "description": "Description of the security group."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBSecurityGroupIngress": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBSecurityGroupIngress type enables ingress to a DBSecurityGroup using one of two forms of authorization.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBSecurityGroupIngress type enables ingress to a DBSecurityGroup using one of two forms of authorization."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "CIDRIP": {
            "type": "String",
            "required": false,
            "description": "The IP range to authorize."
          },
          "DBSecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::RDS::DBSecurityGroup",
            "required": false,
            "description": "The name (ARN) of the AWS::RDS::DBSecurityGroup to which this ingress will be added."
          },
          "EC2SecurityGroupId": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Id of the VPC or EC2 Security Group to authorize."
          },
          "EC2SecurityGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "required": false,
            "description": "Name of the EC2 Security Group to authorize."
          },
          "EC2SecurityGroupOwnerId": {
            "type": "String",
            "required": false,
            "description": "AWS Account Number of the owner of the EC2 Security Group specified in the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::DBSubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "The AWS::RDS::DBSubnetGroup type creates DB subnet group. DB subnet groups must contain at least one subnet in each AZ in the region.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::RDS::DBSubnetGroup type creates DB subnet group. DB subnet groups must contain at least one subnet in each AZ in the region."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DBSubnetGroupDescription": {
            "type": "String",
            "required": true,
            "description": "The description for the DB Subnet Group."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "resource-ref-type": "AWS::EC2::Subnet",
            "required": true,
            "description": "The EC2 Subnet IDs for the DB Subnet Group."
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::EventSubscription": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::RDS::EventSubscription resource to get notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::RDS::EventSubscription resource to get notifications for Amazon Relational Database Service events through the Amazon Simple Notification Service."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Enabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether to activate the subscription. If you don't specify this property, AWS CloudFormation activates the subscription."
          },
          "EventCategories": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "description": "A list of event categories that you want to subscribe to for a given source type. If you don't specify this property, you are notified about all event categories."
          },
          "SnsTopicArn": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of an Amazon SNS topic that you want to send event notifications to."
          },
          "SourceIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": [
              "AWS::RDS::DBInstance",
              "*"
            ],
            "description": "A list of identifiers for which Amazon RDS provides notification events."
          },
          "SourceType": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "db-instance",
              "*"
            ],
            "description": "The type of source for which Amazon RDS provides notification events."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::RDS::OptionGroup": {
    "type": "Object",
    "required": false,
    "description": "Use the AWS::RDS::OptionGroup resource to create an option group that can make managing data and databases easier.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Use the AWS::RDS::OptionGroup resource to create an option group that can make managing data and databases easier."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "EngineName": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "MySQL",
              "mariadb",
              "oracle-se1",
              "oracle-se",
              "oracle-ee",
              "sqlserver-ee",
              "sqlserver-se",
              "sqlserver-ex",
              "sqlserver-web",
              "postgres",
              "aurora",
              "*"
            ],
            "description": "The name of the database engine that this option group is associated with."
          },
          "MajorEngineVersion": {
            "type": "String",
            "required": true,
            "description": "The major version number of the database engine that this option group is associated with."
          },
          "OptionGroupDescription": {
            "type": "String",
            "required": true,
            "description": "A description of the option group."
          },
          "OptionConfigurations": {
            "type": "Object",
            "required": true,
            "description": "The configurations for this option group.",
            "properties": {
              "DBSecurityGroupMemberships": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::RDS::DBSecurityGroup",
                "description": "A list of database security group names for this option. If the option requires access to a port, the security groups must allow access to that port. If you specify this property, don't specify the VPCSecurityGroupMemberships property."
              },
              "OptionName": {
                "type": "String",
                "required": true,
                "description": "The name of the option."
              },
              "OptionSettings": {
                "type": "Object",
                "required": false,
                "description": "The settings for this option.",
                "properties": {
                  "Name": {
                    "type": "String",
                    "required": false,
                    "description": "The name of the option setting that you want to specify."
                  },
                  "Value": {
                    "type": "String",
                    "required": false,
                    "description": "The value of the option setting."
                  }
                }
              },
              "Port": {
                "type": "Number",
                "required": false,
                "description": "The port number that this option uses."
              },
              "VpcSecurityGroupMemberships": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of VPC security group IDs for this option. If the option requires access to a port, the security groups must allow access to that port. If you specify this property, don't specify the DBSecurityGroupMemberships property."
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::Cluster": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Redshift cluster. A cluster is a fully managed data warehouse that consists of set of compute nodes.",
    "return-values": [
      {
        "name": "Endpoint.Address",
        "description": "The connection endpoint for the Amazon Redshift cluster. For example: examplecluster.cg034hpkmmjt.us-east-1.redshift.amazonaws.com ."
      },
      {
        "name": "Endpoint.Port",
        "description": "The port number on which the Amazon Redshift cluster accepts connections. For example: 5439."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Redshift cluster. A cluster is a fully managed data warehouse that consists of set of compute nodes."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AllowVersionUpgrade": {
            "type": "Boolean",
            "required": false,
            "description": "When a new version of the Amazon Redshift is released, indicates whether upgrades can be applied to the engine that is running on the cluster. The upgrades are applied during the maintenance window."
          },
          "AutomatedSnapshotRetentionPeriod": {
            "type": "Number",
            "required": false,
            "description": "The number of days that automated snapshots are retained. If you set the value to 0, automated snapshots are disabled."
          },
          "AvailabilityZone": {
            "type": "String",
            "required": false,
            "description": "The Amazon EC2 Availability Zone in which you want to provision your Amazon Redshift cluster. For example, if you have several Amazon EC2 instances running in a specific Availability Zone, you might want the cluster to be provisioned in the same zone in order to decrease network latency."
          },
          "ClusterParameterGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::Redshift::ClusterParameterGroup",
            "required": false,
            "description": "The name of the parameter group that you want to associate with this cluster."
          },
          "ClusterSecurityGroups": {
            "type": "String",
            "resource-ref-type": "AWS::Redshift::ClusterSecurityGroup",
            "required": false,
            "description": "A list of security groups that you want to associate with this cluster."
          },
          "ClusterSubnetGroupName": {
            "type": "String",
            "resource-ref-type": "AWS::Redshift::ClusterSubnetGroup",
            "required": false,
            "description": "The name of a cluster subnet group that you want to associate with this cluster."
          },
          "ClusterType": {
            "type": "String",
            "required": true,
            "description": "The type of cluster. You can specify single-node or multi-node.",
            "allowed-values": [
              "single-node",
              "multi-node"
            ]
          },
          "ClusterVersion": {
            "type": "String",
            "required": false,
            "description": "The Amazon Redshift engine version that you want to deploy on the cluster."
          },
          "DBName": {
            "type": "String",
            "required": true,
            "description": "The name of the first database that is created when the cluster is created."
          },
          "ElasticIp": {
            "type": "String",
            "required": false,
            "description": "The Elastic IP (EIP) address for the cluster."
          },
          "Encrypted": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the data in the cluster is encrypted at rest."
          },
          "HsmClientCertificateIdentifier": {
            "type": "String",
            "required": false,
            "description": "Specifies the name of the HSM client certificate that the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM."
          },
          "HsmConfigurationIdentifier": {
            "type": "String",
            "required": false,
            "description": "Specifies the name of the HSM configuration that contains the information that the Amazon Redshift cluster can use to retrieve and store keys in an HSM."
          },
          "KmsKeyId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The AWS Key Management Service (AWS KMS) key ID that you want to use to encrypt data in the cluster."
          },
          "MasterUsername": {
            "type": "String",
            "required": true,
            "description": "The user name that is associated with the master user account for this cluster."
          },
          "MasterUserPassword": {
            "type": "String",
            "required": true,
            "description": "The password associated with the master user account for this cluster."
          },
          "NodeType": {
            "type": "String",
            "required": true,
            "description": "The node type that is provisioned for this cluster.",
            "allowed-values": [
              "dw.hs1.xlarge",
              "dw.hs1.8xlarge",
              "*"
            ]
          },
          "NumberOfNodes": {
            "type": "Number",
            "required": false,
            "description": "The number of compute nodes in the cluster. If you specify multi-node for the ClusterType parameter, you must specify a number greater than 1."
          },
          "OwnerAccount": {
            "type": "String",
            "required": false,
            "description": "When you restore from a snapshot from another AWS account, the 12-digit AWS account ID that contains that snapshot."
          },
          "Port": {
            "type": "Number",
            "required": false,
            "description": "The port number on which the cluster accepts incoming connections."
          },
          "PreferredMaintenanceWindow": {
            "type": "String",
            "required": false,
            "description": "The weekly time range (in UTC) during which automated cluster maintenance can occur. The format of the time range is ddd:hh24:mi-ddd:hh24:mi."
          },
          "PubliclyAccessible": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether the cluster can be accessed from a public network."
          },
          "SnapshotClusterIdentifier": {
            "type": "String",
            "required": false,
            "description": "The cluster identifier for which you want a snapshot."
          },
          "SnapshotIdentifier": {
            "type": "String",
            "required": false,
            "description": "A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account."
          },
          "VpcSecurityGroupIds": {
            "type": "String",
            "required": false,
            "description": "A list of VPC security groups that are associated with this cluster.",
            "resource-ref-type": "AWS::EC2::SecurityGroup"
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::ClusterParameterGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Redshift parameter group that you can associate with an Amazon Redshift cluster. The parameters in the group apply to all the databases that you create in the cluster.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Redshift parameter group that you can associate with an Amazon Redshift cluster. The parameters in the group apply to all the databases that you create in the cluster."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the parameter group."
          },
          "ParameterGroupFamily": {
            "type": "String",
            "required": true,
            "description": "The Amazon Redshift engine version that applies to this cluster parameter group. The cluster engine version determines the set of parameters that you can specify in the Parameters property."
          },
          "Parameters": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "A description of the parameter group.",
            "properties": {
              "ParameterName": {
                "type": "String",
                "required": true,
                "description": "The name of the parameter."
              },
              "ParameterValue": {
                "type": "String",
                "required": true,
                "description": "The value of the parameter."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::ClusterSecurityGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Redshift security group. You use security groups to control access to Amazon Redshift clusters that are not in a VPC.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Redshift security group. You use security groups to control access to Amazon Redshift clusters that are not in a VPC."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the security group."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::ClusterSecurityGroupIngress": {
    "type": "Object",
    "required": false,
    "description": "Specifies inbound (ingress) rules for an Amazon Redshift security group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Specifies inbound (ingress) rules for an Amazon Redshift security group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ClusterSecurityGroupName": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::Redshift::ClusterSecurityGroup",
            "description": "The name of the Amazon Redshift security group that will be associated with the ingress rule."
          },
          "CIDRIP": {
            "type": "String",
            "required": false,
            "description": "The IP address range that has inbound access to the Amazon Redshift security group."
          },
          "EC2SecurityGroupName": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::SecurityGroup",
            "description": "The Amazon EC2 security group that will be added the Amazon Redshift security group."
          },
          "EC2SecurityGroupOwnerId": {
            "type": "String",
            "required": false,
            "description": "The 12-digit AWS account number of the owner of the Amazon EC2 security group that is specified by the EC2SecurityGroupName parameter."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Redshift::ClusterSubnetGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates an Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon VPC when creating an Amazon Redshift subnet group.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates an Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon VPC when creating an Amazon Redshift subnet group."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Description": {
            "type": "String",
            "required": false,
            "description": "A description of the security group."
          },
          "SubnetIds": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::Subnet",
            "description": "A list of VPC subnet IDs. You can modify a maximum of 20 subnets."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53::HealthCheck": {
    "type": "Object",
    "required": false,
    "description": "You can use the AWS::Route53::HealthCheck resource to check the health of your resources before Amazon Route 53 responds to a DNS query.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "You can use the AWS::Route53::HealthCheck resource to check the health of your resources before Amazon Route 53 responds to a DNS query."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "HealthCheckConfig": {
            "type": "Object",
            "required": false,
            "description": "An Amazon Route 53 health check.",
            "properties": {
              "FailureThreshold": {
                "type": "Number",
                "required": false,
                "description": "The number of consecutive health checks that an endpoint must pass or fail for Amazon Route 53 to change the current status of the endpoint from unhealthy to healthy or healthy to unhealthy."
              },
              "FullyQualifiedDomainName": {
                "type": "String",
                "required": false,
                "description": "If you specified the IPAddress property, the value that you want Amazon Route 53 to pass in the host header in all health checks except for TCP health checks. If you don't specify an IP address, the domain that Amazon Route 53 sends a DNS request to. Amazon Route 53 uses the IP address that the DNS returns to check the health of the endpoint."
              },
              "IPAddress": {
                "type": "String",
                "required": false,
                "description": "The IPv4 IP address of the endpoint on which you want Amazon Route 53 to perform health checks. If you don't specify an IP address, Amazon Route 53 sends a DNS request to resolve the domain name that you specify in the FullyQualifiedDomainName property."
              },
              "Port": {
                "type": "Number",
                "required": false,
                "description": "The port on the endpoint on which you want Amazon Route 53 to perform health checks."
              },
              "RequestInterval": {
                "type": "Number",
                "required": false,
                "description": "The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request. Each Amazon Route 53 health checker makes requests at this interval."
              },
              "ResourcePath": {
                "type": "String",
                "required": false,
                "description": "The path that you want Amazon Route 53 to request when performing health checks. The path can be any value for which your endpoint returns an HTTP status code of 2xx or 3xx when the endpoint is healthy, such as /docs/route53-health-check.html."
              },
              "SearchString": {
                "type": "String",
                "required": false,
                "description": "If the value of the Type property is HTTP_STR_MATCH or HTTP_STR_MATCH, the string that you want Amazon Route 53 to search for in the response body from the specified resource. If the string appears in the response body, Amazon Route 53 considers the resource healthy."
              },
              "Type": {
                "type": "String",
                "required": true,
                "allowed-values": [
                  "*",
                  "HTTP",
                  "HTTPS",
                  "HTTP_STR_MATCH",
                  "HTTPS_STR_MATCH",
                  "TCP"
                ],
                "description": "The type of health check that you want to create, which indicates how Amazon Route 53 determines whether an endpoint is healthy. You can specify HTTP, HTTPS, HTTP_STR_MATCH, HTTPS_STR_MATCH, or TCP."
              }
            }
          },
          "HealthCheckTags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53::HostedZone": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Route53::HostedZone resource creates a hosted zone, which can contain a collection of record sets for a domain.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Route53::HostedZone resource creates a hosted zone, which can contain a collection of record sets for a domain."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "HostedZoneConfig": {
            "type": "Object",
            "required": false,
            "description": "A complex type that contains an optional comment about your hosted zone.",
            "properties": {
              "Comment": {
                "type": "String",
                "required": false,
                "description": "Any comments that you want to include about the hosted zone."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the domain. For resource record types that include a domain name, specify a fully qualified domain name."
          },
          "VPCs": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "One or more VPCs that you want to associate with this hosted zone. When you specify this property, AWS CloudFormation creates a private hosted zone.",
            "properties": {
              "VPCId": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::VPC",
                "description": "The ID of the Amazon VPC that you want to associate with the hosted zone."
              },
              "VPCRegion": {
                "type": "String",
                "required": true,
                "description": "The region in which the Amazon VPC was created as specified in the VPCId property."
              }
            }
          },
          "HostedZoneTags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53::RecordSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Route53::RecordSet type can be used as a standalone resource or as an embedded property in the AWS::Route53::RecordSetGroup type.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Route53::RecordSet type can be used as a standalone resource or as an embedded property in the AWS::Route53::RecordSetGroup type."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AliasTarget": {
            "type": "Object",
            "required": false,
            "description": "Alias resource record sets only: Information about the domain to which you are redirecting traffic. Required: Conditional. Required if you are creating an alias resource record set.",
            "properties": {
              "DNSName": {
                "type": "String",
                "required": true,
                "description": "The DNS name of the Load Balancer that is the target of the alias."
              },
              "EvaluateTargetHealth": {
                "type": "Boolean",
                "required": true,
                "description": "Whether Amazon Route 53 checks the health of the resource record sets in the alias target when responding to DNS queries."
              },
              "HostedZoneId": {
                "type": "String",
                "required": true,
                "description": "The hosted zone name ID of the Load Balancer that is the target of the alias."
              }
            }
          },
          "Comment": {
            "type": "String",
            "required": false,
            "description": "Any comments you want to include about the hosted zone."
          },
          "Failover": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "PRIMARY",
              "SECONDARY"
            ],
            "description": "Designates the record set as a PRIMARY or SECONDARY failover record set."
          },
          "GeoLocation": {
            "type": "Object",
            "required": false,
            "description": "Describes how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.",
            "properties": {
              "ContinentCode": {
                "type": "String",
                "required": false,
                "description": "All DNS queries from the continent that you specified are routed to this resource record set. If you specify this property, omit the CountryCode and SubdivisionCode properties."
              },
              "CountryCode": {
                "type": "String",
                "required": false,
                "description": "All DNS queries from the country that you specified are routed to this resource record set. If you specify this property, omit the ContinentCode property."
              },
              "SubdivisionCode": {
                "type": "String",
                "required": false,
                "description": "If you specified US for the country code, you can specify a state in the United States. All DNS queries from the state that you specified are routed to this resource record set. If you specify this property, you must specify US for the CountryCode and omit the ContinentCode property."
              }
            }
          },
          "HostedZoneId": {
            "type": "String",
            "required": false,
            "description": "The ID of the hosted zone. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
          },
          "HostedZoneName": {
            "type": "String",
            "required": false,
            "description": "The name of the domain for the hosted zone where you want to add the record set. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "The name of the domain. This must be a fully-specified domain, ending with a period as the last label indication. If you omit the final period, Amazon Route 53 assumes the domain is relative to the root."
          },
          "Region": {
            "type": "String",
            "required": false,
            "description": "Latency resource record sets only: The Amazon EC2 region where the resource that is specified in this resource record set resides. The resource typically is an AWS resource, for example, Amazon EC2 instance or an Elastic Load Balancing load balancer, and is referred to by an IP address or a DNS domain name, depending on the record type."
          },
          "ResourceRecords": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": "AWS::EC2::EIP",
            "description": "List of resource records to add. Each record should be in the format appropriate for the record type specified by the Type property. Required: Conditional. Required if TTL is specified."
          },
          "SetIdentifier": {
            "type": "String",
            "required": false,
            "description": "A unique identifier that differentiates among multiple resource record sets that have the same combination of DNS name and type. Required: Conditional. Required if you are creating a weighted resource record set."
          },
          "TTL": {
            "type": "String",
            "required": false,
            "description": "The resource record cache time to live (TTL), in seconds. If TTL is specified, ResourceRecords is also required."
          },
          "Type": {
            "type": "String",
            "required": true,
            "description": "The type of records to add.",
            "allowed-values": [
              "A",
              "AAAA",
              "CNAME",
              "MX",
              "NS",
              "PTR",
              "SOA",
              "SPF",
              "SRV",
              "TXT"
            ]
          },
          "Weight": {
            "type": "Number",
            "required": false,
            "description": "Weighted resource record sets only: Among resource record sets that have the same combination of DNS name and type, a value that determines what portion of traffic for the current resource record set is routed to the associated location. Required: Conditional. Required if you are creating a weighted resource record set."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Route53::RecordSetGroup": {
    "type": "Object",
    "required": false,
    "description": "Creates or updates a new Amazon Route 53RecordSetGroup.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates or updates a new Amazon Route 53RecordSetGroup."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "HostedZoneId": {
            "type": "String",
            "required": false,
            "description": "The ID of the hosted zone. Required: Conditional: You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
          },
          "HostedZoneName": {
            "type": "String",
            "required": false,
            "description": "The name of the domain for the hosted zone where you want to add the record set. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
          },
          "Comment": {
            "type": "String",
            "required": false,
            "description": "Any comments you want to include about the hosted zone."
          },
          "RecordSets": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "List of resource record sets to add.",
            "properties": {
              "AliasTarget": {
                "type": "Object",
                "required": false,
                "description": "Alias resource record sets only: Information about the domain to which you are redirecting traffic. Required: Conditional. Required if you are creating an alias resource record set.",
                "properties": {
                  "DNSName": {
                    "type": "String",
                    "required": true,
                    "description": "The DNS name of the Load Balancer that is the target of the alias."
                  },
                  "EvaluateTargetHealth": {
                    "type": "Boolean",
                    "required": true,
                    "description": "Whether Amazon Route 53 checks the health of the resource record sets in the alias target when responding to DNS queries."
                  },
                  "HostedZoneId": {
                    "type": "String",
                    "required": true,
                    "description": "The hosted zone name ID of the Load Balancer that is the target of the alias."
                  }
                }
              },
              "Comment": {
                "type": "String",
                "required": false,
                "description": "Any comments you want to include about the hosted zone."
              },
              "Failover": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "PRIMARY",
                  "SECONDARY"
                ],
                "description": "Designates the record set as a PRIMARY or SECONDARY failover record set."
              },
              "GeoLocation": {
                "type": "Object",
                "required": false,
                "description": "Describes how Amazon Route 53 responds to DNS queries based on the geographic origin of the query.",
                "properties": {
                  "ContinentCode": {
                    "type": "String",
                    "required": false,
                    "description": "All DNS queries from the continent that you specified are routed to this resource record set. If you specify this property, omit the CountryCode and SubdivisionCode properties."
                  },
                  "CountryCode": {
                    "type": "String",
                    "required": false,
                    "description": "All DNS queries from the country that you specified are routed to this resource record set. If you specify this property, omit the ContinentCode property."
                  },
                  "SubdivisionCode": {
                    "type": "String",
                    "required": false,
                    "description": "If you specified US for the country code, you can specify a state in the United States. All DNS queries from the state that you specified are routed to this resource record set. If you specify this property, you must specify US for the CountryCode and omit the ContinentCode property."
                  }
                }
              },
              "HostedZoneId": {
                "type": "String",
                "required": false,
                "description": "The ID of the hosted zone. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
              },
              "HostedZoneName": {
                "type": "String",
                "required": false,
                "description": "The name of the domain for the hosted zone where you want to add the record set. Required: Conditional. You must specify either the HostedZoneName or HostedZoneId, but you cannot specify both."
              },
              "Name": {
                "type": "String",
                "required": true,
                "description": "The name of the domain. This must be a fully-specified domain, ending with a period as the last label indication. If you omit the final period, Amazon Route 53 assumes the domain is relative to the root."
              },
              "Region": {
                "type": "String",
                "required": false,
                "description": "Latency resource record sets only: The Amazon EC2 region where the resource that is specified in this resource record set resides. The resource typically is an AWS resource, for example, Amazon EC2 instance or an Elastic Load Balancing load balancer, and is referred to by an IP address or a DNS domain name, depending on the record type."
              },
              "ResourceRecords": {
                "type": "Array",
                "array-type": "String",
                "required": false,
                "resource-ref-type": "AWS::EC2::EIP",
                "description": "List of resource records to add. Each record should be in the format appropriate for the record type specified by the Type property. Required: Conditional. Required if TTL is specified."
              },
              "SetIdentifier": {
                "type": "String",
                "required": false,
                "description": "A unique identifier that differentiates among multiple resource record sets that have the same combination of DNS name and type. Required: Conditional. Required if you are creating a weighted resource record set."
              },
              "TTL": {
                "type": "String",
                "required": false,
                "description": "The resource record cache time to live (TTL), in seconds. If TTL is specified, ResourceRecords is also required."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of records to add.",
                "allowed-values": [
                  "A",
                  "AAAA",
                  "CNAME",
                  "MX",
                  "NS",
                  "PTR",
                  "SOA",
                  "SPF",
                  "SRV",
                  "TXT"
                ]
              },
              "Weight": {
                "type": "Number",
                "required": false,
                "description": "Weighted resource record sets only: Among resource record sets that have the same combination of DNS name and type, a value that determines what portion of traffic for the current resource record set is routed to the associated location. Required: Conditional. Required if you are creating a weighted resource record set."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::S3::Bucket": {
    "type": "Object",
    "required": false,
    "description": "The AWS::S3::Bucket type creates an Amazon S3 bucket.",
    "return-values": [
      {
        "name": "DomainName",
        "description": "The DNS name of the specified bucket."
      },
      {
        "name": "WebsiteURL",
        "description": "Amazon S3 website endpoint for the specified bucket."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::S3::Bucket type creates an Amazon S3 bucket."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "AccessControl": {
            "type": "String",
            "required": false,
            "description": "A canned ACL that grants predefined permissions on the bucket. Default is Private.",
            "allowed-values": [
              "*",
              "Private",
              "PublicRead",
              "PublicReadWrite",
              "AuthenticatedRead",
              "LogDeliveryWrite",
              "BucketOwnerRead",
              "BucketOwnerFullControl"
            ]
          },
          "BucketName": {
            "type": "String",
            "required": false,
            "description": "A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the bucket name."
          },
          "CorsConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Rules that define cross-origin resource sharing of objects in this bucket.",
            "properties": {
              "CorsRules": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "A set of origins and methods that you allow.",
                "properties": {
                  "AllowedHeaders": {
                    "type": "Array",
                    "array-type": "String",
                    "required": false,
                    "description": "Headers that are specified in the Access-Control-Request-Headers header. These headers are allowed in a preflight OPTIONS request. In response to any preflight OPTIONS request, Amazon S3 returns any requested headers that are allowed."
                  },
                  "AllowedMethods": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "description": "An HTTP method that you allow the origin to execute. The valid values are GET, PUT, HEAD, POST, and DELETE.",
                    "allowed-values": [
                      "GET",
                      "PUT",
                      "HEAD",
                      "POST",
                      "DELETE"
                    ]
                  },
                  "AllowedOrigins": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "description": "An origin that you allow to send cross-domain requests."
                  },
                  "ExposedHeaders": {
                    "type": "Array",
                    "array-type": "String",
                    "required": true,
                    "description": "One or more headers in the response that are accessible to client applications (for example, from a JavaScript XMLHttpRequest object)."
                  },
                  "Id": {
                    "type": "String",
                    "required": false,
                    "description": "A unique identifier for this rule. The value cannot be more than 255 characters."
                  },
                  "MaxAge": {
                    "type": "Number",
                    "required": false,
                    "description": "The time in seconds that your browser is to cache the preflight response for the specified resource."
                  }
                }
              }
            }
          },
          "LifecycleConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Rules that define how Amazon S3 manages objects during their lifetime.",
            "properties": {
              "Rules": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "A lifecycle rule for individual objects in a bucket.",
                "properties": {
                  "ExpirationDate": {
                    "type": "String",
                    "required": false,
                    "description": "Indicates when objects are deleted from Amazon S3 and Amazon Glacier. The date value must be in ISO 8601 format. The time is always midnight UTC."
                  },
                  "ExpirationInDays": {
                    "type": "Number",
                    "required": false,
                    "description": "Indicates the number of days after creation when objects are deleted from Amazon S3 and Amazon Glacier."
                  },
                  "Id": {
                    "type": "String",
                    "required": false,
                    "description": "A unique identifier for this rule. The value cannot be more than 255 characters."
                  },
                  "NoncurrentVersionExpirationInDays": {
                    "type": "Number",
                    "required": false,
                    "description": "For buckets with versioning enabled (or suspended), specifies the time, in days, between when a new version of the object is uploaded to the bucket and when old versions of the object expire."
                  },
                  "NoncurrentVersionTransition": {
                    "type": "Object",
                    "required": false,
                    "description": "For buckets with versioning enabled (or suspended), specifies when non-current objects transition to a specified storage class. If you specify a transition and expiration time, the expiration time must be later than the transition time.",
                    "properties": {
                      "StorageClass": {
                        "type": "String",
                        "required": true,
                        "description": "The storage class to which you want the object to transition. Currently, you can specify only Glacier.",
                        "allowed-values": [
                          "Glacier"
                        ]
                      },
                      "TransitionInDays": {
                        "type": "Number",
                        "required": false,
                        "description": "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC."
                      }
                    }
                  },
                  "Prefix": {
                    "type": "String",
                    "required": false,
                    "description": "Object key prefix that identifies one or more objects to which this rule applies."
                  },
                  "Status": {
                    "type": "String",
                    "required": true,
                    "description": "Specify either Enabled or Disabled. If you specify Enabled, Amazon S3 executes this rule as scheduled. If you specify Disabled, Amazon S3 ignores this rule",
                    "allowed-values": [
                      "Enabled",
                      "Disabled"
                    ]
                  },
                  "Transition": {
                    "type": "Object",
                    "required": true,
                    "description": "Describes when an object transitions to a specified storage class.",
                    "properties": {
                      "StorageClass": {
                        "type": "String",
                        "required": true,
                        "description": "The storage class to which you want the object to transition. Currently, you can specify only Glacier.",
                        "allowed-values": [
                          "Glacier"
                        ]
                      },
                      "TransitionDate": {
                        "type": "String",
                        "required": false,
                        "description": "Indicates the number of days after creation when objects are transitioned to the specified storage class."
                      },
                      "TransitionInDays": {
                        "type": "Number",
                        "required": false,
                        "description": "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC."
                      }
                    }
                  },
                  "Transitions": {
                    "type": "Array",
                    "array-type": "Object",
                    "required": true,
                    "description": "Describes when an object transitions to a specified storage class.",
                    "properties": {
                      "StorageClass": {
                        "type": "String",
                        "required": true,
                        "description": "The storage class to which you want the object to transition. Currently, you can specify only Glacier.",
                        "allowed-values": [
                          "Glacier"
                        ]
                      },
                      "TransitionDate": {
                        "type": "String",
                        "required": false,
                        "description": "Indicates the number of days after creation when objects are transitioned to the specified storage class."
                      },
                      "TransitionInDays": {
                        "type": "Number",
                        "required": false,
                        "description": "Indicates when objects are transitioned to the specified storage class. The date value must be in ISO 8601 format. The time is always midnight UTC."
                      }
                    }
                  }
                }
              }
            }
          },
          "LoggingConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Settings that defines where logs are stored.",
            "properties": {
              "DestinationBucketName": {
                "type": "String",
                "required": false,
                "description": "The name of an Amazon S3 bucket where Amazon S3 store server access log files. You can store log files in any bucket that you own. By default, logs are stored in the bucket where the LoggingConfiguration property is defined.",
                "resource-ref-type": "AWS::S3::Bucket"
              },
              "LogFilePrefix": {
                "type": "String",
                "required": false,
                "description": "A prefix for the all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket, you can use a prefix to distinguish which log files came from which bucket."
              }
            }
          },
          "NotificationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configuration that defines which Amazon SNS topic to send messages to and what events to report.",
            "properties": {
              "LambdaConfigurations": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The AWS Lambda functions to invoke and the events for which to invoke the functions.",
                "properties": {
                  "Event": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon S3 bucket event about which to send notifications.",
                    "allowed-values": [
                      "s3:ObjectCreated:*",
                      "s3:ObjectCreated:Put",
                      "s3:ObjectCreated:Post",
                      "s3:ObjectCreated:Copy",
                      "s3:ObjectCreated:CompleteMultipartUpload",
                      "s3:ObjectRemoved:*",
                      "s3:ObjectRemoved:Delete",
                      "s3:ObjectRemoved:DeleteMarkerCreated",
                      "s3:ReducedRedundancyLostObject",
                      "*"
                    ]
                  },
                  "Function": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the Lambda function that Amazon S3 invokes when the specified event type occurs.",
                    "resource-ref-type": "AWS::Lambda::Function"
                  }
                }
              },
              "QueueConfigurations": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages.",
                "properties": {
                  "Event": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon S3 bucket event about which to send notifications.",
                    "allowed-values": [
                      "s3:ObjectCreated:*",
                      "s3:ObjectCreated:Put",
                      "s3:ObjectCreated:Post",
                      "s3:ObjectCreated:Copy",
                      "s3:ObjectCreated:CompleteMultipartUpload",
                      "s3:ObjectRemoved:*",
                      "s3:ObjectRemoved:Delete",
                      "s3:ObjectRemoved:DeleteMarkerCreated",
                      "s3:ReducedRedundancyLostObject",
                      "*"
                    ]
                  },
                  "Queue": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon Resource Name (ARN) of the Amazon SQS queue that Amazon S3 publishes messages to when the specified event type occurs.",
                    "resource-ref-type": "AWS::SQS::Queue"
                  }
                }
              },
              "TopicConfigurations": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": "The topic to which notifications are sent and the events for which notification are generated.",
                "properties": {
                  "Event": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon S3 bucket event about which to send notifications.",
                    "allowed-values": [
                      "s3:ObjectCreated:*",
                      "s3:ObjectCreated:Put",
                      "s3:ObjectCreated:Post",
                      "s3:ObjectCreated:Copy",
                      "s3:ObjectCreated:CompleteMultipartUpload",
                      "s3:ObjectRemoved:*",
                      "s3:ObjectRemoved:Delete",
                      "s3:ObjectRemoved:DeleteMarkerCreated",
                      "s3:ReducedRedundancyLostObject",
                      "*"
                    ]
                  },
                  "Topic": {
                    "type": "String",
                    "required": true,
                    "description": "The Amazon SNS topic to which Amazon S3 reports the specified events.",
                    "resource-ref-type": "AWS::SNS::Topic"
                  }
                }
              }
            }
          },
          "ReplicationConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Configuration for replicating objects in an S3 bucket. To enable replication, you must also enable versioning by using the VersioningConfiguration property.",
            "properties": {
              "Role": {
                "type": "String",
                "required": true,
                "description": "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that Amazon S3 assumes when replicating objects."
              },
              "Rules": {
                "type": "Array",
                "array-type": "Object",
                "required": true,
                "description": " replication rule that specifies which objects to replicate and where they are stored.",
                "properties": {
                  "Destination": {
                    "type": "String",
                    "required": true,
                    "description": "Defines the destination where Amazon S3 stores replicated objects."
                  },
                  "Id": {
                    "type": "String",
                    "required": false,
                    "description": "A unique identifier for the rule. If you don't specify a value, AWS CloudFormation generates a random ID."
                  },
                  "Prefix": {
                    "type": "String",
                    "required": true,
                    "description": "An object prefix. This rule applies to all Amazon S3 objects with this prefix. To specify all objects in an S3 bucket, specify an empty string."
                  },
                  "Status": {
                    "type": "String",
                    "required": true,
                    "description": "Whether the rule is enabled.",
                    "allowed-values": [
                      "Enabled",
                      "Disabled"
                    ]
                  }
                }
              }
            }
          },
          "VersioningConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Enables multiple variants of all objects in this bucket. You might enable versioning to prevent objects from being deleted or overwritten by mistake or to archive objects so that you can retrieve previous versions of them.",
            "properties": {
              "Status": {
                "type": "String",
                "required": true,
                "description": "The versioning state of an Amazon S3 bucket. If you enable versioning, you must suspend versioning to disable it.",
                "allowed-values": [
                  "Enabled",
                  "Suspended"
                ]
              }
            }
          },
          "WebsiteConfiguration": {
            "type": "Object",
            "required": false,
            "description": "Information used to configure the bucket as a static website.",
            "properties": {
              "ErrorDocument": {
                "type": "String",
                "required": false,
                "description": "The name of the error document."
              },
              "IndexDocument": {
                "type": "String",
                "required": false,
                "description": "The name of the index document."
              },
              "RedirectAllRequestsTo": {
                "type": "Object",
                "required": false,
                "description": "The redirect behavior for every request to this bucket's website endpoint.",
                "properties": {
                  "HostName": {
                    "type": "String",
                    "required": true,
                    "description": "Name of the host where requests are redirected."
                  },
                  "Protocol": {
                    "type": "String",
                    "required": false,
                    "description": "Protocol to use (http or https) when redirecting requests. The default is the protocol that is used in the original request.",
                    "allowed-values": [
                      "http",
                      "https"
                    ]
                  }
                }
              },
              "RoutingRules": {
                "type": "Array",
                "array-type": "Object",
                "required": false,
                "description": "Rules that define when a redirect is applied and the redirect behavior.",
                "properties": {
                  "RedirectRule": {
                    "type": "Object",
                    "required": true,
                    "description": "Redirect requests to another host, to another page, or with another protocol.",
                    "properties": {
                      "HostName": {
                        "type": "String",
                        "required": true,
                        "description": "Name of the host where requests are redirected."
                      },
                      "HttpRedirectCode": {
                        "type": "String",
                        "required": false,
                        "description": "The HTTP redirect code to use on the response."
                      },
                      "Protocol": {
                        "type": "String",
                        "required": false,
                        "description": "Protocol to use (http or https) when redirecting requests. The default is the protocol that is used in the original request.",
                        "allowed-values": [
                          "http",
                          "https"
                        ]
                      },
                      "ReplaceKeyPrefixWith": {
                        "type": "String",
                        "required": false,
                        "description": "The object key prefix to use in the redirect request. For example, to redirect requests for all pages with the prefix docs/ (objects in the docs/ folder) to the documents/ prefix, you can set the KeyPrefixEquals property in routing condition property to docs/, and set the ReplaceKeyPrefixWith property to documents/."
                      },
                      "ReplaceKeyWith": {
                        "type": "String",
                        "required": false,
                        "description": "The specific object key to use in the redirect request. For example, redirect request to error.html."
                      }
                    }
                  },
                  "RoutingRuleCondition": {
                    "type": "Object",
                    "required": false,
                    "description": "Rules that define when a redirect is applied.",
                    "properties": {
                      "HttpErrorCodeReturnedEquals": {
                        "type": "String",
                        "required": false,
                        "description": "Applies this redirect if the error code equals this value in the event of an error."
                      },
                      "KeyPrefixEquals": {
                        "type": "String",
                        "required": false,
                        "description": "The object key name prefix when the redirect is applied."
                      }
                    }
                  }
                }
              }
            }
          },
          "Tags": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The tags that you want to attach.",
            "properties": {
              "Key": {
                "type": "String",
                "required": true,
                "description": "The key term for this item."
              },
              "Value": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "A value associated with the key term."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::S3::BucketPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::S3::BucketPolicy type applies a policy to an Amazon S3 bucket.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::S3::BucketPolicy type applies a policy to an Amazon S3 bucket."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified SNS topics."
          },
          "Bucket": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::S3::Bucket",
            "description": "Name of the bucket to which you want to add the policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SDB::Domain": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SDB::Domain creates a Amazon SimpleDB Domain.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SDB::Domain creates a Amazon SimpleDB Domain."
      },
      "Properties": {
        "type": "Object",
        "required": false,
        "properties": {}
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Serverless::Api": {
    "type": "Object",
    "required": false,
    "description": "Creates a collection of Amazon API Gateway resources and methods that can be invoked through HTTPS endpoints.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a collection of Amazon API Gateway resources and methods that can be invoked through HTTPS endpoints."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "StageName": {
            "type": "String",
            "required": true,
            "description": "The name of the stage, which API Gateway uses as the first path segment in the invoke Uniform Resource Identifier (URI)."
          },
          "DefinitionUri": {
            "type": "String",
            "required": true,
            "description": "S3 URI to the Swagger document describing the API."
          },
          "CacheClusterEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether cache clustering is enabled for the stage."
          },
          "CacheClusterSize": {
            "type": "String",
            "required": false,
            "description": "The stage's cache cluster size."
          },
          "Variables": {
            "type": "Json",
            "required": false,
            "description": "A map (string to string map) that defines the stage variables, where the variable name is the key and the variable value is the value."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Serverless::Function": {
    "type": "Object",
    "required": false,
    "description": "Creates a Lambda function, IAM execution role, and event source mappings which trigger the function.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "Creates a Lambda function, IAM execution role, and event source mappings which trigger the function."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Handler": {
            "type": "String",
            "required": true,
            "description": "Function within your code that is called to begin execution."
          },
          "Runtime": {
            "type": "String",
            "required": true,
            "allowed-values": [
              "*",
              "dotnetcore1.0",
              "nodejs",
              "nodejs4.3",
              "java8",
              "python2.7"
            ],
            "description": "The runtime environment for the Lambda function that you are uploading."
          },
          "CodeUri": {
            "type": "String",
            "required": true,
            "description": "S3 Uri to the function code. The S3 object this Uri references MUST be a Lambda deployment package."
          },
          "Description": {
            "type": "String",
            "required": false,
            "description": "Description of the function."
          },
          "MemorySize": {
            "type": "Number",
            "required": false,
            "description": "The amount of memory, in MB, that is allocated to your Lambda function. Lambda uses this value to infer the amount of CPU and memory that is allocated to your function."
          },
          "Timeout": {
            "type": "Number",
            "required": false,
            "description": "The function execution time (in seconds) after which Lambda terminates the function. By default, Timeout is set to 3 seconds."
          },
          "Role": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::IAM::Role",
            "description": "The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Lambda assumes when it runs your code to access AWS."
          },
          "Policies": {
            "type": "Array",
            "array-type": "String",
            "required": false,
            "resource-ref-type": [
              "*",
              "AWS::IAM::Policy"
            ],
            "description": "Names of AWS managed IAM policies or IAM policy documents that this function needs, which should be appended to the default role for this function."
          },
          "Environment": {
            "type": "Object",
            "required": false,
            "description": "Key-value pairs that Lambda caches and makes available for your Lambda functions.",
            "properties": {
              "Variables": {
                "type": "Json",
                "required": false,
                "description": "A map of key-value pairs that the Lambda function can access."
              }
            }
          },
          "VpcConfig": {
            "type": "Object",
            "required": false,
            "description": "If the Lambda function requires access to resources in a VPC, specify a VPC configuration that Lambda uses to set up an elastic network interface (ENI).",
            "properties": {
              "SecurityGroupIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::SecurityGroup",
                "description": "A list of one or more security groups IDs in the VPC that includes the resources to which your Lambda function requires access."
              },
              "SubnetIds": {
                "type": "Array",
                "array-type": "String",
                "required": true,
                "resource-ref-type": "AWS::EC2::Subnet",
                "description": "A list of one or more subnet IDs in the VPC that includes the resources to which your Lambda function requires access."
              }
            }
          },
          "Events": {
            "type": "Named-Array",
            "schema-lookup-property": "Type",
            "required": false,
            "description": "A map (string to Event source object) that defines the events that trigger this function.",
            "child-schemas": {
              "S3": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type S3.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type S3."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Bucket": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::S3::Bucket",
                        "description": "S3 bucket name."
                      },
                      "Events": {
                        "type": "Array",
                        "array-type": "String",
                        "required": true,
                        "allowed-values": [
                          "s3:ObjectCreated:*",
                          "s3:ObjectCreated:Put",
                          "s3:ObjectCreated:Post",
                          "s3:ObjectCreated:Copy",
                          "s3:ObjectCreated:CompleteMultipartUpload",
                          "s3:ObjectRemoved:*",
                          "s3:ObjectRemoved:Delete",
                          "s3:ObjectRemoved:DeleteMarkerCreated",
                          "s3:ReducedRedundancyLostObject",
                          "*"
                        ],
                        "description": "S3 event types."
                      },
                      "Filter": {
                        "type": "Object",
                        "required": false,
                        "description": "Rules to filter events on.",
                        "properties": {
                          "S3Key": {
                            "type": "String",
                            "required": true,
                            "description": "Amazon S3 filtering rules that describe for which object key names to send notifications."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "SNS": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type SNS.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type S3."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Topic": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::SNS::Topic",
                        "description": "Topic ARN."
                      }
                    }
                  }
                }
              },
              "Kinesis": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type Kinesis.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type Kinesis."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Stream": {
                        "type": "String",
                        "required": true,
                        "resource-ref-type": "AWS::Kinesis::Stream",
                        "description": "ARN of the Amazon Kinesis stream."
                      },
                      "StartingPosition": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "TRIM_HORIZON",
                          "LATEST"
                        ],
                        "description": "One of TRIM_HORIZON or LATEST."
                      },
                      "BatchSize": {
                        "type": "Number",
                        "required": false,
                        "description": "Maximum number of stream records to process per function invocation."
                      }
                    }
                  }
                }
              },
              "DynamoDB": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type DynamoDB.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type DynamoDB."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Stream": {
                        "type": "String",
                        "required": true,
                        "description": "ARN of the DynamoDB stream."
                      },
                      "StartingPosition": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "TRIM_HORIZON",
                          "LATEST"
                        ],
                        "description": "One of TRIM_HORIZON or LATEST."
                      },
                      "BatchSize": {
                        "type": "Number",
                        "required": false,
                        "description": "Maximum number of stream records to process per function invocation."
                      }
                    }
                  }
                }
              },
              "Api": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type Api.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type Api."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Path": {
                        "type": "String",
                        "required": true,
                        "description": "Uri path for which this function is invoked. MUST start with /."
                      },
                      "Method": {
                        "type": "String",
                        "required": true,
                        "allowed-values": [
                          "*",
                          "ANY",
                          "DELETE",
                          "GET",
                          "HEAD",
                          "OPTIONS",
                          "PATCH",
                          "POST",
                          "PUT"
                        ],
                        "description": "HTTP method for which this function is invoked."
                      },
                      "RestApiId": {
                        "type": "String",
                        "required": false,
                        "resource-ref-type": [
                          "*",
                          "AWS::Serverless::Api"
                        ],
                        "description": "Identifier of a RestApi resource which MUST contain an operation with the given path and method."
                      },
                      "RestApiStage": {
                        "type": "String",
                        "required": false,
                        "description": "Stage name of the RestApi resource which triggers this event. MUST be specified if RestApiId property is specified."
                      }
                    }
                  }
                }
              },
              "Schedule": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type Schedule.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type Schedule."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Schedule": {
                        "type": "String",
                        "required": true,
                        "description": "Schedule expression for example \"rate(5 minutes)\", see the CloudWatch Events user guide for details on the format of this field."
                      },
                      "Input": {
                        "type": "Json",
                        "required": true,
                        "description": "JSON-formatted string to pass to the function as the event body."
                      }
                    }
                  }
                }
              },
              "CloudWatchEvent": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type CloudWatchEvent.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type CloudWatchEvent."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Pattern": {
                        "type": "Json",
                        "required": true,
                        "description": "Pattern describing which CloudWatch events trigger the function. Only matching events trigger the function."
                      },
                      "Input": {
                        "type": "Json",
                        "required": false,
                        "description": "JSON-formatted string to pass to the function as the event body."
                      },
                      "InputPath": {
                        "type": "String",
                        "required": false,
                        "description": "JSONPath describing the part of the event to pass to the function."
                      }
                    }
                  }
                }
              },
              "IoTRule": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type IoTRule.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type IoTRule."
                  },
                  "Properties": {
                    "type": "Object",
                    "required": true,
                    "properties": {
                      "Sql": {
                        "type": "String",
                        "required": true,
                        "description": "The SQL statement that queries the topic. For more information, see Rules for AWS IoT in the AWS IoT Developer Guide."
                      },
                      "AwsIotSqlVersion": {
                        "type": "String",
                        "required": false,
                        "description": "The version of the SQL rules engine to use when evaluating the rule."
                      }
                    }
                  }
                }
              },
              "AlexaSkill": {
                "type": "Object",
                "required": false,
                "description": "The object describing an event source with type AlexaSkill.",
                "properties": {
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The object describing an event source with type AlexaSkill."
                  },
                  "Properties": {
                    "type": "Json",
                    "required": true
                  }
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::Serverless::SimpleTable": {
    "type": "Object",
    "required": false,
    "description": "The AWS::Serverless::SimpleTable resource creates a DynamoDB table with a single attribute primary key. It is useful when data only needs to be accessed via a primary key.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::Serverless::SimpleTable resource creates a DynamoDB table with a single attribute primary key. It is useful when data only needs to be accessed via a primary key."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PrimaryKey": {
            "type": "Object",
            "required": false,
            "description": "Attribute name and type to be used as the table's primary key. This cannot be modified without replacing the resource.",
            "properties": {
              "Name": {
                "type": "String",
                "required": false,
                "description": "Attribute name of the primary key. Defaults to id."
              },
              "Type": {
                "type": "String",
                "required": false,
                "allowed-values": [
                  "*",
                  "String",
                  "Number",
                  "Binary"
                ],
                "description": "Attribute type of the primary key."
              }
            }
          },
          "ProvisionedThroughput": {
            "type": "Object",
            "required": false,
            "description": "Read and write throughput provisioning information. Defaults to 5 read and 5 write capacity units per second.",
            "properties": {
              "ReadCapacityUnits": {
                "type": "Number",
                "required": false,
                "description": "Sets the desired minimum number of consistent reads of items (up to 1KB in size) per second for the specified table before Amazon DynamoDB balances the load."
              },
              "WriteCapacityUnits": {
                "type": "Number",
                "required": false,
                "description": "Sets the desired minimum number of consistent writes of items (up to 1KB in size) per second for the specified table before Amazon DynamoDB balances the load."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SNS::Subscription": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SNS::Subscription resource subscribes an endpoint to an Amazon Simple Notification Service (Amazon SNS) topic.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SNS::Subscription resource subscribes an endpoint to an Amazon Simple Notification Service (Amazon SNS) topic."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Endpoint": {
            "type": "String",
            "required": false,
            "resource-ref-type": [
              "*",
              "AWS::SQS::Queue",
              "AWS::Lambda::Function"
            ],
            "description": "The endpoint that receives notifications from the Amazon SNS topic."
          },
          "Protocol": {
            "type": "String",
            "required": false,
            "allowed-values": [
              "*",
              "http",
              "https",
              "email",
              "email-json",
              "sms",
              "sqs",
              "application",
              "lambda"
            ],
            "description": "The subscription's protocol."
          },
          "TopicArn": {
            "type": "String",
            "required": false,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Name (ARN) of the topic to subscribe to."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SNS::Topic": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SNS::Topic type creates an Amazon SNS topic.",
    "return-values": [
      {
        "name": "TopicName",
        "description": "Returns the name for an Amazon SNS topic."
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SNS::Topic type creates an Amazon SNS topic."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DisplayName": {
            "type": "String",
            "required": false,
            "description": "The human-readable name used in the \"From\" field for notifications to email and email-json endpoints"
          },
          "TopicName": {
            "type": "String",
            "required": false,
            "description": "A name for the topic. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the topic name."
          },
          "Subscription": {
            "type": "Array",
            "array-type": "Object",
            "required": true,
            "description": "Array of SNS Subscription type.",
            "properties": {
              "Endpoint": {
                "type": "String",
                "required": true,
                "resource-ref-type": "*",
                "description": "The subscription's endpoint (format depends on the protocol)."
              },
              "Protocol": {
                "type": "String",
                "required": true,
                "description": "The subscription's protocol.",
                "allowed-values": [
                  "http",
                  "https",
                  "email",
                  "email-json",
                  "sqs",
                  "sms",
                  "application",
                  "lambda"
                ]
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SNS::TopicPolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SNS::TopicPolicy type applies a policy to SNS topics.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SNS::TopicPolicy type applies a policy to SNS topics."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified SNS topics."
          },
          "Topics": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::SNS::Topic",
            "description": "The Amazon Resource Names (ARN) of the topics to which you want to add the policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SQS::Queue": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SQS::Queue type creates an Amazon SQS queue.",
    "return-values": [
      {
        "name": "Arn",
        "description": "Returns the Amazon Resource Name (ARN) of the queue. For example: arn:aws:sqs:us-east-1:123456789012:mystack-myqueue-15PG5C2FC1CW8"
      },
      {
        "name": "QueueName",
        "description": "Returns the queue name. For example: mystack-myqueue-1VF9BKQH5BJVI"
      }
    ],
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SQS::Queue type creates an Amazon SQS queue."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DelaySeconds": {
            "type": "Number",
            "required": false,
            "description": "The time in seconds that the delivery of all messages in the queue will be delayed. You can specify an integer value of 0 to 900 (15 minutes). The default value is 0."
          },
          "MaximumMessageSize": {
            "type": "Number",
            "required": false,
            "description": "The limit of how many bytes a message can contain before Amazon SQS rejects it."
          },
          "MessageRetentionPeriod": {
            "type": "Number",
            "required": false,
            "description": "The number of seconds Amazon SQS retains a message."
          },
          "QueueName": {
            "type": "String",
            "required": false,
            "description": "A name for the queue. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the queue name."
          },
          "ReceiveMessageWaitTimeSeconds": {
            "type": "Number",
            "required": false,
            "description": "Specifies the duration, in seconds, that the ReceiveMessage action call waits until a message is in the queue to include in the response, as opposed to returning an empty response if a message is not yet available to return."
          },
          "RedrivePolicy": {
            "type": "Object",
            "required": false,
            "description": "Specifies an existing dead letter queue to receive messages after the source queue (this queue) fails to process a message a specified number of times.",
            "properties": {
              "deadLetterTargetArn": {
                "type": "String",
                "required": false,
                "description": "The Amazon Resource Name (ARN) of the dead letter queue to which the messages are sent to after the maxReceiveCount value has been exceeded.",
                "resource-ref-type": "AWS::SQS::Queue"
              },
              "maxReceiveCount": {
                "type": "Number",
                "required": false,
                "description": "The number of times a message is delivered to the source queue before being sent to the dead letter queue."
              }
            }
          },
          "VisibilityTimeout": {
            "type": "Number",
            "required": false,
            "description": "The length of time during which the queue will be unavailable once a message is delivered from the queue. This blocks other components from receiving the same message and gives the initial component time to process and delete the message from the queue. Values must be from 0 to 43200 seconds (12 hours). If no value is specified, the default value of 30 seconds will be used."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SQS::QueuePolicy": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SQS::QueuePolicy type applies a policy to SQS queues.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SQS::QueuePolicy type applies a policy to SQS queues."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "PolicyDocument": {
            "type": "Policy",
            "required": true,
            "description": "A policy document containing permissions to add to the specified SQS queues."
          },
          "Queues": {
            "type": "Array",
            "array-type": "String",
            "required": true,
            "resource-ref-type": "AWS::SQS::Queue",
            "description": "The URLs of the queues to which you want to add the policy."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::SSM::Document": {
    "type": "Object",
    "required": false,
    "description": "The AWS::SSM::Document resource creates an Amazon EC2 Simple Systems Manager (SSM) document that describes an instance configuration, which you can use to set up and run commands on your instances.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::SSM::Document resource creates an Amazon EC2 Simple Systems Manager (SSM) document that describes an instance configuration, which you can use to set up and run commands on your instances."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Content": {
            "type": "Json",
            "required": true,
            "description": "A JSON object that describes an instance configuration."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::ByteMatchSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::ByteMatchSet resource creates an AWS WAF ByteMatchSet that identifies a part of a web request that you want to inspect.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::ByteMatchSet resource creates an AWS WAF ByteMatchSet that identifies a part of a web request that you want to inspect."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "ByteMatchTuples": {
            "type": "Object",
            "required": false,
            "description": "Settings for the ByteMatchSet, such as the bytes (typically a string that corresponds with ASCII characters) that you want AWS WAF to search for in web requests.",
            "properties": {
              "FieldToMatch": {
                "type": "Object",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string.",
                "properties": {
                  "Data": {
                    "type": "String",
                    "required": false,
                    "description": "If you specify HEADER for the Type property, the name of the header that AWS WAF searches for, such as User-Agent or Referer. If you specify any other value for the Type property, do not specify this property."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The part of the web request in which AWS WAF searches for the target string. For valid values, see FieldToMatch in the AWS WAF API Reference.",
                    "allowed-values": [
                      "HEADER",
                      "METHOD",
                      "QUERY_STRING",
                      "URI",
                      "*"
                    ]
                  }
                }
              },
              "PositionalConstraint": {
                "type": "String",
                "required": true,
                "description": "How AWS WAF finds matches within the web request part in which you are searching."
              },
              "TargetString": {
                "type": "String",
                "required": false,
                "description": "The value that AWS WAF searches for."
              },
              "TargetStringBase64": {
                "type": "String",
                "required": false,
                "description": "The base64-encoded value that AWS WAF searches for."
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the target string value. "
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the ByteMatchSet."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::IPSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::IPSet resource creates an AWS WAF IPSet that specifies which web requests to permit or block based on the IP addresses from which the requests originate.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::IPSet resource creates an AWS WAF IPSet that specifies which web requests to permit or block based on the IP addresses from which the requests originate."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "IPSetDescriptors": {
            "type": "Object",
            "required": false,
            "description": "The IP address type and IP address range (in CIDR notation) from which web requests originate.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "The IP address type, such as IPV4.",
                "allowed-values": [
                  "IPV4",
                  "*"
                ]
              },
              "Value": {
                "type": "String",
                "required": true,
                "description": "An IP address (in CIDR notation) that AWS WAF permits, blocks, or counts."
              }
            }
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the IPSet."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::Rule": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::Rule resource creates an AWS WAF rule that specifies a combination of IPSet, ByteMatchSet, and SqlInjectionMatchSet objects that identify the web requests to allow, block, or count.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::Rule resource creates an AWS WAF rule that specifies a combination of IPSet, ByteMatchSet, and SqlInjectionMatchSet objects that identify the web requests to allow, block, or count."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the metrics of this rule."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the rule."
          },
          "Predicates": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The ByteMatchSet, IPSet, or SqlInjectionMatchSet objects to include in a rule.",
            "properties": {
              "DataId": {
                "type": "String",
                "required": true,
                "description": "A unique identifier for the predicate.",
                "resource-ref-type": [
                  "AWS::WAF::ByteMatchSet",
                  "AWS::WAF::IPSet",
                  "AWS::WAF::SqlInjectionMatchSet",
                  "*"
                ]
              },
              "Negated": {
                "type": "Boolean",
                "required": true,
                "description": "Whether to use the settings or the negated settings that you specified in the ByteMatchSet, IPSet, or SqlInjectionMatchSet objects."
              },
              "Type": {
                "type": "String",
                "required": true,
                "description": "The type of predicate in a rule, such as an IPSet (IPMatch). ",
                "allowed-values": [
                  "IPMatch",
                  "ByteMatch",
                  "SqlInjectionMatch",
                  "*"
                ]
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::SizeConstraintSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::SizeConstraintSet resource specifies a size constraint that AWS WAF uses to check the size of a web request and which parts of the request to check.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::SizeConstraintSet resource specifies a size constraint that AWS WAF uses to check the size of a web request and which parts of the request to check."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the SizeConstraintSet."
          },
          "SizeConstraints": {
            "type": "Object",
            "required": true,
            "description": "The size constraint and the part of the web request to check.",
            "properties": {
              "ComparisonOperator": {
                "type": "String",
                "required": true,
                "description": "The type of comparison that you want AWS WAF to perform. AWS WAF uses this value in combination with the Size and FieldToMatch property values to check if the size constraint is a match."
              },
              "FieldToMatch": {
                "type": "Json",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string."
              },
              "Size": {
                "type": "Number",
                "required": true,
                "description": "The size in bytes that you want AWS WAF to compare against the size of the specified FieldToMatch."
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the FieldToMatch property before inspecting a request for a match."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::SqlInjectionMatchSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::IPSet resource creates an AWS WAF SqlInjectionMatchSet, which you use to allow, block, or count requests that contain malicious SQL code in a specific part of web requests. ",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::IPSet resource creates an AWS WAF SqlInjectionMatchSet, which you use to allow, block, or count requests that contain malicious SQL code in a specific part of web requests. "
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the SqlInjectionMatchSet."
          },
          "SqlInjectionMatchTuples": {
            "type": "Object",
            "required": false,
            "description": "The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.",
            "properties": {
              "FieldToMatch": {
                "type": "Object",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string.",
                "properties": {
                  "Data": {
                    "type": "String",
                    "required": false,
                    "description": "If you specify HEADER for the Type property, the name of the header that AWS WAF searches for, such as User-Agent or Referer. If you specify any other value for the Type property, do not specify this property."
                  },
                  "Type": {
                    "type": "String",
                    "required": true,
                    "description": "The part of the web request in which AWS WAF searches for the target string. For valid values, see FieldToMatch in the AWS WAF API Reference.",
                    "allowed-values": [
                      "HEADER",
                      "METHOD",
                      "QUERY_STRING",
                      "URI",
                      "*"
                    ]
                  }
                },
                "TextTransformation": {
                  "type": "String",
                  "required": true,
                  "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass AWS WAF."
                }
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::WebACL": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::WebACL resource creates an AWS WAF web access control group (ACL) containing the rules that identify the Amazon CloudFront (CloudFront) web requests that you want to allow, block, or count.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::Rule resource creates an AWS WAF rule that specifies a combination of IPSet, ByteMatchSet, and SqlInjectionMatchSet objects that identify the web requests to allow, block, or count."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "DefaultAction": {
            "type": "Object",
            "required": true,
            "description": "The action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.",
            "properties": {
              "Type": {
                "type": "String",
                "required": true,
                "description": "For actions that are associated with a rule, the action that AWS WAF takes when a web request matches all conditions in a rule.",
                "allowed-values": [
                  "ALLOW",
                  "BLOCK",
                  "COUNT",
                  "*"
                ]
              }
            }
          },
          "MetricName": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the Amazon CloudWatch metric of this web ACL."
          },
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description of the web ACL."
          },
          "Rules": {
            "type": "Array",
            "array-type": "Object",
            "required": false,
            "description": "The rules to associate with the web ACL and the settings for each rule.",
            "properties": {
              "Action": {
                "type": "String",
                "required": true,
                "description": "The action that Amazon CloudFront (CloudFront) or AWS WAF takes when a web request matches all conditions in the rule, such as allow, block, or count the request.",
                "allowed-values": [
                  "ALLOW",
                  "BLOCK",
                  "COUNT",
                  "*"
                ]
              },
              "Priority": {
                "type": "Number",
                "required": true,
                "description": "The order in which AWS WAF evaluates the rules in a web ACL. AWS WAF evaluates rules with a lower value before rules with a higher value."
              },
              "RuleId": {
                "type": "String",
                "required": true,
                "resource-ref-type": "AWS::WAF::Rule",
                "description": "The ID of an AWS WAF rule to associate with a web ACL."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WAF::XssMatchSet": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WAF::XssMatchSet resource specifies the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks and the name of the header to inspect.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WAF::XssMatchSet resource specifies the parts of web requests that you want AWS WAF to inspect for cross-site scripting attacks and the name of the header to inspect."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "Name": {
            "type": "String",
            "required": true,
            "description": "A friendly name or description for the XssMatchSet."
          },
          "XssMatchTuples": {
            "type": "Object",
            "required": false,
            "description": "The parts of web requests that you want to inspect for cross-site scripting attacks.",
            "properties": {
              "FieldToMatch": {
                "type": "Json",
                "required": true,
                "description": "The part of a web request that you want AWS WAF to search, such as a specific header or a query string."
              },
              "TextTransformation": {
                "type": "String",
                "required": true,
                "description": "Specifies how AWS WAF processes the FieldToMatch property before inspecting a request for a match."
              }
            }
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
,
  "AWS::WorkSpaces::Workspace": {
    "type": "Object",
    "required": false,
    "description": "The AWS::WorkSpaces::Workspace resource creates an Amazon WorkSpaces workspace, which is a cloud-based desktop experience for end users.",
    "properties": {
      "Type": {
        "type": "String",
        "required": true,
        "description": "The AWS::WorkSpaces::Workspace resource creates an Amazon WorkSpaces workspace, which is a cloud-based desktop experience for end users."
      },
      "Properties": {
        "type": "Object",
        "required": true,
        "properties": {
          "BundleId": {
            "type": "String",
            "required": true,
            "description": "The identifier of the bundle from which you want to create the workspace."
          },
          "DirectoryId": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::DirectoryService::SimpleAD",
            "description": "The identifier of the AWS Directory Service directory in which you want to create the workspace."
          },
          "RootVolumeEncryptionEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Amazon WorkSpaces encrypts data stored on the root volume (C: drive)."
          },
          "UserName": {
            "type": "String",
            "required": true,
            "description": "The name of the user to which the workspace is assigned. "
          },
          "UserVolumeEncryptionEnabled": {
            "type": "Boolean",
            "required": false,
            "description": "Indicates whether Amazon WorkSpaces encrypts data stored on the user volume (D: drive)."
          },
          "VolumeEncryptionKey": {
            "type": "String",
            "required": true,
            "resource-ref-type": "AWS::KMS::Key",
            "description": "The AWS Key Management Service (AWS KMS) key ID that Amazon WorkSpaces uses to encrypt data stored on your workspace."
          }
        }
      },
      "Condition": {
        "type": "ConditionDeclaration",
        "required": false,
        "description": "Associated condition that if true will allow the resource to be created."
      },
      "DependsOn": {
        "type": "Resource",
        "required": false,
        "description": "The DependsOn attribute enables you to specify that the creation of a specific resource follows another."
      },
      "Description": {
        "type": "String",
        "required": false,
        "description": "A description for the CloudFormation resource. This field is ignored when the template is deployed to CloudFormation."
      },
      "DeletionPolicy": {
        "type": "String",
        "required": false,
        "allowed-values": [
          "Delete",
          "Retain"
        ],
        "disable-refs": true,
        "description": "The DeletionPolicy attribute enables you to specify how AWS CloudFormation handles the resource deletion."
      },
      "Metadata": {
        "type": "Json",
        "required": false,
        "description": "The Metadata attribute enables you to associate structured data with a resource."
      }
    }
  }
}},
  "Outputs": {
    "type": "Named-Array",
    "required": false,
    "description": "The optional Outputs section enables you to return one or more values to the user.",
    "default-child-schema": {
      "type": "Object",
      "required": false,
      "properties": {
        "Value": {
          "type": "String",
          "required": true,
          "description": "The value of the property that is returned."
        },
        "Description": {
          "type": "String",
          "required": false,
          "description": "A String type up to 4K in length describing the output value."
        },
        "Condition": {
          "type": "ConditionDeclaration",
          "required": false,
          "description": "Associated condition that if true will allow the output to be returned."
        },
        "Export": {
          "type": "Object",
          "required": false,
          "description": "The name of the resource output to be exported for a cross-stack reference.",
          "properties": {
            "Name": {
              "type": "String",
              "required": true,
              "description": "The name of the resource being exported."
            }
          }
        }
      }
    }
  }
}}}